/****************************************************************************
**
** Copyright (c) 2008-2009 Nokia Corporation and/or its subsidiary(-ies).
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Mobility Components.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** If you have questions regarding the use of this file, please
** contact Nokia at http://www.qtsoftware.com/contact.
** $QT_END_LICENSE$
**
****************************************************************************/
#include <QtTest/QtTest>
#include <QtCore>
#include <QVariant>
#include "qvaluespace.h"

Q_DECLARE_METATYPE(QValueSpaceItem);

class tst_QValueSpaceItem: public QObject
{
    Q_OBJECT

private:
    QValueSpaceObject* root;

private slots:
    void initTestCase();
    void cleanupTestCase();
    void init();

    void testConstructorWithoutBase();
    void testConstructorWithoutBase_data();
    void testConstructorWithBase();
    void testAssignmentOperator();
};

void tst_QValueSpaceItem::initTestCase()
{
    QValueSpace::initValuespaceManager();

    root = new QValueSpaceObject("/");
    root->setAttribute("/home/user/bool", true);
    root->setAttribute("/home/user/int", 3);
    root->setAttribute("/home/user/QString", QString("testString"));
    root->setAttribute("/home/user/QByteArray", QString("testByteArray"));
    root->setAttribute("/home/user/double", 4.56);
    root->setAttribute("/home/user/float", 4.56f);
    root->setAttribute("/home/user/QChar", QChar('c'));
    root->setAttribute("/home/user/QRect", QRect(0,0,5,6));
    root->setAttribute("/home/usercount", 1);
    root->sync();
}

void tst_QValueSpaceItem::init()
{
}

void tst_QValueSpaceItem::cleanupTestCase()
{
}

void tst_QValueSpaceItem::testConstructorWithoutBase_data()
{
    QTest::addColumn< QVariant >("itemVariant");
    QValueSpaceItem* item1 = new QValueSpaceItem(QString(), this);
    QVariant data = qVariantFromValue<QValueSpaceItem *>(item1);
    QTest::newRow("QValueSpaceItem(QString(), this") << data;

}

void tst_QValueSpaceItem::testConstructorWithoutBase()
{
    QFETCH(QVariant, itemVariant);
    QValueSpaceItem* item = qVariantValue<QValueSpaceItem *>(itemVariant);
    /*item->sync();
    QCOMPARE(item->parent(), this);
    QCOMPARE(item->value(), QVariant());
    QCOMPARE(item->subPaths(), QList<QString>() << "home");
    QCOMPARE(item->itemName(), QString("/"));*/

}

void tst_QValueSpaceItem::testConstructorWithBase()
{
}

void tst_QValueSpaceItem::testAssignmentOperator()
{
}

QTEST_MAIN(tst_QValueSpaceItem)

#include "tst_qvaluespaceitem.moc"
