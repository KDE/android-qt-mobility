/****************************************************************************
**
** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights.  These rights are described in the Nokia Qt LGPL
** Exception version 1.1, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/


/*!
    \group messaging
    \title Qt Mobility Messaging API

    The Messaging API enables access to messaging services to send
    messages and retrieve message data is provided, as well as messaging
    services to compose, reply to, forward and show messages using a
    native application.

*/

/*!
\page index.html

\title Messaging Library Developer Resources

\brief The Messaging API allows the creation, sending and retrieval of
messages using a native application.


The Messaging API enables access to messaging services to send
messages and retrieve message data, as well as messaging
services to compose, reply to, forward and show messages using a
native application.


\tableofcontents


\section1 Overview

The messaging library provides a set of APIs for accessing messaging data.
Interfaces are provided to retrieve and query messages, folders and
accounts, also interfaces to create, modify, and store messages are
provided. A unified interface for manipulation and storage of SMS, MMS,
Email and XMPP messages is provided. Handling of internet media (MIME)
messages that have only been partially retrieved is supported.

An API to access messaging services to send messages and retrieve message
data is provided, as well as messaging services to compose, reply to,
forward and show messages using a native application.

Notifications of addition, removal and updating of stored messages can be
enabled.

The library provides unified access to the messaging data on a device
including concurrent access to messaging data by multiple applications,
and independence from the mechanism used to store the messaging data on
the device.

This library requires Qt 4.5 to be installed.

To build the library, run qmake and make.

\section1 Reference documentation

\section2 Main classes

\annotatedlist messaging

\section1 Composition and Manipulation of Messages

The library provides a number of classes to assist with the composition
and manipulation of message data. Messages of all supported types are
represented uniformly, although not all transport mechanisms are able to
deliver more complex message formulations. Messages can be composed of
multiple parts and constructed hierarchically. Composition of multipart
messages from individual part objects is supported.

Classes to assist with composition and manipulation of messages:

\table
\header \o Class \o Description
\row \o QMessageId \o Represents the messaging store identifiers for messages.
\row \o QMessage \o Convenient interface for working with messages.
\row \o QMessageContentContainer \o Interface for an internet media (MIME) entity.
\row \o QMessageAddress \o Interface for manipulating message address strings.
\endtable

\section1 Message Accounts

The library provides classes for accessing information about messaging
accounts both outgoing and incoming.

Classes relating to messaging accounts:

\table
\header \o Class \o Description
\row \o QMessageAccountId \o Represents the messaging store identifiers for accounts.
\row \o QMessageAccount \o Stores attributes for a messaging account.
\row \o QMessageFolderId \o Represents the messaging store identifiers for folders.
\row \o QMessageFolder \o Represents a folder of messages on the messaging store.
\endtable

\section1 Sorting and Filtering Functionality

The library provides a number of sort and filter functions to aid in
selecting a useful view of data. This reduces the burden on the client
of the library for managing the messaging data, as well as allowing
better use of the underlying storage mechanism.

Sorting is accomplished by providing a sorting key, specifying the sort
order, and the message property upon which to sort.

Filtering is accomplished by providing a filtering condition, specifying a
value, the property to match, and the desired relation between the value
and the property.

Filters can be combined using boolean operators to produce filters of
arbitrary complexity.

Classes to assist with sorting and filtering messages:

\table
\header \o Class \o Description
\row \o QMessageStore \o Represents the main interface for storage and retrieval of messages, folders and accounts from the messaging store.
\row \o QMessageFilterKey \o Defines the parameters used for querying a subset of all available messages from the messaging store.
\row \o QMessageSortKey \o Defines the parameters used for sorting messages queried from the messaging store.
\row \o QMessageFolderFilterKey \o Defines the parameters used for querying a subset of all available message folders from the messaging store.
\row \o QMessageFolderSortKey \o Defines the parameters used for sorting message folders queried from the messaging store.
\row \o QMessageAccountFilterKey \o Defines the parameters used for querying a subset of all available accounts from the messaging store.
\row \o QMessageAccountSortKey \o Defines the parameters used for sorting accounts queried from the messaging store.
\endtable

\section2   Using the SortKey Functions

An example of the use of SortKey functions can be found in the Send Message
example.

\code
    QMessageIdList ids = QMessageStore::instance()->queryMessages(QMessageFilterKey(),
        QMessageSortKey::receptionTimeStamp(Qt::DescendingOrder), 100, 0);
\endcode


\section2   Using the Filter Functions

The following code is taken from the Keep In Touch example, it
demonstrates the use of filters to achieve desired effects. You can
also see how the filters once constructed can be operated on by typical
boolean operators, in the same way you would manipulate bit settings in C.
In this way we can build more complex conditions.

\code
    QMessageFilterKey includeFilter(QMessageFilterKey::timeStamp(minimumDate,
            QMessageDataComparator::GreaterThanEqual));
    QMessageFilterKey excludeFilter(QMessageFilterKey::timeStamp(maximumDate,
            QMessageDataComparator::GreaterThanEqual));
    QMessageFilterKey outgoingFilter(QMessageFilterKey::status(QMessage::Incoming,
            QMessageDataComparator::Excludes));

    // Search for messages containing addresses to exclude
    service.queryMessages(outgoingFilter & excludeFilter);

    // Create the filter needed to locate messages to search for addresses
    inclusionFilter = (outgoingFilter & includeFilter & ~excludeFilter);
\endcode



\section1 Messaging Services

The library provides the QMessageServiceAction class, which provides an
interface to communicate with the system's native messaging services,
including sending messages, retrieving message data, and composing or
showing a message using a native application.

Service actions communciate their operational status by emitting signals.

\section1 Concurrent Access to Messaging Data

The library provides a level of concurrent access to messaging data by
multiple clients.

The concurrent access does guarantee that data won't be corrupted by
concurrent access, however it does not give any guarantees as to
performance of messaging data access if accessed concurrently by
multiple clients.

\section1 Abstraction of Messaging Data Storage Mechanism

The library abstracts the storage method used to store messaging data.

*/
