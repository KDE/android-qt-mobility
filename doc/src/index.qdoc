/*!

\page index.html

\title Messaging Library Developer Resources

\tableofcontents


\section1 Overview

The messaging library provides a set of APIs for accessing messaging data. Interfaces are provided to retrieve and query messages, folders and accounts, also interfaces to create, modify, and store messages are provided. A unified interface for manipulation and storage of SMS, MMS, Email and XMPP messages is provided. Handling of internet media (MIME) messages that have only been partially retrieved is supported.

An API to access messaging services to send messages and retrieve message data is provided, as well as messaging services to compose, reply to, forward and show messages using a native application.

Notifications of addition, removal and updating of stored messages can be enabled.

The library provides unified access to the messaging data on a device including concurrent access to messaging data by multiple applications, and independence from the mechanism used to store the messaging data on the device.

This library requires Qt 4.5 to be installed.

To build the library, run qmake and make.

\section1 Reference documentation

\section2 Main classes

\list
    \o \l{QMessage}
    \o \l{QMessageAccount}
    \o \l{QMessageAccountId}
    \o \l{QMessageAccountFilterKey}
    \o \l{QMessageAccountSortKey}
    \o \l{QMessageAddress}
    \o \l{QMessageContentContainer}
    \o \l{QMessageContentContainerId}
    \o \l{QMessageDataComparator}
    \o \l{QMessageFilterKey}
    \o \l{QMessageFolder}
    \o \l{QMessageFolderId}
    \o \l{QMessageFolderFilterKey}
    \o \l{QMessageFolderSortKey}
    \o \l{QMessageId}
    \o \l{QMessageServiceAction}
    \o \l{QMessageSortKey}
    \o \l{QMessageStore}
\endlist

\section1 Composition and Manipulation of Messages

The library provides a number of classes to assist with the composition and manipulation of message data.
Messages of all supported types are represented uniformly, although not all transport mechanisms are able to deliver more complex message formulations.
Messages can be composed of multiple parts and constructed hierarchically. Composition of multipart messages from individual part objects is supported.

Classes to assist with composition and manipulation of messages:

\table
\header \o Class \o Description
\row \o QMessageId \o Represents the messaging store identifiers for messages.
\row \o QMessage \o Convenient interface for working with messages.
\row \o QMessageContentContainer \o Interface for an internet media (MIME) entity.
\row \o QMessageAddress \o Interface for manipulating message address strings.
\endtable

\section1 Message Accounts

The library provides classes for accessing information about messaging accounts both outgoing and 
incoming.

Classes relating to messaging accounts:

\table
\header \o Class \o Description
\row \o QMessageAccountId \o Represents the messaging store identifiers for accounts.
\row \o QMessageAccount \o Stores attributes for a messaging account.
\row \o QMessageFolderId \o Represents the messaging store identifiers for folders.
\row \o QMessageFolder \o Represents a folder of messages on the messaging store.
\endtable

\section1 Sorting and Filtering Functionality

The library provides a number of sort and filter functions to aid in selecting a useful view of 
data. This reduces the burden on the client of the library for managing the messaging data, as 
well as allowing better use of the underlying storage mechanism.

Sorting is accomplished by providing a sorting key, specifying the sort order, and the message 
property upon which to sort.

Filtering is accomplished by providing a filtering condition, specifying a value, the property 
to match, and the desired relation between the value and the property.

Filters can be combined using boolean operators to produce filters of arbitrary complexity.

Classes to assist with sorting and filtering messages:

\table
\header \o Class \o Description
\row \o QMessageStore \o Represents the main interface for storage and retrieval of messages, folders and accounts from the messaging store.
\row \o QMessageFilterKey \o Defines the parameters used for querying a subset of all available messages from the messaging store.
\row \o QMessageSortKey \o Defines the parameters used for sorting messages queried from the messaging store.
\row \o QMessageFolderFilterKey \o Defines the parameters used for querying a subset of all available message folders from the messaging store.
\row \o QMessageFolderSortKey \o Defines the parameters used for sorting message folders queried from the messaging store.
\row \o QMessageAccountFilterKey \o Defines the parameters used for querying a subset of all available accounts from the messaging store.
\row \o QMessageAccountSortKey \o Defines the parameters used for sorting accounts queried from the messaging store.
\endtable

\section1 Messaging Services

The library provides the QMessageServiceAction class, which provides an interface to communicate with the system's native messaging services, including sending messages and retrieving message data, and composing, replying to, forwarding and showing a message using a native application.

Service actions communciate their operational status by emitting signals.

\section1 Concurrent Access to Messaging Data

The library provides a level of concurrent access to messaging data by multiple clients.
The concurrent access does guarantee that data won't be corrupted by concurrent access, however it does not give any guarantees as to performance of messaging data access if accessed concurrently by multiple clients.

\section1 Abstraction of Messaging Data Storage Mechanism

The library abstracts the storage method used to store messaging data.

*/
