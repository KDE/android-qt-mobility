/****************************************************************************
**
** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Mobility Components.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \group mobility
    \title Qt Mobility Project APIs

    Qt Mobility Project supplies a set of new APIs for Qt enabling a range of
    mobile-centric technologies and features on mobile and non-mobile platforms.

*/



/*!
    \page index.html
    \startpage index.html  Qt Reference Documentation

    \title Qt Mobility Project APIs Overview

    \brief An overview of the Qt Mobility Project APIs.

    Qt Mobility Project delivers a set of new APIs to Qt with features
    that are well known from the mobile device world, in particular phones.
    However, these APIs allow the developer to use these features with ease
    from one framework and apply them to phones, netbooks and non-mobile
    personal computers. The framework not only improves many aspects of a
    mobile experience, because it improves the use of these technologies,
    but has applicability beyond the mobile device arena.

    \tableofcontents



    \section1 Overview

    \section2 Introducing the New Qt APIs

    This release contains the following APIs:

    \annotatedlist  mobility

    These APIs give the developer a wide range of desirable functions for a
    mobile platform, but these now become possible on platforms not
    traditionally associated with some of the features. A mobile device
    using the Qt Mobility Project API would be able to
        \list
        \o Locate services on-board or remotely. Find an optimal
    connection to the network for the particular service.
        \o Services built on top of these APIs would include Internet
        applications such as email and web browsing.
        \o Multimedia features enable image and video capture with audio ,
    audio recording, and the playing of music or video clips. However,
    camera ability is not part of this release.
        \o Location will make the device aware of its geographical location
    to support GIS applications.
        \o Publish-Subscribe enables communication between separate objects
        whether local or remote to the device.
        \endlist

    The New Qt APIs deliver to developers an enabling package. It
    will be used by developers to build a variety of applications and
    services that are mobile capable or familiar to mobile users,
    irrespective of whether the platform is mobile or not. This means that
    there is the possibility of easy transfer of user experience from PC to
    phone or vice versa.

    \section2 Getting Started
    To get started with Qt Mobility see the
    \list
        \o \l {Installation Guide}
        \o \l {Quickstart Example}
        \o \l {Qt Mobility Examples}{List of all examples.}
    \endlist
    
    For users on the supported Symbian platforms, shown at the bottom of this
    page, see the instructions at the
    \l{http://library.forum.nokia.com/topic/Qt_for_Symbian_Developers_Library/GUID-7E53D0F7-72CB-41C4-8807-FE7A772B0DB4.html}{Qt For Symbian Developer's Library}

    \section2 Known Issues
    For a list of known issues and an additional details on feature supported see 
    \l {Release Notes of the QtMobility Project}.

    For a overview of Platform Compatability see \l {Platform Compatability}.
    
    \section1 The New Qt APIs
    \section2 Bearer Management

    Although not a network manager, this component manages the connectivity
    state to the network. So it does not manage network configurations, which
    are the role of the platform provider, but it does allow the user to start
    or stop network interfaces. Some higher level management of the connection
    session may also be possible as well depending on the platform.

    Some platforms can have a set of grouped access points perhaps based on a
    common purpose. Bearer Management allows comparison and prioritization
    of the access and use of these points. 

    The aim of Bearer Management is to reduce the need for the developer to be
    concerned about trying to locate the best connection from a list of
    possible IP bearers and 3G connections. The user can select the best or
    it can be selected transparently so that WLAN roaming can occur
    seemlessly.

    Some examples of the Bearer Management functionality,
        \list
        \o On demand use of the appropriate Access Point. When a user starts
    to use a browser, the appropriate access point is selected from those
    available and a connection is transparently made.
        \o Always-on applications such as email or IM roam automatically
    between cellular packet data and WLAN networks. The application developer
    is in control and for example the application can gracefully close TCP
    connections over the old bearer after setting up new TCP connections
    over the new bearer.
        \o Application developer can create a settings user interface, where
    the user can select a certain connection to be used with the application
        \o A connection manager application can be implemented with Qt. This
    application enumerates available connections, shows counters, and allows
    the user to connect or disconnect
        \endlist
    
    For more details, see the \l {Bearer management} {Bearer Management API overview}.

    \section2 Contacts

    The structure and retrieval of contact data from local or remote backends.
    It includes the ability to create, edit, list, delete and lookup contact
    information whether it is stored locally or remotely.

    For more details, see the \l {Contacts} {Contacts API overview}.

    \section2 Publish and Subscribe

    Will enable context sensitive access to information in future releases.
    Data is organized as a tree, with data being able to 'shadow' other
    data with the 'same key', a string specifying the leaf or node. The
    context is an example of a context ontology, a defined set of
    relationships. As the context changes the values of the objects change
    but the relationships remain the same. It is intended to be an enabling
    technology, the basis of a range future applications.

    At this stage the API is intended to act as a common communications
    method between applications, whether local or remote.
    
    For more details, see the \l {Publish and Subscribe} {Publish and Subscribe API overview}.

    \section2 Location

    The C++ API is one layer of this feature. This API provides an easy to
    use interface that encapsulates basic geographical information obtained
    from satellite or other sources about the user, including latitude and
    longitude, bearing, speed and altitude. It will enable a range of
    geographical applications, for example, maps.
    
    For more details, see the \l {Location} {Location API overview}.

    \section2 Messaging

    A common interface for handling SMS, MMS, MIME Email and TNEF Email 
    messages. Enables access to messaging services to search and sort 
    messages, notify of changes to messages stored, send messages 
    with or without attachments, retrieve message data, and launch the 
    preferred messaging client to either display an existing message, 
    or compose a message.

    For more details see the \l {Messaging} {Messaging API overview}.

    \section2 Multimedia

    An API to play audio and video of various formats. Record audio. The playing
    and managing of an FM radio. This includes the typical functionality you
    would find on a music and video player, combined with an FM radio.

    \note The Multimedia API, together with QtMultimedia, is intended to
    eventually replace the Phonon API.

    For more details see the \l {Multimedia} {Multimedia API overview}.

    \section2 Service Framework

    A platform independent method of finding Services. A 'service' is an
    independent component that allows a client to perform a well-defined 
    operation.

    The services are implemented as plugins installed on the device and can
    look for supporting external services running on a central server. E.g.
    weather, local tourist attractions etc. Default applications can use
    the layer to locate servers.

    Since this is an abstraction layer then the app does not need to be
    concerned with the underlying protocol, where the servers are, the
    hardware peculiarities with networking and other low level details.
    
    For more details see the \l {Qt Service Framework} {Service Framework API overview}.

    \section2 System Information

    An API to discover system related information and capabilities. Information
    available will cover software version numbers, hardware features,
    network connection types and status, display, data storage devices,
    device information and the screensaver.
    
    For more details see the \l {System Information} {System Information API overview}.

    \section1 Included Technology Preview APIs
    
    Two additional APIs are included which show future additional APIs. These
    are pre-release versions and the API will likely change before they are
    officially released. You may use these APIs in accordance with the terms and
    conditions contained in the Technology Preview License Agreement
    accompanying this package.

    We are making these available so that developers can see that future
    updates will not only refine the API but add important features. We
    are proud of the work we have done on this project and want to show
    not only what we are delivering now but what is around the corner.
    
    \section2 Camera

    A technology preview of the Camera API will be made available with this
    release. The Camera will be treated separately from Multimedia at this
    stage because of the different level of maturity of the APIs.

    For more details see the \l {preview.html#Camera-Support}{Camera classes}.

    \section2 Sensors

    An API for accessing hardware sensors. This covers both high-level
    sensors such as screen orientation (portrait, landscape) and low-level,
    real-time sensors such as accelerometer data.

    For more details see the \l{Sensors API (technology preview)}{Sensors API overview}.

    \section2 Versit

    An API to manage Versit \reg documents, such as vCards.

    For more details see the \l{Versit API (technology preview)}{Versit API overview}.
    
    \section1 The QtMobility Namespace 

    The QtMobility API's are placed into the QtMobility namespace. This is done to facilitate
    the future migration of Mobility API's into Qt. See the \l {Quickstart Example}{Quickstart guide} for an example on how
    the namespace impacts on application development.


    \section1 Platform Compatability


    \raw HTML

    <table border="0">
    <tr>
    <td>Color</td>
    <td>Explanation</td>
    </tr>
    <tr>
    <td bgcolor="green"></td>
    <td>A functional backend for the API on the platform exists inside QDF source code.</td>
    </tr>
    <tr>
    <td bgcolor="lightgreen"></td>
    <td>A functional backend for the API on the platform is being worked however it is not functionally complete.</td>
    </tr>
    <tr>
    <td bgcolor="lightgray"></td>
    <td>A functional backend for the API on the platform is being worked on.
    At this point it is far from functionally complete or there is no platform specific code inside QDF source code.</td>
    </tr>
    <tr>
    <td bgcolor="gray"></td>
    <td>A functional backend for the API on the platform is not being worked on. It is
    possible for others to implement and integrate support.</td>
    </tr>
    </table>
    <br>
    <table border="1">
    <tr>
    <td></td>
    <td><b>API Maturity Level</b></td>
    <td><b>S60 3rd Edition, Feature Pack 1</b></td>
    <td><b>S60 3rd Edition, Feature Pack 2</b></td>
    <td><b>S60 5th Edition</b></td>
    <td><b>Symbian 9.2</b></td>
    <td><b>Symbian 10.1</b></td>
    <td><b>Maemo 5</b></td>
    <td><b>Maemo 6</b></td>
    <td><b>Windows CE/Mobile<b></td>
    <td><b>Windows XP/Vista</b></td>
    <td><b>Linux</b></td>
    <td><b>Mac OS X</b></td>
    <td><b>Other</b></td>
    </tr>
    <tr>
    <td>Service Framework (in-process)</td>
    <td>BETA</td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="lightgreen"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td></td>
    </tr>
    <tr>
    <td>Messaging</td>
    <td>BETA</td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="lightgray"></td>
    <td bgcolor="lightgray"></td>
    <td bgcolor="lightgray"></td>
    <td bgcolor="lightgreen"></td>
    <td bgcolor="green">Using MAPI and Pocket Outlook Object Model</td>
    <td bgcolor="lightgreen">Using MAPI and Outlook</td>
    <td bgcolor="green">Using QMF</td>
    <td bgcolor="gray"></td>
    <td></td>
    </tr>
    <tr>
    <td>Bearer Management</td>
    <td>BETA</td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="lightgray"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td></td>
    </tr>
    <tr>
    <td>Publish and Subscribe</td>
    <td>BETA</td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="lightgreen"></td>
    <td bgcolor="lightgreen"></td>
    <td bgcolor="lightgreen"></td>
    <td bgcolor="lightgreen"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td></td>
    </tr>
    <tr>
    <td>Contacts</td>
    <td>BETA</td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="lightgray"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="gray"></td>
    <td bgcolor="gray"></td>
    <td bgcolor="gray"></td>
    <td></td>
    </tr>
    <tr>
    <td>Location</td>
    <td>BETA</td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="lightgreen"></td>
    <td bgcolor="lightgreen"></td>
    <td bgcolor="green"></td>
    <td bgcolor="gray"></td>
    <td bgcolor="gray"></td>
    <td bgcolor="gray"></td>
    <td bgcolor="green">NMEA data provider support</td>
    </tr>
    <tr>
    <td>Multimedia</td>
    <td>BETA</td>
    <td bgcolor="lightgreen"></td>
    <td bgcolor="lightgreen"></td>
    <td bgcolor="lightgreen"></td>
    <td bgcolor="lightgreen"></td>
    <td bgcolor="lightgray"></td>
    <td bgcolor="lightgray"></td>
    <td bgcolor="lightgray"></td>
    <td bgcolor="lightgray"></td>
    <td bgcolor="lightgray"></td>
    <td bgcolor="green">GStreamer</td>
    <td bgcolor="lightgray"></td>
    <td></td>
    </tr>
    <tr>
    <td>System Information</td>
    <td>BETA</td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="lightgreen"></td>
    <td bgcolor="lightgreen"></td>
    <td bgcolor="lightgreen"></td>
    <td bgcolor="lightgray"></td>
    <td bgcolor="lightgreen"></td>
    <td bgcolor="green"></td>
    <td bgcolor="green"></td>
    <td bgcolor="lightgreen"></td>
    <td></td>
    </tr>
    <td>Sensors</td>
    <td>TP</td>
    <td bgcolor="lightgray"></td>
    <td bgcolor="lightgray"></td>
    <td bgcolor="lightgray"></td>
    <td bgcolor="lightgray"></td>
    <td bgcolor="lightgray"></td>
    <td bgcolor="lightgreen"></td>
    <td bgcolor="lightgray"></td>
    <td bgcolor="gray"></td>
    <td bgcolor="gray"></td>
    <td bgcolor="gray"></td>
    <td bgcolor="gray"></td>
    <td></td>
    </tr>
    <td>Camera</td>
    <td>TP</td>
    <td bgcolor="lightgreen"></td>
    <td bgcolor="lightgreen"></td>
    <td bgcolor="lightgreen"></td>
    <td bgcolor="lightgray"></td>
    <td bgcolor="lightgray"></td>
    <td bgcolor="gray"></td>
    <td bgcolor="gray"></td>
    <td bgcolor="gray"></td>
    <td bgcolor="gray"></td>
    <td bgcolor="lightgreen"></td>
    <td bgcolor="gray"></td>
    <td></td>
    </tr>
    <p />
    <p />
    </table>
    <br>

    \endraw

    \section1 Feedback and bug reports
    Email any inquiries and feedback about Qt Mobility to qt-mobility-feedback@trolltech.com

    And please report any bugs you may find to \l {http://bugreports.qt.nokia.com}

    \section1 Acknowledgements

    The icheck tool uses the following third-party component:

    \bold {Open Source front-end for C++ (MIT license)}, Roberto Raggi <roberto.raggi@gmail.com>, QTMOBILITY/tools/icheck/parser/src
*/

