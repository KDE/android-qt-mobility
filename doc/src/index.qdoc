/****************************************************************************
**
** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/




/*!

\page index.html

\title Location Library Developer Resources

\brief The Location API provides a library for distributing and receiving 
location data using arbitrary data sources.

The Location API represents a position on the Earth at a particular 
latitude and longitude. Other data specifying the time, altitude, velocity 
and bearing are also included. 


\tableofcontents


\section1 Introduction


Location data involves a precisely specified position on the Earth's 
surface \unicode {0x2014} as provided by a latitude-longitude coordinate 
\unicode {0x2014} along with associated data, such as:

    \list
    \o The date and time at which the position was reported
    \o The velocity of the device that reported the position
    \o The altitude of the reported position (height above sea level)
    \o The bearing of the device in degrees, relative to true north
    \endlist

This data can be extracted through a variety of methods. One of the most 
well known methods of positioning is GPS (Global Positioning System), a 
publicly available system that uses radiowave signals received from 
Earth-orbiting satellites to calculate the precise position and time of 
the receiver. Another popular method is Cell ID positioning, which uses 
the cell ID of the cell site that is currently serving the receiving 
device to calculate its approximate location. These and other positioning 
methods can all be used with the Location API; the only requirement for a 
location data source within the API is that it provides a latitude-longitude 
coordinate with a date/time value, with the option of providing the other 
attributes listed above.


\section1 Requirements

This library requires Qt 4.5 to be installed.

To build the library, run \tt qmake and \tt make, then \tt {make install}.


\section1 Overview

The main API classes are:

\list
    \o \l{QGeoCoordinate}
    \o \l{QGeoPositionInfo}
    \o \l{QGeoPositionInfoSource}
    \o \l{QGeoAreaMonitor}
    \o \l{QGeoSatelliteInfo}
    \o \l{QGeoSatelliteInfoSource}
\endlist

Location data sources are created by subclassing QGeoPositionInfoSource and 
providing QGeoPositionInfo objects through the 
QGeoPositionInfoSource::positionUpdated() signal. Clients that require 
location data can connect to the \l{QGeoPositionInfoSource::positionUpdated()}{positionUpdated()} 
signal and call \l{QGeoPositionInfoSource::startUpdates()}{startUpdates()} 
or \l{QGeoPositionInfoSource::requestUpdate()}{requestUpdate()} to trigger 
the distribution of location data.

A default position source may be available on some platforms. Call 
QGeoPositionInfoSource::createSource() to create an instance of the default 
position source; the method returns 0 if no default source is available 
for the platform.

The QGeoAreaMonitor class enables client applications to be notified when 
the receiving device has moved in or out of a particular area, as specified 
by a coordinate and radius. If the platform provides built-in support for 
area monitoring, QGeoAreaMonitor::createMonitor() returns an instance of 
the default area monitor.

Satellite information can also be distributed through the 
QGeoSatelliteInfoSource class. Call QGeoSatelliteInfoSource::createSource() to 
create an instance of the default satellite data source for the platform, 
if one is available. Alternatively, clients can subclass it to provide a 
custom satellite data source.


\section1 Requesting location data from data sources

To receive data from a source, connect to its 
\l{QGeoPositionInfoSource::positionUpdated()}{positionUpdated()} signal, 
then call either \l{QGeoPositionInfoSource::startUpdates()}{startUpdates()} 
or \l{QGeoPositionInfoSource::requestUpdate()}{requestUpdate()} to begin.

Here is an example of a client that receives data from the default 
location data source, as returned by QGeoPositionInfoSource::createSource():

\code
class MyClass : public QObject
{
    Q_OBJECT
public:
    MyClass(QObject *parent = 0)
        : QObject(parent)
    {
        QGeoPositionInfoSource *source = QGeoPositionInfoSource::createSource();
        if (source) {
            connect(source, SIGNAL(positionUpdated(QGeoPositionInfo)),
                    this, SLOT(positionUpdated(QGeoPositionInfo)));
            source->startUpdates();
        }
    }

private slots:
    void positionUpdated(const QGeoPositionInfo &info)
    {
        qDebug() << "Position updated:" << info;
    }
};

\endcode

\section2 Controlling aspects of data sources

The QGeoPositionInfoSource::setUpdateInterval() method can be used to 
control the rate at which position updates are received. For example, 
if the client application only requires updates once every 30 seconds, it 
can call \c setUpdateInterval(30000). (If no update interval is set, or 
setUpdateInterval() is called with a value of 0, the source uses a default 
interval or some other internal logic to determine when updates should 
be provided.)

QGeoPositionInfoSource::setPreferredPositioningMethods() enables client 
applications to request that a certain type of positioning method be used. 
For example, if the application prefers to use only satellite positioning, 
which offers fairly precise outdoor positioning but can be a heavy user of 
power resources, it can call this method with the 
QGeoPositionInfoSource::SatellitePositioningMethods value. However, this 
method should only be used in specialized client applications; in most 
cases, the default positioning methods should not be changed, as a source 
may internally use a variety of positioning methods that can be useful to 
the application.

\section2 Reading NMEA data

\l {http://en.wikipedia.org/wiki/NMEA_0183}{NMEA} is a common text-based 
protocol for specifying navigational data. For convenience, the 
QNmeaPositionInfoSource is provided to enable client applications to read 
and distribute NMEA data in either real-time mode (for example, when 
streaming from a GPS device) or simulation mode (for example, when reading 
from a NMEA log file). In simulation mode, the source will emit updates 
according to the time stamp of each NMEA sentence to produce a "replay" 
of the recorded data.


\section1 Example: Logfile Position Source - Creating a custom location data source

Generally, the capabilities provided by the default position source as 
returned by QGeoPositionInfoSource::createSource(), along with the 
QNmeaPositionInfoSource class, are sufficient for retrieving location 
data. However, in some cases developers may wish to write their own custom 
location data sources.

The \c LogFilePositionSource class in \c examples/logfilepositionsource 
shows how to subclass QGeoPositionInfoSource to create a custom location 
data source.

This example class reads location data from a text file, \i log.txt. The 
file specifies location data using a simple text format: it contains one 
location update per line, where each line contains a date/time, a latitude 
and a longitude, separated by spaces. The date/time is in ISO 8601 format 
and the latitude and longitude are in degrees decimal format. Here is an 
excerpt from \i log.txt:

    \code
    2009-08-24T22:25:01 -27.576082 153.092415
    2009-08-24T22:25:02 -27.576223 153.092530
    2009-08-24T22:25:03 -27.576364 153.092648
    \endcode

The class reads this data and distributes it via the 
\l{QGeoPositionInfoSource::positionUpdated()}{positionUpdated()} signal.

Here is the definition of the \c LogFilePositionSource class:

    \quotefromfile logfilepositionsource/logfilepositionsource.h
    \skipto class LogFilePositionSource
    \printuntil };

The main methods overridden by the subclass are:

    \list
    \o \l{QGeoPositionInfoSource::startUpdates()}{startUpdates()}: called by client applications to start regular position updates
    \o \l{QGeoPositionInfoSource::stopUpdates()}{stopUpdates()}: called by client applications to stop regular position updates
    \o \l{QGeoPositionInfoSource::requestUpdate()}{requestUpdate()}: called by client applications to request a single update, with a specified timeout
    \endlist

When a position update is available, the subclass emits the 
\l{QGeoPositionInfoSource::positionUpdated()}{positionUpdated()} signal.

Here are the key methods in the class implementation:

    \quotefromfile logfilepositionsource/logfilepositionsource.cpp
    \skipto LogFilePositionSource::LogFilePositionSource
    \printuntil /^\}/
    \skipto LogFilePositionSource::startUpdates
    \printuntil /^\}/
    \skipto LogFilePositionSource::stopUpdates
    \printuntil /^\}/
    \skipto LogFilePositionSource::requestUpdate
    \printuntil /^\}/
    \printuntil LogFilePositionSource::readNextPosition
    \printuntil /^\}/


The example includes a \c ClientApplication class that requests updates 
from the \c LogFilePositionSource class. Run the exaple to see the data 
that is received by \c ClientApplication.

Before running the example, make sure you have done both \tt make 
and \tt {make install}.

*/

