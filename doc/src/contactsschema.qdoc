/****************************************************************************
**
** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Mobility Components.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!

\page contactsschema.html

\title Qt Contacts Schema

\tableofcontents

\section1 Introduction

The \l{Contacts}{Qt Contacts API} makes use of detail leaf classes
which provide certain well-known functionality.  In order to develop a backend engine which
can service clients or provide synchronisation to other backends, the schema must be
known.

\section1 Schema Definition

Different backends have different capabilities.  Some backends may not be able to implement
certain definitions in the default schema (for example, some backends might not have support for
storing location information), while other backends may not be able to implement some aspects
of a particular definition in the default schema (for example, a logo field for organisation
details).

In order to be useful for clients, however, all backends should attempt to support the default
schema.  Furthermore, no backend should support a schema definition of a modified form where
those modifications change the semantics of the data.  A client should be able to request details
of the QContactPhoneNumber type (that is, details whose definition name is "PhoneNumber") with
reasonable certainty that the data returned is a phone number.

By implementing the default schema, the backend developer ensures that client code written against
the default schema will work without source modification against their backend.

\section1 Default Schema

The leaf details that form the default schema are as follows:
\annotatedlist contacts-details


In the default schema, each of these definitions have various access and uniqueness constraints.
Additionally, fields of the definitions may have an access constraint of read-only defined for them.

\section2 Detail Definition Uniqueness

A uniqueness constraint on a detail definition means that for any \l{QContact}, only one detail of that
definition may be saved.  Generally, it is information for which a contradicting detail would mean
inability to identify the contact.  Please note that some details, such as \l{QContactBirthday} or
\l{QContactName}, do not have a uniqueness constraint, since in different contexts, different information
may be valid.

The leaf classes which have a uniqueness constraint in the default schema are as follows:
\list
    \o \l{QContactDisplayLabel}
    \o \l{QContactType}
    \o \l{QContactSyncTarget}
    \o \l{QContactGuid}
\endlist

\section2 Detail Definition Access Constraints

An access constraint on a detail definition means that for any detail of that definition in a \l{QContact},
the specified access constraints apply.  For example, the \l{QContactDisplayLabel} is defined in the default
schema as a read-only detail definition; meaning that details of that type in a contact cannot be created, modified or deleted by
the client, but are provided by the backend (in the case of \l{QContactDisplayLabel}, automatically synthesized
by the backend from various details of the contact).

There are three possible detail definition-level access constraints: read-only, create-only and no-constraint.
A read-only constraint ensures that clients cannot create, delete or modify details of that definition; a create-only
constraint ensures that clients cannot modify details of that definition, but can create them (with whichever
values they see fit); if no constraint is specified, details of that definition may be created, modified or deleted as required.

Please see the documentation of \l{QContactDetailDefinition} for more information on access constraints.

The leaf classes which have access constraints in the default schema are as follows:
\list
    \o \l{QContactGuid} is \c QContactDetailDefinition::CreateOnly
    \o \l{QContactSyncTarget} is \c QContactDetailDefinition::CreateOnly
    \o \l{QContactTimestamp} is \c QContactDetailDefinition::ReadOnly
    \o \l{QContactDisplayLabel} is \c QContactDetailDefinition::ReadOnly
\endlist

Furthermore, in the default schema, every contact is required to have at least two details by default: a \l{QContactType} which describes
the type of entity that the contact represents (for example, a person or a group), and a \l{QContactDisplayLabel} which holds
the default display label for the contact.

\section2 Field Access Constraints

Furthermore, some fields of some definitions are also constrained to be read-only.  This is information which is generated or automatically
provided by the backend, which is related to user-provided information that is also stored in the detail.

The eponymous example of this is the \l{QContactOnlineAccount} leaf detail, which has unconstrained fields which store the URI and service
provider of the account, and several read-only fields in which are stored presence information, status messages, and service availability.

Currently, the \l{QContactOnlineAccount} is the only leaf detail with field-level access constraints.  Every field in details of this
type are \c QContactDetailDefinition::ReadOnly except for \c QContactOnlineAccount::FieldAccountUri and
\c QContactOnlineAccount::FieldServiceProvider, which have no constraint.

*/
