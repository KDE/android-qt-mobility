/****************************************************************************
**
** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Mobility Components.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/


/*!
    \group multimedia
    \title Mobility Multimedia
    APIs to play and record media, and manage a collection of media content.
*/



/*!

\page multimedia.html
\title Multimedia
\brief Provides a set of APIs to play and record media, and manage a 
collection of media content.
\ingroup mobility

\warning The camera support classes are in a technology preview state. They
are in development and subject to change.

Multimedia provides a set of APIs that allow the developer to play, record
and manage a collection of media content. It is dependent on the
QtMultimedia API.

\tableofcontents



\section1 Overview


This library will require Qt 4.6.

This API delivers an easy to use interface to multimedia functions whether
the developer wants to show an image, a video, record sound or play a
multimedia stream.

There are several benefits from that this API brings to Qt. Firstly, the
developer can now implement fundamental multimedia functions with minimal
code, mostly because they are already implemented. Also there is a great
deal of flexibility with the source or generated multimedia. The source file
does not need to be local to the device, it could be streamed from a remote
location and identified by a URL. Many different codecs are supported 'out
of the box'.

The supplied examples give a good idea at the ease of use of the API. When
the supporting user interface code is ignored we can see that functionality
is immediately available with minimal code.

\section2 Audio

Looking at the Audio Recorder example we see that by creating a QMediaRecorder
object that is initialized with a newly created QAudioCaptureSource object
we can now perform all the core actions necessary to record a sound source.

To initialize the objects we create a QAudioCaptureSource object. This will
have a list of available devices to choose from so that we can identify the
origin of the audio data. We then use the capture source object to
initialize a QMediaRecorder object

\snippet snippets/multimedia-snippets/audiorecorder.cpp create-objs-1

The API now allows us to discover available devices and codecs as shown in
the example. To actually do the recording we merely have to call the
\l{QMediaRecorder::record()}{record()} function, and to stop call the
\l{QMediaRecorder::stop()}{stop()} function. Saving to a file is done simply by
calling QMediaRecorder::setOutputLocation() before starting to record.

With a handful of functions and two classes we can implement a sound
recording application, excluding the supporting user interface code.


\section2 Video

Support for the camera is not included in this release but will be part of
a future update.

For playing and manipulating video sources the API enables us to easily
implement a player application. If we examine the \l{player}{Player}
example we see that the implementation of a simple media player requires a
QMediaPlayer object, which is used to initialize a QMediaPlaylist object.

\snippet snippets/multimedia-snippets/player.cpp  create-objs

To display the playing video file we need a QVideoWidget object. However,
instead of using a QVideoWidget object directly the Player example has a
VideoWidget class that inherits from QVideoWidget so that functions can be
added to go to full screen display, either on a double click or on a
particular keypress.


\section2 Radio

QRadioTunerControl is a pure virtual base class that will be the basis for
any platform specific radio device control. When the functions are
implemented the developer will be able to quickly produce an application
that supports the typical uses of an FM radio including tuning, volume,
start, stop and various other controls.


\section1 Examples

\section2 Record a Sound Source

\l{audiorecorder}{AudioRecorder} is a demonstration of the discovery of
the supported devices and codecs and the use of recording functions in the
QMediaRecorder class.

\section2 Play a Media File

The \l{player}{Player} example is a simple multimedia player. Select a
video file to play, stop, pause, show in fullscreen or manipulate various
image attributes using the Color Options button.

\section2 Slide Show

The \l{slideshow}{Slide Show} shows the use of the QMediaImageViewer and
QVideoWidget classes.



\section1 Reference documentation

\section2 Main classes

\annotatedlist multimedia


\section2 Classes for service implementers.

\annotatedlist multimedia-serv

*/
