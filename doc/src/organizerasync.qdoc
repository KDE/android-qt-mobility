/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in a
** written agreement between you and Nokia.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
** $QT_END_LICENSE$
**
****************************************************************************/


/*!

\page organizerasync.html

\title Organizer Asynchronous API

\tableofcontents


\section1 Introduction

The Organizer Asynchronous API enables a client to asynchronously fetch,
update, or remove calendar, scheduling and personal data from an organizer
item manager.  Use of the asynchronous API offers the programmer greater
flexibility when requesting information from remote or slow local datastores.

\section1 Using the API

The asynchronous API offered by the Organizer module is available through classes
derived from the QOrganizerAbstractRequest class.  It consists of three major sections:
\list
  \o Organizer Item Manipulation
  \o Item Collection Manipulation
  \o Schema Manipulation
\endlist

The functionality offered by the synchronous API in these two categories is also
available through the asynchronous API.  There is one category of functionality
which is not provided by the asynchronous API which is provided by the synchronous
API: some information and reporting functionality is only provided through the
synchronous API.

For detailed information about the information and reporting functionality
provided, please refer to the documentation for the
\l{Organizer Synchronous API}.

\section2 Organizer Item Manipulation

The most common type of operation that clients will perform involves retrieval
or modification of organizer items.  For in-depth information about item
manipulation, please refer to the \l{Organizer Synchronous API}, as the data
semantics of such operations are the same.

There are six different types of operation which are supported by the asynchronous API:
\list
  \o Fetch item ids
  \o Fetch persistent items (for export)
  \o Fetch items (including generated occurrences) in a time period
  \o Fetch the occurrences of a specific item
  \o Save items (create or update)
  \o Remove items
\endlist

These operations are supported via the QOrganizerItemIdFetchRequest,
QOrganizerItemFetchForExportRequest, QOrganizerItemFetchRequest,
QOrganizerItemOccurrenceFetchRequest, QOrganizerItemSaveRequest and
QOrganizerItemRemoveRequest classes, respectively.

The synchronous API offered by the QOrganizerManager class to allow
manipulation of organizer items consists of the following functions:
\list
  \o itemIds()
  \o itemsForExport()
  \o items()
  \o itemOccurrences()
  \o saveItems()
  \o removeItems()
\endlist


\section2 Item Collection Manipulation

Every item is saved in a collection in a manager.  Each collection has various
properties which, if the manager supports such operations, may be modified
by clients.

There are three different types of operation which are supported by the asynchronous API:
\list
  \o Fetch collections (that is, the object which defines the properties of a collection)
  \o Save collections (create or update)
  \o Remove collections
\endlist

These operations are supported via the
QOrganizerCollectionFetchRequest, QOrganizerCollectionSaveRequest and
QOrganizerCollectionRemoveRequest classes, respectively.

The analogous synchronous API offered by the QOrganizerManager class to allow
manipulation of collections consists of the following functions:
\list
  \o collections()
  \o saveCollection()
  \o removeCollection()
\endlist

The synchronous API also offers a function which returns the default
collection of the manager, and a convenience function which returns a
collection given a collection id.


\section2 Schema Manipulation

The schema supported by a plugin is the list of detail definitions which are supported by the plugin.
For in-depth information about the schema, please refer to the \l{Organizer Synchronous API}.

There are three different types of operation which are supported by the asynchronous API:
\list
  \o Fetch detail definitions
  \o Save detail definitions (create or update, if supported by the backend)
  \o Remove detail definitions (if supported by the backend)
\endlist

These operations are supported via the the QOrganizerItemDetailDefinitionFetchRequest,
QOrganizerItemDetailDefinitionSaveRequest and QOrganizerItemDetailDefinitionRemoveRequest classes,
respectively.

The analogous synchronous API offered by the QOrganizerManager class to allow manipulation
of the schema consists of the following functions:
\list
  \o detailDefinitions()
  \o saveDetailDefinition()
  \o removeDetailDefinition()
\endlist

\section1 Usage

All asynchronous operations are performed in a similar manner:
a request of the desired type (which is derived from
QOrganizerAbstractRequest) is created, certain criteria are set which
determine the intent of the request, QOrganizerAbstractRequest::stateChanged()
signal of the request is connected to a slot which deals with the results.
The request can then be started.

Note that if the client is interested in receiving the results of the request
as they become available, rather than only the final set of results once the
request changes state (to \c FinishedState, for example), the client should
instead connect the QOrganizerAbstractRequest::resultsAvailable() signal to the
slot which deals with the results.

*/
