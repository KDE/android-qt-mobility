
/*!
    \group gallery
    \title Document Gallery

    API to find and manage documents.
*/

/*!
    \group gallery-requests
    \title Document Gallery Requests

    API for requesting information, and actions from a document gallery.
*/

/*!
    \group gallery-filters
    \title Document Gallery Filters

    API for identifying documents within a gallery.
*/

/*!
    \group gallery-galleries
    \title Document Galleries.

    API for document galleries.
*/

/*!
    \page gallery.html

    \title Document Gallery

    \brief Provides an API for finding and managing documents.

    \section1 Overview

    \section2 Galleries

    \annotatedlist gallery-galleries

    \section2 Document Lists.

    \l QGalleryItemList

    \section2 Filters

    \annotatedlist gallery-filters

    \section2 Requests

    \annotatedlist gallery-requests

    \section1 Open Issues.

    \section2 Requests versus filters.

    Some of the filters could reasonably be implemented as requests instead.

    Specfically QGalleryItemFilter, QGalleryItemUrlFilter, QGalleryContainerFilter,
    QGalleryContainerFilter, and QGalleryItemRequest classes could be replaced
    by more specific request classes.  For example:

    \code
    // Replaces QGalleryItemFilter + QGalleryItemRequest.
    // Returns a single item.
    class QGalleryItemRequest : public QGalleryAbstractRequest
    {
        QStringList propertyNames() const;
        void setPropertyNames(const QStringList &names);

        QString itemId() const;
        void setItemId(const QString &id);

        QGalleryItemList *item() const;
    };

    // Replaces QGalleryItemUrlFilter + QGalleryItemRequest;
    // Returns the item(s?) matching a specific URL.
    class QGalleryUrlRequest : public QGalleryAbstractRequest
    {
        QStringList propertyNames() const;
        void setPropertyNames(const QStringList &names);

        QUrl itemUrl() const;
        void setItemUrl(const QUrl &url);

        // Should an entry be added to the gallery if one doesn't already
        // exist?
        bool create() const;
        void setCreate(bool create);

        QGalleryItemList *item() const;
    };

    // Replaces QGalleryContainerFilter + QGalleryItemRequest;
    // Returns the immediate children of a container object.
    class QGalleryContainerRequest : public QGalleryAbstractRequest
    {
        QStringList propertyNames() const;
        void setPropertyNames(const QStringList &names);

        QStringList sortPropertyNames() const;
        void setSortPropertyNames(const QStringList &names);

        // Only include children of a specific type.
        QString itemType() const;
        void setItemType(const QString &type);

        QString containerId() const;
        void setContainerId(const QString &id);

        QGalleryItemList *items() const;
    };

    // Replaces query type filter + QGalleryItemRequest
    // Returns all items matching a meta-data query.
    class QGalleryFilterRequest : public QGalleryAbstractRequest
    {
        QStringList propertyNames() const;
        void setPropertyNames(const QStringList &names);

        QStringList sortPropertyNames() const;
        void setSortPropertyNames(const QStringList &names);

        // Only include matches of a specific type.
        QString itemType() const;
        void setItemType(const QString &type);

        // Only query (recursive) within a specific container.
        // May be null.
        QString containerId() const;
        void setContainerId(const QString &id);

        // May be null.
        QGalleryFilter filter() const;
        void setFilter(const QGalleryFilter &filter);

        QGalleryItemList *items() const;
    };
    \endcode

    The advantages to this are it is easier to identify if a request is
    supported than if a filter is supported.  There are fewer properties
    per request and none obsolete or conflict with another.

    The disadvantages are?

    \section1 Possible future extensions to Document Gallery API.

    \section2 Galleries

    These may use different property definitions and support additional
    context specific requests.

    \section3 QUPnPGallery

    A gallery which connects to a UPnP media server.

    This may use the UPnP property definitions directly instead of trying to
    map to some neutral property set.

    \section3 QMediaGallery

    Similar to QDocumentGallery, but limited to media types and properties, and
    possibly including remote sources.

    \section3 QUsbGallery

    Gallery of documents on USB connected storage.

    This is an alternative to including documents on connected storage devices
    in the regular document gallery.

    This probably also be called something else, and not apply to USB only.

    \section2 Filters

    \section3 QGallerySearchFilter

    A filter for performing full text searches.

    \code
    class QGallerySearchFilter : public QGalleryFilter
    {
    public:
        // Constructors, etc.

        QString searchTerm() const;
        void setSearchTerm(const QString &term);

        QStringList searchTerms() const;
        void setSearchTerms(const QStringList &terms);
    };
    \endcode

    \section2 Requests

    \section3 QGalleryImportRequest

    Imports a document from a remote source into a gallery.  Unnecessary for
    a gallery on the local file-system, but this could enable a remote gallery
    to download a document directly.

    \code
    class QGalleryImportRequest : public QGalleryAbstractRequest
    {
    public:
        // Constructors, etc.

        // The url to import from.
        QUrl sourceUrl() const;
        void setSourceUrl(const QUrl &url);

        // The id of a container document to import the document into.
        void containerId() const;
        void setContainerId(const QString &id);

    // Results
        QGalleryItemList *item() const;

    Q_SIGNALS:
        void documentsChanged();
    };
    \endcode

    \section3 QGalleryExportRequest

    The same as an import request except the gallery would upload a document
    it hosts.

    \code
    class QGalleryExportRequest : public QGalleryAbstractRequest
    {
    public:
        // Constructors, etc.

        // The url to export to.
        QUrl destinationUrl() const;
        void setDestinationUrl(const QUrl &url);

        // The id of the document to export.
        QString documentId() const;
        void setDocumentId(const QString &id);
    };
    \endcode

    \section3 QGalleryNewDocumentRequest

    Creates a new document in a gallery.

    This could be used by a remote gallery to provide a URL for an application
    to upload a new document to.

    \code
    class QGalleryNewDocumentRequest : public QGalleryAbstractRequest
    {
    public:
        // Constructors, etc.

        QString fileName() const;
        void setFileName(const QString &fileName);

        QString mimeType() const;
        void setMimeType(const QString &mimeType);

        QString containerId() const;
        void setContainerId(const QString &id);

        // Results
        QGalleryItemList *item() const;

    Q_SIGNALS:
        void documentsChanged();
    };
    \endcode
*/

