/****************************************************************************
**
** Copyright (c) 2008-2009 Nokia Corporation and/or its subsidiary(-ies).
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Mobility Components.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** If you have questions regarding the use of this file, please
** contact Nokia at http://qt.nokia.com/contact.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example publish-subscribe
    \title Publish and Subscribe Example

    The Publish and Subscribe example shows how to use the Context Framework API to
    publish and retrieve values from the platforms Publish and Subscribe system.

    This example program can act either a provider of Value Space content, a consumer of a Value
    Space content or both.  It can also optionally act as the Value Space Manager.  The behavior
    is selected by passing a combination of three optional command line parameters when starting
    the program.  If no parameters are supplied the program defaults to acting as both a provider
    and consumer.

    \table
        \header
            \o Parameter
            \o Description
        \row
            \o -server
            \o Starts the Value Space Server.  Only one instance should be started with the this
               parameter.  This parameter is only needed if the Value Space will use a layer that
               has a client-server architecture and a server needs to be started.

        \row
            \o -provider
            \o Publish values in the Value Space and create a dialog to control those values
               directly.
        \row
            \o -consumer
            \o Create a dialog to view Value Space items.
    \endtable

    \section2 Provider

    When acting as a provider of Value Space content the program creates a ProviderDialog.  This
    dialog contains a widget for setting the base path of the QValueSpaceProvider and
    widgets for setting the value of the two fixed attributes 'intValue' and 'stringValue'.

    \image publish-subscribe-provider.png

    We declare three slots which we will use to respond to user input in the dialog.

    \snippet publish-subscribe/providerdialog.h 0

    And connect them to signals from the widgets in the constructor.

    \snippet publish-subscribe/providerdialog.cpp 1

    To publish values in the Value Space we first need to create a QValueSpaceProvider.  We do this
    in the \c {createNewObject()} slot, which is also used to handle changes in the base path.
    After the object is constructed we publish the initial values by explicitly calling the other
    two slots.

    \snippet publish-subscribe/providerdialog.cpp 2

    We use QValueSpaceProvider::setAttribute() to set the values in response to dialog input.

    \snippet publish-subscribe/providerdialog.cpp 0

    As a final step in the constructor we explicitly call the \c {createNewObject()} slot to create
    an initial QValueSpaceProvider.

    \snippet publish-subscribe/providerdialog.cpp 3

    \section2 Consumer

    When acting as a consumer of Value Space content the program creates a ConsumerDialog.  This
    dialog contains a widget for setting the base path of the QValueSpaceSubscriber and a table for
    displaying all of the values directly under base path in the Value Space.

    \image publish-subscribe-consumer.png

    We declare two slots to propagate values from the Value Space to the dialog in response to
    change notifications from QValueSpaceSubscriber.

    \snippet publish-subscribe/consumerdialog.h 0

    To read values from the Value Space we first create a QValueSpaceSubscriber and connect to the
    \c {contentsChanged()} signal.

    We explicitly call our \c {itemChanged()} slot to populate the table with the initial values.

    \snippet publish-subscribe/consumerdialog.cpp 0

    In response to the \c {contentsChanged()} signal we update all the values in the table.

    \snippet publish-subscribe/consumerdialog.cpp 1
*/
