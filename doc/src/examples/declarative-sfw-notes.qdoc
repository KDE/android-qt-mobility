/****************************************************************************
**
** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Mobility Components.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\example declarative-sfw-notes

\title Declarative Service Framework Notes Manager

This example demonstrates how to use the \l{notesmanagerplugin}{Notes Manager service plugin}
to implement a notes managing application with QML as the declarative user-interface.  There
is also a non-QML counterpart which demonstrates an identical application using standard Qt
user-interface tool.  See \l{sfw-notes}{Service Framework Notes Manager} for more details.


\bold {Explanation}

In general, QML requires external types and registrations to be provided via a plugin-based
system, which the service framework does not currently provide.  Instead, we have a wrapper
class which provides access to the QServiceManager and QServiceInterfaceDescriptor API that
needs to be included in the project and declared in the main funciton of the application.  The
wrapper is referred to as QDeclarativeService.

This example demonstrates how QML can be used to completely control the logic of the 
application, using a combination of declarative elements and Javascript in the QML file. The
main function is used to produce an application binary but once service framework supports
a QML plugin, only the QML file will be needed. Also contained is a class that registers our
Notes Manager service to supply the plugin library, which can also be done using the 
servicefw tool.

There is another service framework example that demonstrates how to use the wrapper to 
browse a list of services to select for dialing usage. See 
\l{declarative-sfw-dialer}{Declarative Service Framework Dialer} for a detailed explanation.

The secion belows explains how QML can be used to emulate to exact functionality of the
alternate Qt/C++ example.


\bold {QML File}

The very first step is to import our registered types with the following:
\snippet declarative-sfw-notes/declarative-sfw-notes.qml 0

Now to obtain the default service with a specific interface name from within QML we can
use the Service wrapper item as follows:
\snippet declarative-sfw-notes/declarative-sfw-notes.qml 6

In most cases we will need the service to be avaiable to all parts of the QML file, meaning
the actual QObject returned from the service wrapper needs to be a global property.
\snippet declarative-sfw-notes/declarative-sfw-notes.qml 1

The interfaceName property of the Service item has READ and WRITE methods which can be used
to obtain a new service instance and check if there was a valid default service.
\snippet declarative-sfw-notes/declarative-sfw-notes.qml 2

With a valid reference which points to the service plugin class we can now invoke methods 
directly from the Notes Manager plugin. The example below shows how to obtain a list of
notes and delete one from the notes manager database through QML.
\snippet declarative-sfw-notes/declarative-sfw-notes.qml 3

The Notes Manager plugin also provides readable functions which return the values of a
single note and can be utilized to display on the UI as follows:
\snippet declarative-sfw-notes/declarative-sfw-notes.qml 4
\snippet declarative-sfw-notes/declarative-sfw-notes.qml 5

*/
