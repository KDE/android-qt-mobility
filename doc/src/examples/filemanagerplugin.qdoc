/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example filemanagerplugin
    \title File Manager Plugin Example

    This example shows how to write a service plugin for the \l{Qt Service Framework}{Service Framework}.

    \section1 Registering the Service
    The service can be registered by using the function \l{QServiceManager::}{addService()} which takes a path to the XML file that describes the service, \i{filemanagerservice.xml}.

    \section1 Writing the Plug-In
    A Service plug-in is made by deriving a new plugin class from the QServicePluginInterface class then implementing the function QServicePluginInterface::createInstance().

    The FileManager plugin example has a simple \l {QServicePluginInterface::}{createInstance()}. It
    only needs to create the appropriate object based on the interface name
    and return a pointer to it.

    \snippet ../../examples/filemanagerplugin/filemanagerplugin.cpp createinstance

    The functionality of the FileManager and the FileTransfer classes are
    in the separate classes FileManagerStorage and FileManagerTransfer respectively. The existing functions are merely test stubs to demonstrate
    the concept.
    
    
*/
