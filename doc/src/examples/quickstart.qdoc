/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\example quickstart

\title Quickstart Example

The following steps outline how to make a simple
"hello world" like application that uses QtMobility.
It is assumed that QtMobility has been
successfully built and environment variables have been set
as per \l {Installation Guide}.

One can start using QtMobility with 3 simple steps.
\list 1
    \o Include the appropriate headers
    \o Use the QTM_USE_NAMESPACE macro (defined in qmobilityglobal.h but implicitly included from any QtMobility header)
    \o Declare the usage of QtMobility
       and appropriate API(s) in the project(.pro) file
\endlist

Steps 1 and 2 are shown in the example below:
\snippet quickstart/main.cpp 0

This example uses the QSystemInfo headers to print out the
system's current country code.  All the domain APIs are wrapped
within a QtMobility namespace and thus developers
need to use the QTM_USE_NAMESPACE macro.

In step 3, to specify that our project is using
System Information we declare in the project file:

\snippet quickstart/quickstart.pro 0

The project file states that the application uses QtMobility and that it requires the
System Information API. By adding \c mobility to \c CONFIG qmake finds
the \c {mobility.prf} file in \c{$QTDIR/mkspecs/features} and includes it when
processing the current project file. \c{mobility.prf} is generated when running
the QtMobility configure script and points qmake to the relevant include and prefix
paths and ensures that deployment and package dependencies are set. The \c MOBILITY variable itself is part of \c {mobility.prf} and is used to
determine the QtMobility library the current project should link to (in this example the SystemInfo library).

Each QtMobility API has its corresponding value which has to be added to \c MOBILITY. The subsequent table lists the APIs and the
corresponding values that can be assigned to \c MOBILITY.

\table
\header
    \o Domain
    \o Value
\row
    \o \l {Bearer Management}
    \o bearer
\row
    \o \l {Contacts}
    \o contacts
\row
    \o \l {Location}
    \o location
\row
    \o \l {Multimedia}
    \o multimedia
\row
    \o \l {Messaging}
    \o messaging
\row
    \o \l {Publish And Subscribe}
    \o publishsubscribe
\row
    \o \l {Qt Service Framework} {Service Framework}
    \o serviceframework
\row
    \o \l {Sensor}{Sensors}
    \o sensors
\row
    \o \l {System Information}
    \o systeminfo
\row
    \o \l {Versit}{Versit}
    \o versit
\row
    \o \l {Document Gallery}
    \o gallery
\row
    \o \l {Organizer}
    \o organizer
\row
    \o \l {Feedback}{Tactile Feedback}
    \o feedback
\endtable

In addition the Mobility version and installed modules can be checked from within qmake project files. The associated module name for such tests is the same as above:

\code
    load(mobilityconfig)
    contains(MOBILITY_VERSION, 1.1.1) {
        message(Mobility 1.1.1 detected)
    }
    contains(MOBILITY_CONFIG, contacts) {
        message(Contacts API available)
        CONFIG+=mobility
        MOBILITY+=contacts
    } else {
        message(Contacts API not available)
    }
\endcode

When developing on Symbian we will also need to add the required capabilites to the project file in order to satisfy the Symbian security model.
This can be achieved with a line such as the following:

\code
    TARGET.CAPABILITY = CAPABILITY_A CABAPILITY_B
\endcode

CAPABILITY_A and CAPABILITY_B are place holders for the appropriate Symbian capabilities. A complete list of all Symbian
capabilities and their availability to application developers can be found in the
\l {http://developer.symbian.org/wiki/index.php/Capabilities_(Symbian_Signed)}{Symbian capability documentation}.

The subsequent table provides an overview of possibily required capabilities for each QtMobility library.
Note that not all capabilities are always required when using a particular API. The exact list depends
on which parts of an API is utilized by an application.

\table
\header
    \o Domain
    \o Symbian Capabilities
\row
    \o \l {Bearer Management}
    \o ReadUserData NetworkServices (NetworkControl for QNetworkSession::stop())
\row
    \o \l {Contacts}
    \o ReadUserData WriteUserData
\row
    \o \l {Location}
    \o Location LocalServices ReadUserData WriteUserData ReadDeviceData WriteDeviceData NetworkServices
\row
    \o \l {Multimedia}
    \o UserEnvironment ReadUserData WriteUserData ReadDeviceData WriteDeviceData
\row
    \o \l {Messaging}
    \o LocalServices ReadUserData WriteUserData NetworkServices UserEnvironment ReadDeviceData WriteDeviceData
\row
    \o \l {Publish And Subscribe}
    \o Capability depends on P&S value being read/written. API itself doesn't require any capability.
\row
    \o \l {Qt Service Framework} {Service Framework}
    \o No capabilities requried by itself, the plugins may have capability requirements.
\row
    \o \l {Sensor}
    \o ReadDeviceData
\row
    \o \l {System Information}
    \o LocalServices ReadUserData WriteUserData NetworkServices UserEnvironment Location ReadDeviceData
\row
    \o \l {Versit}
    \o No additional capabilities required.
\row
    \o \l {Document Gallery}
    \o No capabilities at this stage.
\row
    \o \l {Organizer}
    \o ReadUserData WriteUserData
\row
    \o \l {Feedback}{Tactile Feedback}
    \o No capabilities at this stage.
\endtable

The complete list of all Symbian capabilities and how they can be obtained can be found in the \l {http://developer.symbian.org/wiki/index.php/Capabilities_(Symbian_Signed)#Which_capabilities_can_I_access.3F}{Symbian developer documentation}.

And we're done.  If you are using the command line simply
enter:
\code
    qmake
    make //or nmake on Windows
\endcode

to generate the executable which can then be run.

If you are developing for Symbian, to make a debug build for the emulator run:
\code
    qmake
    make debug-winscw
\endcode
This assumes that qmake is in your %PATH% and Qt has been built for the emulator already.


To make a release build and SIS package for a device run:
\code
    qmake
    make release-gcce
    make sis
\endcode

For further details on how to build applications for
Symbian see \l {http://qt.nokia.com/doc/4.6/symbian-with-qt-introduction.html}
{The Symbian Platform - Introduction to Qt} and \l {http://developer.symbian.org/wiki/index.php/Qt_Quick_Start}
{Qt Quick Start}
*/
