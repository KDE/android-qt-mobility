/*!

\page contacts.html

\title Qt Contacts Developer Resources

\tableofcontents

\section1 Introduction

Qt Contacts provides a set of APIs that allows clients to request contact data from local or remote backends,
access to which are provided by implementations of Qt Contacts manager API.  This is achieved by defining generic
personal information data abstractions which can sufficiently describe contact data stored on any platform.
Due to the cross-platform nature of the API, and the ability for developers to write platform-independent
implementations of a QContactManager which may unify one or more platform specific contact backends, it is
intended that the semantics and quirks of the underlying datastores on any platform may be entirely opaque
from the perspective of Qt-based, cross-platform client applications.

\section1 Overview 

A contact is the digital representation of a person, which is stored in a platform-specific manner.
Information pertaining to a single contact may be located across several different datastores, and each datum
(or detail) may or may not pertain to a particular context in which that information is valid.  A contact may
include semantically identical pieces of information that are relevant in different contexts.  For example, a
contact may have a phone number that is relevant to their "home" context, and another phone number that is relevant
to their "work" context.  It can be seen that the context of information defines its validity to the user, depending
on the context of usage; and as such, the sum of information in a given context can be considered equivalent to
a "contextual identity".  This allows great flexibility when consolidating data from various sources into a single,
cohesive contact.  Contacts may be placed into arbitrary collections called groups.  Each group has a name and a
unique identifier, and consists of a list of contacts.

Each datum (or detail) stored in a contact has defined semantics of usage and storage.  The Qt Contacts API allows
per-datastore contact detail definitions, allowing a manager to provide clients with this information on demand,
and allowing third-party developers to register detail definitions for use by clients.  A detail definition includes
the fields (and value-types of those fields) which make up the detail, per-contact uniqueness constraints on
details of the definition, and access constraints (such as read-only, create-only, etc).

A detail is a single, cohesive unit of information that is stored in a contact.  As explained previously, it is
valid for a particular context or set of contexts, and conforms to a particular definition.  A detail may have
specific metadata associated with it, such as its sub-type, the source of the information, and arbitrary,
user-defined metadata.

A manager provides access to zero or more platform-specific datastores.  Each datastore may support different
capabilities (for example, the ability to store certain datatypes, the ability to natively filter on different
details or details of different definitions, the provision of locking mechanisms, the provision of changelog
information, etc) which are reported by the manager on request.  The manager therefore provides access to detail
definitions, contacts, and groups stored in different datastores, in a platform and datastore independent manner.
The engine of a manager may be implemented as a plugin to allow dynamic loading of different engines at run-time.

\section1 Using the API

This section provides some examples of common usage of the API.

\section2 Filtering by detail definition and value

In this example, it is assumed that there is a detail definition which is identified by the well-known
identifier "PhoneNumber".  The client instantiates a default manager and asks for any contacts with
a particular phone number.

\code
    QString incomingCallNbr = "012345678";
    QContactManager cm; // retrieves the default manager
    QList<QUniqueId> matchingContacts = cm.contactsWithDetail("PhoneNumber", incomingCallNbr);
    if (matchingContacts.size() == 0)
        qDebug() << "Incoming call from unknown contact (" << incomingCallNbr << ")";
    else
        qDebug() << "Incoming call from" << matchingContacts.at(0).name().displayName() << "(" << incomingCallNbr << ")";
\endcode

\section2 Saving a new contact to the default store

The client creates a new contact, adds a name and a phone number, and saves it to the default store of the default manager.

\code
    QContact c;
    c.name().setFirst("John");
    c.name().setLast("Citizen");
    QContactDetail phoneNumber;
    phoneNumber.setValue("PhoneNumber", "012345678");
    c.saveDetail(&phoneNumber);

    QContactManager cm;
    if (!cm.saveContact(&c))
        qDebug() << "Error occurred when saving contact:" << cm.error();
    else
        qDebug() << "Contact" << c.name().displayName() << "saved successfully!";
\endcode

\section2 Saving a new contact to a particular manager

The client creates a new contact, and saves it to the default store of a particular manager (in this case, a vCard backend).
While the available managers may be requested from the plugin framework, here we assume that the client knows that the
particular manager is available on this platform.

Also, we assume the existence of a specialised leaf-class that allows simple access to details of the definition identified
by the "PhoneNumber" identifier.  These specialised leaf classes may be written by anyone, and simply wrap the functionality
provided by QContactDetail in order to allow simpler access to fields supported by a particular definition.

Note that vCard is a registered trademark of the Internet Mail Consortium.

\code
    QContact c;
    c.name().setFirst("John");
    c.name().setLast("Citizen");
    QContactPhoneNumber phoneNumber;
    phoneNumber.setNumber("012345678");
    c.saveDetail(&phoneNumber);

    QContactManager cm("com.nokia.mobility.contacts.vCardBackend");
    if (!cm.saveContact(&c))
        qDebug() << "Error occurred when saving contact:" << cm.error();
    else
        qDebug() << "Contact" << c.name().displayName() << "saved successfully!";
\endcode

\section2 Saving a new contact to a particular store

The client creates a new contact, and saves it to a particular store (in this case, a vCard store) of the default manager.
Note that while the available stores may be requested from the capabilities of the manager, we assume in this case that the client
knows that the store is available.

Note that vCard is a registered trademark of the Internet Mail Consortium.

\code
    QContact c;
    c.name().setFirst("John");
    c.name().setLast("Citizen");
    QContactPhoneNumber phoneNumber;
    phoneNumber.setNumber("012345678");
    c.saveDetail(&phoneNumber);

    QContactManager cm(QString(), "vCard");
    if (!cm.saveContact(&c))
        qDebug() << "Error occurred when saving contact:" << cm.error();
    else
        qDebug() << "Contact" << c.name().displayName() << "saved successfully!"
\endcode

\section2 Modifying an existing contact and saving the modifications

Here we assume that the user has selected a contact in a list widget, and clicked the "Edit" button, or something similar.
The client code would retrieve the particular contact from the list (most likely using a class derived from
QAbstractListModel), and allow the user to modify that contact.

\code
    // the client code stores the id of the contact in a user-role (called ContactIdRole) of the model.
    // we assume that the user wishes to modify the 5th (ie, index 4) contact in the model.
    QUniqueId selectedContactId = model.data(model.index(4), ContactIdRole);

    // retrieve the contact identified by the particular id from the manager.
    QContactManager cm;
    QContact selected = cm.contact(selectedContactId);

    // the user has changed the last name of the contact
    selected.name().setLast("Civilian");

    // the user also wants to change the first phone number of the contact
    QContactPhoneNumber phoneNumber = selected.detail("PhoneNumber"); // retrieves the first phone number
    phoneNumber.setNumber("087654321");

    // now we save the updated detail.  The old detail will be overwritten.
    cm.saveDetail(&phoneNumber);
\endcode

\section2 Retrieving contact details for display

The user wishes to view the details of a particular contact without modifying them.

\code
    // the client code stores the id of the contact in a user-role (called ContactIdRole) of the model.
    // we assume that the user wishes to modify the 5th (ie, index 4) contact in the model.
    QUniqueId selectedContactId = model.data(model.index(4), ContactIdRole);

    // retrieve the contact identified by the particular id from the manager.
    QContactManager cm;
    QContact selected = cm.contact(selectedContactId);

    // retrieve all of the details of the contact.
    QList<QContactDetail> allDetails = selected.details();

    // for each detail, we want to know which information to display.
    // so, we ask the manager for the definition of each detail.
    foreach (const QContactDetail& detail, allDetails) {
        // depending on the field type, we can display each of the fields differently.
        QContactDetailDefinition definition = cm.detailDefinition(detail.definitionId());
        QMap<QString, QVariant::Type> fields = definition.fields();

        // ...
    }
\endcode

\section1 Building and compiling

This library requires Qt 4.5 to be installed.

To build the library, run \tt qmake and \tt make.

\section1 Reference documentation

\section2 Main classes

\list
    \o \l{QContactManager}
    \o \l{QContactDetailDefinition}
    \o \l{QContactDetail}
    \o \l{QContact}
    \o \l{QContactGroup}
\endlist

\section2 Detail leaf classes

Several subclasses of \l{QContactDetail} are provided as part of the
Qt Mobility Contacts API.  They are general in design but are intended
to fulfil specific use-cases.  Please note that certain backends may
choose not to support one or more of these subclasses as they appear here;
they may offer their own which provide similar functionality, or they may
require clients to access contact information through the \l{QContactDetail}
base class alone.

\list
    \o \l{QContactAddress}
    \o \l{QContactAnniversary}
    \o \l{QContactAvatar}
    \o \l{QContactBirthday}
    \o \l{QContactEmailAddress}
    \o \l{QContactGender}
    \o \l{QContactGuid}
    \o \l{QContactName}
    \o \l{QContactPhoneNumber}
    \o \l{QContactSyncTarget}
    \o \l{QContactUrl}
\endlist

Each of these subclasses provide access to information stored in fields which
are listed in the \l{Qt Contacts Schema}{schema}.

\section2 Examples

\list
    \o \l{samplephonebook}{Sample Phonebook}
\endlist

*/
