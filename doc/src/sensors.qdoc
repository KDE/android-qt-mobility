/****************************************************************************
**
** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Mobility Components.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\group sensors
*/

/*!
\group sensors_backend
*/

/*!
\page sensors-api.html
\title Sensors API
\brief The Sensors API provides access to hardware sensors.
\ingroup mobility

The Sensors API provides access to hardware sensors.

This covers both high-level
sensors such as screen orientation (portrait, landscape) and low-level,
real-time sensors such as accelerometer data.

\tableofcontents

\section1 Overview

The QSensorManager class is used to get a handle to particular sensors.

The API supports sensors that poll for their data and sensors that push
data to the app as it arrives. Attempting to poll a sensor that operates
using push will read a cached value. Attempting to use push notification
on a sensor that only supports polling will result in a timer event being
used to poll the sensor and deliver the result to the app.

\section1 Client API

The client API is designed around the QSensor abstract class. This class
is instantiated in the client application and connects to a QSensorBackend
instance.

\image sensors-overview.png

Note that different sensors work in slightly different ways so there are
variety of concrete classes that should be used in place of QSensor.

You can see too that QSensor does not care where the backend it talks to
is located. Backends are most commonly found in the QtSensors library
although they may also be found in plugins or in the client app itself.

\section1 Backend API

QSensor instances talk to a backend object. Backends are usually supplied
with the QtSensors library for a specific device. A backend may talk
directly to hardware or it may talk to a system service. In some instances
it may even be useful to have a sensor backend that talks to another backend.
An example of this would be a rotation sensor class for devices that lack
a rotation sensor but have a linear acceleration sensor. The rotation sensor
backend would use the data from the linear acceleration backend to get
approximate rotation values.

\image sensors-backend.png

\section1 Main Classes
If you want to use the sensors on a device, these are the classes to use.
\annotatedlist sensors

\section1 Backend Classes
If you are making sensors available through the Sensors API, these are the
classes to use.
\annotatedlist sensors_backend

*/

