<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QLandmarkAttributeFilter</name>
        <filename>qlandmarkattributefilter.html</filename>
        <base>QLandmarkFilter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkAttributeFilter</name>
            <anchorfile>qlandmarkattributefilter.html</anchorfile>
            <anchor>QLandmarkAttributeFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkAttributeFilter</name>
            <anchorfile>qlandmarkattributefilter.html</anchorfile>
            <anchor>QLandmarkAttributeFilter-2</anchor>
            <arglist>(const QLandmarkFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QLandmarkAttributeFilter</name>
            <anchorfile>qlandmarkattributefilter.html</anchorfile>
            <anchor>dtor.QLandmarkAttributeFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>attribute</name>
            <anchorfile>qlandmarkattributefilter.html</anchorfile>
            <anchor>attribute</anchor>
            <arglist>(const QString &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttribute</name>
            <anchorfile>qlandmarkattributefilter.html</anchorfile>
            <anchor>setAttribute</anchor>
            <arglist>(const QString &amp; key, const QVariant &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAttribute</name>
            <anchorfile>qlandmarkattributefilter.html</anchorfile>
            <anchor>removeAttribute</anchor>
            <arglist>(const QString &amp; key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearAttributes</name>
            <anchorfile>qlandmarkattributefilter.html</anchorfile>
            <anchor>clearAttributes</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>attributeKeys</name>
            <anchorfile>qlandmarkattributefilter.html</anchorfile>
            <anchor>attributeKeys</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkSession</name>
        <filename>qnetworksession.html</filename>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Invalid">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotAvailable">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Connecting">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Connected">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Closing">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Disconnected">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Roaming">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SessionError</name>
            <anchor>SessionError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownSessionError">
            <anchor>SessionError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SessionAbortedError">
            <anchor>SessionError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RoamingError">
            <anchor>SessionError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OperationNotSupportedError">
            <anchor>SessionError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidConfigurationError">
            <anchor>SessionError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkSession</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>QNetworkSession</anchor>
            <arglist>(const QNetworkConfiguration &amp; connectionConfig, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QNetworkSession</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>dtor.QNetworkSession</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isOpen</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>isOpen</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration</type>
            <name>configuration</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>configuration</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkInterface</type>
            <name>interface</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>interface</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>State</type>
            <name>state</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SessionError</type>
            <name>error</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>sessionProperty</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>sessionProperty</anchor>
            <arglist>(const QString &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSessionProperty</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>setSessionProperty</anchor>
            <arglist>(const QString &amp; key, const QVariant &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>bytesWritten</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>bytesWritten</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>bytesReceived</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>bytesReceived</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>activeTime</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>activeTime</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForOpened</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>waitForOpened</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>open</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>open</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>close</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>close</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>migrate</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>migrate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignore</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>ignore</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>accept</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>accept</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reject</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>reject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QNetworkSession::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>opened</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>opened</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>closed</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>closed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>error-2</anchor>
            <arglist>(QNetworkSession::SessionError error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>preferredConfigurationChanged</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>preferredConfigurationChanged</anchor>
            <arglist>(const QNetworkConfiguration &amp; config, bool isSeamless)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>newConfigurationActivated</name>
            <anchorfile>qnetworksession.html</anchorfile>
            <anchor>newConfigurationActivated</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaStreamsControl</name>
        <filename>qmediastreamscontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="enum">
            <name>StreamType</name>
            <anchor>StreamType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownStream">
            <anchor>StreamType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VideoStream">
            <anchor>StreamType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AudioStream">
            <anchor>StreamType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SubPictureStream">
            <anchor>StreamType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DataStream">
            <anchor>StreamType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMediaStreamsControl</name>
            <anchorfile>qmediastreamscontrol.html</anchorfile>
            <anchor>dtor.QMediaStreamsControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>streamCount</name>
            <anchorfile>qmediastreamscontrol.html</anchorfile>
            <anchor>streamCount</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual StreamType</type>
            <name>streamType</name>
            <anchorfile>qmediastreamscontrol.html</anchorfile>
            <anchor>streamType</anchor>
            <arglist>(int stream) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVariant</type>
            <name>metaData</name>
            <anchorfile>qmediastreamscontrol.html</anchorfile>
            <anchor>metaData</anchor>
            <arglist>(int stream, QtMultimediaKit::MetaData key) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isActive</name>
            <anchorfile>qmediastreamscontrol.html</anchorfile>
            <anchor>isActive</anchor>
            <arglist>(int stream) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setActive</name>
            <anchorfile>qmediastreamscontrol.html</anchorfile>
            <anchor>setActive</anchor>
            <arglist>(int stream, bool state) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>streamsChanged</name>
            <anchorfile>qmediastreamscontrol.html</anchorfile>
            <anchor>streamsChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeStreamsChanged</name>
            <anchorfile>qmediastreamscontrol.html</anchorfile>
            <anchor>activeStreamsChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QMediaStreamsControl</name>
            <anchorfile>qmediastreamscontrol.html</anchorfile>
            <anchor>QMediaStreamsControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVersitResourceHandler</name>
        <filename>qversitresourcehandler.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QVersitResourceHandler</name>
            <anchorfile>qversitresourcehandler.html</anchorfile>
            <anchor>dtor.QVersitResourceHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>loadResource</name>
            <anchorfile>qversitresourcehandler.html</anchorfile>
            <anchor>loadResource</anchor>
            <arglist>(const QString &amp; location, QByteArray * contents, QString * mimeType) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>saveResource</name>
            <anchorfile>qversitresourcehandler.html</anchorfile>
            <anchor>saveResource</anchor>
            <arglist>(const QByteArray &amp; contents, const QVersitProperty &amp; property, QString * location) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVersitDefaultResourceHandler</name>
        <filename>qversitdefaultresourcehandler.html</filename>
        <base>QVersitResourceHandler</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersitDefaultResourceHandler</name>
            <anchorfile>qversitdefaultresourcehandler.html</anchorfile>
            <anchor>QVersitDefaultResourceHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QVersitDefaultResourceHandler</name>
            <anchorfile>qversitdefaultresourcehandler.html</anchorfile>
            <anchor>dtor.QVersitDefaultResourceHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>loadResource</name>
            <anchorfile>qversitdefaultresourcehandler.html</anchorfile>
            <anchor>loadResource</anchor>
            <arglist>(const QString &amp; location, QByteArray * contents, QString * mimeType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>saveResource</name>
            <anchorfile>qversitdefaultresourcehandler.html</anchorfile>
            <anchor>saveResource</anchor>
            <arglist>(const QByteArray &amp; contents, const QVersitProperty &amp; property, QString * location)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItem</name>
        <filename>qorganizeritem.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItem</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>QOrganizerItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOrganizerItem</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>dtor.QOrganizerItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItem</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>QOrganizerItem-2</anchor>
            <arglist>(const QOrganizerItem &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItem &amp;</type>
            <name>operator=</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QOrganizerItem &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QOrganizerItem &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QOrganizerItem &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemId</type>
            <name>id</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setId</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>setId</anchor>
            <arglist>(const QOrganizerItemId &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemLocalId</type>
            <name>localId</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>localId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearDetails</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>clearDetails</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemDetail</type>
            <name>detail</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>detail</anchor>
            <arglist>(const QString &amp; definitionName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItemDetail&gt;</type>
            <name>details</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>details</anchor>
            <arglist>(const QString &amp; definitionName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItemDetail&gt;</type>
            <name>details</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>details-2</anchor>
            <arglist>(const QString &amp; definitionName, const QString &amp; fieldName, const QString &amp; value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemDetail</type>
            <name>detail</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>detail-3</anchor>
            <arglist>(const QLatin1Constant &amp; definitionName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItemDetail&gt;</type>
            <name>details</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>details-5</anchor>
            <arglist>(const QLatin1Constant &amp; definitionName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItemDetail&gt;</type>
            <name>details</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>details-6</anchor>
            <arglist>(const QLatin1Constant &amp; definitionName, const QLatin1Constant &amp; fieldName, const QString &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>details</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>details-7</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>details</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>details-8</anchor>
            <arglist>(const QString &amp; fieldName, const QString &amp; value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>detail</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>detail-4</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>saveDetail</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>saveDetail</anchor>
            <arglist>(QOrganizerItemDetail * detail)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeDetail</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>removeDetail</anchor>
            <arglist>(QOrganizerItemDetail * detail)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>type</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>setType</anchor>
            <arglist>(const QString &amp; type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>setType-2</anchor>
            <arglist>(const QOrganizerItemType &amp; type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>displayLabel</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>displayLabel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDisplayLabel</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>setDisplayLabel</anchor>
            <arglist>(const QString &amp; label)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDisplayLabel</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>setDisplayLabel-2</anchor>
            <arglist>(const QOrganizerItemDisplayLabel &amp; label)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>description</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>description</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDescription</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>setDescription</anchor>
            <arglist>(const QString &amp; description)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDescription</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>setDescription-2</anchor>
            <arglist>(const QOrganizerItemDescription &amp; description)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>comments</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>comments</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearComments</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>clearComments</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addComment</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>addComment</anchor>
            <arglist>(const QString &amp; comment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>guid</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>guid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGuid</name>
            <anchorfile>qorganizeritem.html</anchorfile>
            <anchor>setGuid</anchor>
            <arglist>(const QString &amp; guid)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkRemoveRequest</name>
        <filename>qlandmarkremoverequest.html</filename>
        <base>QLandmarkAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkRemoveRequest</name>
            <anchorfile>qlandmarkremoverequest.html</anchorfile>
            <anchor>QLandmarkRemoveRequest</anchor>
            <arglist>(QLandmarkManager * manager, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLandmarkRemoveRequest</name>
            <anchorfile>qlandmarkremoverequest.html</anchorfile>
            <anchor>dtor.QLandmarkRemoveRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkId&gt;</type>
            <name>landmarkIds</name>
            <anchorfile>qlandmarkremoverequest.html</anchorfile>
            <anchor>landmarkIds</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLandmarkIds</name>
            <anchorfile>qlandmarkremoverequest.html</anchorfile>
            <anchor>setLandmarkIds</anchor>
            <arglist>(const QList&lt;QLandmarkId&gt; &amp; landmarkIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLandmarkId</name>
            <anchorfile>qlandmarkremoverequest.html</anchorfile>
            <anchor>setLandmarkId</anchor>
            <arglist>(const QLandmarkId &amp; landmarkId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;int, QLandmarkManager::Error&gt;</type>
            <name>errorMap</name>
            <anchorfile>qlandmarkremoverequest.html</anchorfile>
            <anchor>errorMap</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaPlaylistReader</name>
        <filename>qmediaplaylistreader.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMediaPlaylistReader</name>
            <anchorfile>qmediaplaylistreader.html</anchorfile>
            <anchor>dtor.QMediaPlaylistReader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>atEnd</name>
            <anchorfile>qmediaplaylistreader.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QMediaContent</type>
            <name>readItem</name>
            <anchorfile>qmediaplaylistreader.html</anchorfile>
            <anchor>readItem</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qmediaplaylistreader.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaPlaylistWriter</name>
        <filename>qmediaplaylistwriter.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMediaPlaylistWriter</name>
            <anchorfile>qmediaplaylistwriter.html</anchorfile>
            <anchor>dtor.QMediaPlaylistWriter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>writeItem</name>
            <anchorfile>qmediaplaylistwriter.html</anchorfile>
            <anchor>writeItem</anchor>
            <arglist>(const QMediaContent &amp; media) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qmediaplaylistwriter.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaPlaylistIOPlugin</name>
        <filename>qmediaplaylistioplugin.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaPlaylistIOPlugin</name>
            <anchorfile>qmediaplaylistioplugin.html</anchorfile>
            <anchor>QMediaPlaylistIOPlugin</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMediaPlaylistIOPlugin</name>
            <anchorfile>qmediaplaylistioplugin.html</anchorfile>
            <anchor>dtor.QMediaPlaylistIOPlugin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>canRead</name>
            <anchorfile>qmediaplaylistioplugin.html</anchorfile>
            <anchor>canRead</anchor>
            <arglist>(QIODevice * device, const QByteArray &amp; format) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>canRead</name>
            <anchorfile>qmediaplaylistioplugin.html</anchorfile>
            <anchor>canRead-2</anchor>
            <arglist>(const QUrl &amp; location, const QByteArray &amp; format) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>canWrite</name>
            <anchorfile>qmediaplaylistioplugin.html</anchorfile>
            <anchor>canWrite</anchor>
            <arglist>(QIODevice * device, const QByteArray &amp; format) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QStringList</type>
            <name>keys</name>
            <anchorfile>qmediaplaylistioplugin.html</anchorfile>
            <anchor>keys</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QMediaPlaylistReader *</type>
            <name>createReader</name>
            <anchorfile>qmediaplaylistioplugin.html</anchorfile>
            <anchor>createReader</anchor>
            <arglist>(QIODevice * device, const QByteArray &amp; format) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QMediaPlaylistReader *</type>
            <name>createReader</name>
            <anchorfile>qmediaplaylistioplugin.html</anchorfile>
            <anchor>createReader-2</anchor>
            <arglist>(const QUrl &amp; location, const QByteArray &amp; format) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QMediaPlaylistWriter *</type>
            <name>createWriter</name>
            <anchorfile>qmediaplaylistioplugin.html</anchorfile>
            <anchor>createWriter</anchor>
            <arglist>(QIODevice * device, const QByteArray &amp; format) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoRoutingManagerEngine</name>
        <filename>qgeoroutingmanagerengine.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRoutingManagerEngine</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>QGeoRoutingManagerEngine</anchor>
            <arglist>(const QMap&lt;QString, QString&gt; &amp; parameters, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeoRoutingManagerEngine</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>dtor.QGeoRoutingManagerEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerName</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;QString, QString&gt;</type>
            <name>managerParameters</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>managerParameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>managerVersion</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>managerVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QGeoRouteReply *</type>
            <name>calculateRoute</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>calculateRoute</anchor>
            <arglist>(const QGeoRouteRequest &amp; request) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QGeoRouteReply *</type>
            <name>updateRoute</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>updateRoute</anchor>
            <arglist>(const QGeoRoute &amp; route, const QGeoCoordinate &amp; position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsRouteUpdates</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>supportsRouteUpdates</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsAlternativeRoutes</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>supportsAlternativeRoutes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsExcludeAreas</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>supportsExcludeAreas</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::TravelModes</type>
            <name>supportedTravelModes</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>supportedTravelModes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::AvoidFeatureTypes</type>
            <name>supportedAvoidFeatureTypes</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>supportedAvoidFeatureTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::RouteOptimizations</type>
            <name>supportedRouteOptimizations</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>supportedRouteOptimizations</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::SegmentDetails</type>
            <name>supportedSegmentDetails</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>supportedSegmentDetails</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::InstructionDetails</type>
            <name>supportedInstructionDetails</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>supportedInstructionDetails</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>(QGeoRouteReply * reply)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>error</anchor>
            <arglist>(QGeoRouteReply * reply, QGeoRouteReply::Error error, QString errorString)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSupportsRouteUpdates</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>setSupportsRouteUpdates</anchor>
            <arglist>(bool supported)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSupportsAlternativeRoutes</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>setSupportsAlternativeRoutes</anchor>
            <arglist>(bool supported)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSupportsExcludeAreas</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>setSupportsExcludeAreas</anchor>
            <arglist>(bool supported)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSupportedTravelModes</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>setSupportedTravelModes</anchor>
            <arglist>(QFlags&lt;QGeoRouteRequest::TravelMode&gt; travelModes)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSupportedAvoidFeatureTypes</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>setSupportedAvoidFeatureTypes</anchor>
            <arglist>(QFlags&lt;QGeoRouteRequest::AvoidFeatureType&gt; avoidFeatureTypes)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSupportedRouteOptimizations</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>setSupportedRouteOptimizations</anchor>
            <arglist>(QFlags&lt;QGeoRouteRequest::RouteOptimization&gt; optimizations)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSupportedSegmentDetails</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>setSupportedSegmentDetails</anchor>
            <arglist>(QFlags&lt;QGeoRouteRequest::SegmentDetail&gt; segmentDetails)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSupportedInstructionDetails</name>
            <anchorfile>qgeoroutingmanagerengine.html</anchorfile>
            <anchor>setSupportedInstructionDetails</anchor>
            <arglist>(QFlags&lt;QGeoRouteRequest::InstructionDetail&gt; instructionDetails)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAudioDeviceInfo</name>
        <filename>qaudiodeviceinfo.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAudioDeviceInfo</name>
            <anchorfile>qaudiodeviceinfo.html</anchorfile>
            <anchor>QAudioDeviceInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAudioDeviceInfo</name>
            <anchorfile>qaudiodeviceinfo.html</anchorfile>
            <anchor>QAudioDeviceInfo-2</anchor>
            <arglist>(const QAudioDeviceInfo &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAudioDeviceInfo</name>
            <anchorfile>qaudiodeviceinfo.html</anchorfile>
            <anchor>dtor.QAudioDeviceInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAudioDeviceInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qaudiodeviceinfo.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QAudioDeviceInfo &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qaudiodeviceinfo.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>deviceName</name>
            <anchorfile>qaudiodeviceinfo.html</anchorfile>
            <anchor>deviceName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFormatSupported</name>
            <anchorfile>qaudiodeviceinfo.html</anchorfile>
            <anchor>isFormatSupported</anchor>
            <arglist>(const QAudioFormat &amp; settings) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAudioFormat</type>
            <name>preferredFormat</name>
            <anchorfile>qaudiodeviceinfo.html</anchorfile>
            <anchor>preferredFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAudioFormat</type>
            <name>nearestFormat</name>
            <anchorfile>qaudiodeviceinfo.html</anchorfile>
            <anchor>nearestFormat</anchor>
            <arglist>(const QAudioFormat &amp; settings) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>supportedCodecs</name>
            <anchorfile>qaudiodeviceinfo.html</anchorfile>
            <anchor>supportedCodecs</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;int&gt;</type>
            <name>supportedFrequencies</name>
            <anchorfile>qaudiodeviceinfo-obsolete.html</anchorfile>
            <anchor>supportedFrequencies</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;int&gt;</type>
            <name>supportedSampleRates</name>
            <anchorfile>qaudiodeviceinfo.html</anchorfile>
            <anchor>supportedSampleRates</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;int&gt;</type>
            <name>supportedChannels</name>
            <anchorfile>qaudiodeviceinfo-obsolete.html</anchorfile>
            <anchor>supportedChannels</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;int&gt;</type>
            <name>supportedChannelCounts</name>
            <anchorfile>qaudiodeviceinfo.html</anchorfile>
            <anchor>supportedChannelCounts</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;int&gt;</type>
            <name>supportedSampleSizes</name>
            <anchorfile>qaudiodeviceinfo.html</anchorfile>
            <anchor>supportedSampleSizes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAudioFormat::Endian&gt;</type>
            <name>supportedByteOrders</name>
            <anchorfile>qaudiodeviceinfo.html</anchorfile>
            <anchor>supportedByteOrders</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAudioFormat::SampleType&gt;</type>
            <name>supportedSampleTypes</name>
            <anchorfile>qaudiodeviceinfo.html</anchorfile>
            <anchor>supportedSampleTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QAudioDeviceInfo</type>
            <name>defaultInputDevice</name>
            <anchorfile>qaudiodeviceinfo.html</anchorfile>
            <anchor>defaultInputDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QAudioDeviceInfo</type>
            <name>defaultOutputDevice</name>
            <anchorfile>qaudiodeviceinfo.html</anchorfile>
            <anchor>defaultOutputDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QAudioDeviceInfo&gt;</type>
            <name>availableDevices</name>
            <anchorfile>qaudiodeviceinfo.html</anchorfile>
            <anchor>availableDevices</anchor>
            <arglist>(QAudio::Mode mode)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaPlayer</name>
        <filename>qmediaplayer.html</filename>
        <base>QMediaObject</base>
        <member kind="property" type="QMediaContent">
            <name>media</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>media-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QMediaPlaylist *">
            <name>playlist</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>playlist-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qint64">
            <name>duration</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qint64">
            <name>position</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>volume</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>volume-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>muted</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>muted-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>bufferStatus</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>bufferStatus-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>audioAvailable</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>audioAvailable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>videoAvailable</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>videoAvailable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>seekable</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>seekable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>playbackRate</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>playbackRate-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="State">
            <name>state</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="MediaStatus">
            <name>mediaStatus</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>mediaStatus-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>error</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>error-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StoppedState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PlayingState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PausedState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>MediaStatus</name>
            <anchor>MediaStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownMediaStatus">
            <anchor>MediaStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoMedia">
            <anchor>MediaStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LoadingMedia">
            <anchor>MediaStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LoadedMedia">
            <anchor>MediaStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StalledMedia">
            <anchor>MediaStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BufferingMedia">
            <anchor>MediaStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BufferedMedia">
            <anchor>MediaStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EndOfMedia">
            <anchor>MediaStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidMedia">
            <anchor>MediaStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Flag</name>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LowLatency">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StreamPlayback">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QMediaPlayer::Flag">
            <name>Flags</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>Flags-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ResourceError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FormatError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NetworkError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AccessDeniedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ServiceMissingError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaPlayer</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>QMediaPlayer</anchor>
            <arglist>(QObject * parent, QFlags&lt;QMediaPlayer::Flag&gt; flags, QMediaServiceProvider * provider)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMediaPlayer</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>dtor.QMediaPlayer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QtMultimediaKit::SupportEstimate</type>
            <name>hasSupport</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>hasSupport</anchor>
            <arglist>(const QString &amp; mimeType, const QStringList &amp; codecs, QFlags&lt;QMediaPlayer::Flag&gt; flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>supportedMimeTypes</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>supportedMimeTypes</anchor>
            <arglist>(QFlags&lt;QMediaPlayer::Flag&gt; flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVideoOutput</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>setVideoOutput</anchor>
            <arglist>(QVideoWidget * output)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVideoOutput</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>setVideoOutput-2</anchor>
            <arglist>(QGraphicsVideoItem * output)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaContent</type>
            <name>media</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>media-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QIODevice *</type>
            <name>mediaStream</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>mediaStream</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaPlaylist *</type>
            <name>playlist</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>playlist-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>State</type>
            <name>state</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>MediaStatus</type>
            <name>mediaStatus</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>mediaStatus-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>duration</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>position</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>volume</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>volume-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMuted</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>muted-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAudioAvailable</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>audioAvailable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isVideoAvailable</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>videoAvailable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bufferStatus</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>bufferStatus-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSeekable</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>seekable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>playbackRate</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>playbackRate-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>error-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>play</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>play</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pause</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>pause</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>position-prop</anchor>
            <arglist>(qint64 position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVolume</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>volume-prop</anchor>
            <arglist>(int volume)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMuted</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>muted-prop</anchor>
            <arglist>(bool muted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlaybackRate</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>playbackRate-prop</anchor>
            <arglist>(qreal rate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMedia</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>media-prop</anchor>
            <arglist>(const QMediaContent &amp; media, QIODevice * stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlaylist</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>playlist-prop</anchor>
            <arglist>(QMediaPlaylist * playlist)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mediaChanged</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>mediaChanged</anchor>
            <arglist>(const QMediaContent &amp; media)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QMediaPlayer::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mediaStatusChanged</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>mediaStatusChanged</anchor>
            <arglist>(QMediaPlayer::MediaStatus status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>durationChanged</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>durationChanged</anchor>
            <arglist>(qint64 duration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionChanged</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>positionChanged</anchor>
            <arglist>(qint64 position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>volumeChanged</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>volumeChanged</anchor>
            <arglist>(int volume)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mutedChanged</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>mutedChanged</anchor>
            <arglist>(bool muted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>audioAvailableChanged</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>audioAvailableChanged</anchor>
            <arglist>(bool available)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>videoAvailableChanged</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>videoAvailableChanged</anchor>
            <arglist>(bool videoAvailable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bufferStatusChanged</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>bufferStatusChanged</anchor>
            <arglist>(int percentFilled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>seekableChanged</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>seekableChanged</anchor>
            <arglist>(bool seekable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>playbackRateChanged</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>playbackRateChanged</anchor>
            <arglist>(qreal rate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qmediaplayer.html</anchorfile>
            <anchor>error-2</anchor>
            <arglist>(QMediaPlayer::Error error)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoAreaMonitor</name>
        <filename>qgeoareamonitor.html</filename>
        <member kind="property" type="QGeoCoordinate">
            <name>center</name>
            <anchorfile>qgeoareamonitor.html</anchorfile>
            <anchor>center-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>radius</name>
            <anchorfile>qgeoareamonitor.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoAreaMonitor</name>
            <anchorfile>qgeoareamonitor.html</anchorfile>
            <anchor>QGeoAreaMonitor</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual </type>
            <name>~QGeoAreaMonitor</name>
            <anchorfile>qgeoareamonitor.html</anchorfile>
            <anchor>dtor.QGeoAreaMonitor</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setCenter</name>
            <anchorfile>qgeoareamonitor.html</anchorfile>
            <anchor>center-prop</anchor>
            <arglist>(const QGeoCoordinate &amp; coordinate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>center</name>
            <anchorfile>qgeoareamonitor.html</anchorfile>
            <anchor>center-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setRadius</name>
            <anchorfile>qgeoareamonitor.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>(qreal radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>radius</name>
            <anchorfile>qgeoareamonitor.html</anchorfile>
            <anchor>radius-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QGeoAreaMonitor *</type>
            <name>createDefaultMonitor</name>
            <anchorfile>qgeoareamonitor.html</anchorfile>
            <anchor>createDefaultMonitor</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>areaEntered</name>
            <anchorfile>qgeoareamonitor.html</anchorfile>
            <anchor>areaEntered</anchor>
            <arglist>(const QGeoPositionInfo &amp; update)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>areaExited</name>
            <anchorfile>qgeoareamonitor.html</anchorfile>
            <anchor>areaExited</anchor>
            <arglist>(const QGeoPositionInfo &amp; update)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmark</name>
        <filename>qlandmark.html</filename>
        <base>QGeoPlace</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmark</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>QLandmark</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmark</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>QLandmark-2</anchor>
            <arglist>(const QGeoPlace &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmark</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>QLandmark-3</anchor>
            <arglist>(const QLandmark &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLandmark</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>dtor.QLandmark</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmark &amp;</type>
            <name>operator=</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QLandmark &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QLandmark &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QLandmark &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkCategoryId&gt;</type>
            <name>categoryIds</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>categoryIds</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCategoryIds</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>setCategoryIds</anchor>
            <arglist>(const QList&lt;QLandmarkCategoryId&gt; &amp; categoryIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addCategoryId</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>addCategoryId</anchor>
            <arglist>(const QLandmarkCategoryId &amp; categoryId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeCategoryId</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>removeCategoryId</anchor>
            <arglist>(const QLandmarkCategoryId &amp; categoryId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>description</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>description</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDescription</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>setDescription</anchor>
            <arglist>(const QString &amp; description)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>iconUrl</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>iconUrl</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIconUrl</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>setIconUrl</anchor>
            <arglist>(const QUrl &amp; url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>radius</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>radius</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>setRadius</anchor>
            <arglist>(double radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>attribute</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>attribute</anchor>
            <arglist>(const QString &amp; key, const QVariant &amp; defaultValue) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttribute</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>setAttribute</anchor>
            <arglist>(const QString &amp; key, const QVariant &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>attributeKeys</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>attributeKeys</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>phone</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>phone</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPhone</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>setPhone</anchor>
            <arglist>(const QString &amp; phone)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>url</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>url</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUrl</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>setUrl</anchor>
            <arglist>(const QUrl &amp; url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkId</type>
            <name>landmarkId</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>landmarkId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLandmarkId</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>setLandmarkId</anchor>
            <arglist>(const QLandmarkId &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qlandmark.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>QtMultimediaKit</name>
        <filename>qtmultimediakit.html</filename>
        <member kind="enum">
            <name>MetaData</name>
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Title">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SubTitle">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Author">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Comment">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Description">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Category">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Genre">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Year">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Date">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserRating">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Keywords">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Language">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Publisher">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Copyright">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ParentalRating">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RatingOrganisation">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Size">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MediaType">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Duration">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AudioBitRate">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AudioCodec">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AverageLevel">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ChannelCount">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PeakValue">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SampleRate">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlbumTitle">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlbumArtist">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContributingArtist">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Composer">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Conductor">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Lyrics">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mood">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TrackNumber">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TrackCount">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CoverArtUrlSmall">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CoverArtUrlLarge">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Resolution">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PixelAspectRatio">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VideoFrameRate">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VideoBitRate">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VideoCodec">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PosterUrl">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ChapterNumber">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Director">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeadPerformer">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Writer">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CameraManufacturer">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CameraModel">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Event">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Subject">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Orientation">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExposureTime">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FNumber">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExposureProgram">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ISOSpeedRatings">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExposureBiasValue">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DateTimeOriginal">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DateTimeDigitized">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SubjectDistance">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MeteringMode">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LightSource">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Flash">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FocalLength">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExposureMode">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhiteBalance">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DigitalZoomRatio">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FocalLengthIn35mmFilm">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SceneCaptureType">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GainControl">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Contrast">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Saturation">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sharpness">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeviceSettingDescription">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PosterImage">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CoverArtImage">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThumbnailImage">
            <anchor>MetaData-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SupportEstimate</name>
            <anchor>SupportEstimate-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotSupported">
            <anchor>SupportEstimate-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MaybeSupported">
            <anchor>SupportEstimate-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProbablySupported">
            <anchor>SupportEstimate-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreferredService">
            <anchor>SupportEstimate-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>EncodingQuality</name>
            <anchor>EncodingQuality-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VeryLowQuality">
            <anchor>EncodingQuality-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LowQuality">
            <anchor>EncodingQuality-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NormalQuality">
            <anchor>EncodingQuality-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HighQuality">
            <anchor>EncodingQuality-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VeryHighQuality">
            <anchor>EncodingQuality-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>EncodingMode</name>
            <anchor>EncodingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConstantQualityEncoding">
            <anchor>EncodingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConstantBitRateEncoding">
            <anchor>EncodingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AverageBitRateEncoding">
            <anchor>EncodingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TwoPassEncoding">
            <anchor>EncodingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>AvailabilityError</name>
            <anchor>AvailabilityError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>AvailabilityError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ServiceMissingError">
            <anchor>AvailabilityError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BusyError">
            <anchor>AvailabilityError-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ResourceError">
            <anchor>AvailabilityError-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRemoteServiceControl</name>
        <filename>qremoteservicecontrol.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRemoteServiceControl</name>
            <anchorfile>qremoteservicecontrol.html</anchorfile>
            <anchor>QRemoteServiceControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRemoteServiceControl</name>
            <anchorfile>qremoteservicecontrol.html</anchorfile>
            <anchor>dtor.QRemoteServiceControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>publishServices</name>
            <anchorfile>qremoteservicecontrol.html</anchorfile>
            <anchor>publishServices</anchor>
            <arglist>(const QString &amp; ident)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaControl</name>
        <filename>qmediacontrol.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMediaControl</name>
            <anchorfile>qmediacontrol.html</anchorfile>
            <anchor>dtor.QMediaControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QMediaControl</name>
            <anchorfile>qmediacontrol.html</anchorfile>
            <anchor>QMediaControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkManagerEngineFactory</name>
        <filename>qlandmarkmanagerenginefactory.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;int&gt;</type>
            <name>supportedImplementationVersions</name>
            <anchorfile>qlandmarkmanagerenginefactory.html</anchorfile>
            <anchor>supportedImplementationVersions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QLandmarkManagerEngineFactory</name>
            <anchorfile>qlandmarkmanagerenginefactory.html</anchorfile>
            <anchor>dtor.QLandmarkManagerEngineFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QLandmarkManagerEngine *</type>
            <name>engine</name>
            <anchorfile>qlandmarkmanagerenginefactory.html</anchorfile>
            <anchor>engine</anchor>
            <arglist>(const QMap&lt;QString, QString&gt; &amp; parameters, QLandmarkManager::Error * error, QString * errorString) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>managerName</name>
            <anchorfile>qlandmarkmanagerenginefactory.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkSaveRequest</name>
        <filename>qlandmarksaverequest.html</filename>
        <base>QLandmarkAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkSaveRequest</name>
            <anchorfile>qlandmarksaverequest.html</anchorfile>
            <anchor>QLandmarkSaveRequest</anchor>
            <arglist>(QLandmarkManager * manager, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLandmarkSaveRequest</name>
            <anchorfile>qlandmarksaverequest.html</anchorfile>
            <anchor>dtor.QLandmarkSaveRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmark&gt;</type>
            <name>landmarks</name>
            <anchorfile>qlandmarksaverequest.html</anchorfile>
            <anchor>landmarks</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLandmarks</name>
            <anchorfile>qlandmarksaverequest.html</anchorfile>
            <anchor>setLandmarks</anchor>
            <arglist>(const QList&lt;QLandmark&gt; &amp; landmarks)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLandmark</name>
            <anchorfile>qlandmarksaverequest.html</anchorfile>
            <anchor>setLandmark</anchor>
            <arglist>(const QLandmark &amp; landmark)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;int, QLandmarkManager::Error&gt;</type>
            <name>errorMap</name>
            <anchorfile>qlandmarksaverequest.html</anchorfile>
            <anchor>errorMap</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactInvalidFilter</name>
        <filename>qcontactinvalidfilter.html</filename>
        <base>QContactFilter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactInvalidFilter</name>
            <anchorfile>qcontactinvalidfilter.html</anchorfile>
            <anchor>QContactInvalidFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactInvalidFilter</name>
            <anchorfile>qcontactinvalidfilter.html</anchorfile>
            <anchor>QContactInvalidFilter-2</anchor>
            <arglist>(const QContactFilter &amp; other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QServicePluginInterface</name>
        <filename>qserviceplugininterface.html</filename>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QObject *</type>
            <name>createInstance</name>
            <anchorfile>qserviceplugininterface.html</anchorfile>
            <anchor>createInstance</anchor>
            <arglist>(const QServiceInterfaceDescriptor &amp; descriptor, QServiceContext * context, QAbstractSecuritySession * securitySession) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>installService</name>
            <anchorfile>qserviceplugininterface.html</anchorfile>
            <anchor>installService</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>uninstallService</name>
            <anchorfile>qserviceplugininterface.html</anchorfile>
            <anchor>uninstallService</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactIntersectionFilter</name>
        <filename>qcontactintersectionfilter.html</filename>
        <base>QContactFilter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactIntersectionFilter</name>
            <anchorfile>qcontactintersectionfilter.html</anchorfile>
            <anchor>QContactIntersectionFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactIntersectionFilter</name>
            <anchorfile>qcontactintersectionfilter.html</anchorfile>
            <anchor>QContactIntersectionFilter-2</anchor>
            <arglist>(const QContactFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilters</name>
            <anchorfile>qcontactintersectionfilter.html</anchorfile>
            <anchor>setFilters</anchor>
            <arglist>(const QList&lt;QContactFilter&gt; &amp; filters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepend</name>
            <anchorfile>qcontactintersectionfilter.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(const QContactFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qcontactintersectionfilter.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const QContactFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qcontactintersectionfilter.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QContactFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactIntersectionFilter &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qcontactintersectionfilter.html</anchorfile>
            <anchor>operator&lt;&lt;</anchor>
            <arglist>(const QContactFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactFilter&gt;</type>
            <name>filters</name>
            <anchorfile>qcontactintersectionfilter.html</anchorfile>
            <anchor>filters</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaPlaylistNavigator</name>
        <filename>qmediaplaylistnavigator.html</filename>
        <member kind="property" type="QMediaPlaylist::PlaybackMode">
            <name>playbackMode</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>playbackMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>currentIndex</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QMediaContent">
            <name>currentItem</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>currentItem-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaPlaylistNavigator</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>QMediaPlaylistNavigator</anchor>
            <arglist>(QMediaPlaylistProvider * playlist, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMediaPlaylistNavigator</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>dtor.QMediaPlaylistNavigator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaPlaylistProvider *</type>
            <name>playlist</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>playlist</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlaylist</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>setPlaylist</anchor>
            <arglist>(QMediaPlaylistProvider * playlist)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaPlaylist::PlaybackMode</type>
            <name>playbackMode</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>playbackMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaContent</type>
            <name>currentItem</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>currentItem-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaContent</type>
            <name>nextItem</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>nextItem</anchor>
            <arglist>(int steps) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaContent</type>
            <name>previousItem</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>previousItem</anchor>
            <arglist>(int steps) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaContent</type>
            <name>itemAt</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>itemAt</anchor>
            <arglist>(int position) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentIndex</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>nextIndex</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>nextIndex</anchor>
            <arglist>(int steps) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>previousIndex</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>previousIndex</anchor>
            <arglist>(int steps) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>next</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>previous</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>jump</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>(int position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlaybackMode</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>playbackMode-prop</anchor>
            <arglist>(QMediaPlaylist::PlaybackMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activated</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>activated</anchor>
            <arglist>(const QMediaContent &amp; media)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentIndexChanged</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>currentIndexChanged</anchor>
            <arglist>(int position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>playbackModeChanged</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>playbackModeChanged</anchor>
            <arglist>(QMediaPlaylist::PlaybackMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>surroundingItemsChanged</name>
            <anchorfile>qmediaplaylistnavigator.html</anchorfile>
            <anchor>surroundingItemsChanged</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemDetailDefinition</name>
        <filename>qorganizeritemdetaildefinition.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemDetailDefinition</name>
            <anchorfile>qorganizeritemdetaildefinition.html</anchorfile>
            <anchor>QOrganizerItemDetailDefinition</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOrganizerItemDetailDefinition</name>
            <anchorfile>qorganizeritemdetaildefinition.html</anchorfile>
            <anchor>dtor.QOrganizerItemDetailDefinition</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemDetailDefinition</name>
            <anchorfile>qorganizeritemdetaildefinition.html</anchorfile>
            <anchor>QOrganizerItemDetailDefinition-2</anchor>
            <arglist>(const QOrganizerItemDetailDefinition &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemDetailDefinition &amp;</type>
            <name>operator=</name>
            <anchorfile>qorganizeritemdetaildefinition.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QOrganizerItemDetailDefinition &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qorganizeritemdetaildefinition.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QOrganizerItemDetailDefinition &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qorganizeritemdetaildefinition.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QOrganizerItemDetailDefinition &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qorganizeritemdetaildefinition.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qorganizeritemdetaildefinition.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QString &amp; definitionName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qorganizeritemdetaildefinition.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUnique</name>
            <anchorfile>qorganizeritemdetaildefinition.html</anchorfile>
            <anchor>setUnique</anchor>
            <arglist>(bool unique)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUnique</name>
            <anchorfile>qorganizeritemdetaildefinition.html</anchorfile>
            <anchor>isUnique</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFields</name>
            <anchorfile>qorganizeritemdetaildefinition.html</anchorfile>
            <anchor>setFields</anchor>
            <arglist>(const QMap&lt;QString, QOrganizerItemDetailFieldDefinition&gt; &amp; fields)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;QString, QOrganizerItemDetailFieldDefinition&gt;</type>
            <name>fields</name>
            <anchorfile>qorganizeritemdetaildefinition.html</anchorfile>
            <anchor>fields</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertField</name>
            <anchorfile>qorganizeritemdetaildefinition.html</anchorfile>
            <anchor>insertField</anchor>
            <arglist>(const QString &amp; key, const QOrganizerItemDetailFieldDefinition &amp; field)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeField</name>
            <anchorfile>qorganizeritemdetaildefinition.html</anchorfile>
            <anchor>removeField</anchor>
            <arglist>(const QString &amp; key)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactId</name>
        <filename>qcontactid.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactId</name>
            <anchorfile>qcontactid.html</anchorfile>
            <anchor>QContactId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactId</name>
            <anchorfile>qcontactid.html</anchorfile>
            <anchor>dtor.QContactId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactId</name>
            <anchorfile>qcontactid.html</anchorfile>
            <anchor>QContactId-2</anchor>
            <arglist>(const QContactId &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactId &amp;</type>
            <name>operator=</name>
            <anchorfile>qcontactid.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QContactId &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcontactid.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QContactId &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcontactid.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QContactId &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qcontactid.html</anchorfile>
            <anchor>operator&lt;</anchor>
            <arglist>(const QContactId &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerUri</name>
            <anchorfile>qcontactid.html</anchorfile>
            <anchor>managerUri</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactLocalId</type>
            <name>localId</name>
            <anchorfile>qcontactid.html</anchorfile>
            <anchor>localId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setManagerUri</name>
            <anchorfile>qcontactid.html</anchorfile>
            <anchor>setManagerUri</anchor>
            <arglist>(const QString &amp; uri)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalId</name>
            <anchorfile>qcontactid.html</anchorfile>
            <anchor>setLocalId</anchor>
            <arglist>(const QContactLocalId &amp; id)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactLocalIdFetchRequest</name>
        <filename>qcontactlocalidfetchrequest.html</filename>
        <base>QContactAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactLocalIdFetchRequest</name>
            <anchorfile>qcontactlocalidfetchrequest.html</anchorfile>
            <anchor>QContactLocalIdFetchRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactLocalIdFetchRequest</name>
            <anchorfile>qcontactlocalidfetchrequest.html</anchorfile>
            <anchor>dtor.QContactLocalIdFetchRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilter</name>
            <anchorfile>qcontactlocalidfetchrequest.html</anchorfile>
            <anchor>setFilter</anchor>
            <arglist>(const QContactFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSorting</name>
            <anchorfile>qcontactlocalidfetchrequest.html</anchorfile>
            <anchor>setSorting</anchor>
            <arglist>(const QList&lt;QContactSortOrder&gt; &amp; sorting)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactFilter</type>
            <name>filter</name>
            <anchorfile>qcontactlocalidfetchrequest.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactSortOrder&gt;</type>
            <name>sorting</name>
            <anchorfile>qcontactlocalidfetchrequest.html</anchorfile>
            <anchor>sorting</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactLocalId&gt;</type>
            <name>ids</name>
            <anchorfile>qcontactlocalidfetchrequest.html</anchorfile>
            <anchor>ids</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaPlaylistSourceControl</name>
        <filename>qmediaplaylistsourcecontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMediaPlaylistSourceControl</name>
            <anchorfile>qmediaplaylistsourcecontrol.html</anchorfile>
            <anchor>dtor.QMediaPlaylistSourceControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QMediaPlaylist *</type>
            <name>playlist</name>
            <anchorfile>qmediaplaylistsourcecontrol.html</anchorfile>
            <anchor>playlist</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setPlaylist</name>
            <anchorfile>qmediaplaylistsourcecontrol.html</anchorfile>
            <anchor>setPlaylist</anchor>
            <arglist>(QMediaPlaylist * playlist) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>playlistChanged</name>
            <anchorfile>qmediaplaylistsourcecontrol.html</anchorfile>
            <anchor>playlistChanged</anchor>
            <arglist>(QMediaPlaylist * playlist)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QMediaPlaylistSourceControl</name>
            <anchorfile>qmediaplaylistsourcecontrol.html</anchorfile>
            <anchor>QMediaPlaylistSourceControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGalleryItemList</name>
        <filename>qgalleryitemlist.html</filename>
        <member kind="property" type="int">
            <name>cursorPosition</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>cursorPosition-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>minimumPagedItems</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>minimumPagedItems-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ItemStatusFlag</name>
            <anchor>ItemStatusFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutOfRange">
            <anchor>ItemStatusFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Reading">
            <anchor>ItemStatusFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Writing">
            <anchor>ItemStatusFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGalleryItemList::ItemStatusFlag">
            <name>ItemStatus</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>ItemStatus-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryItemList</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>QGalleryItemList</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGalleryItemList</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>dtor.QGalleryItemList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QStringList</type>
            <name>propertyNames</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>propertyNames</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>propertyKey</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>propertyKey</anchor>
            <arglist>(const QString &amp; propertyName) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QGalleryProperty::Attributes</type>
            <name>propertyAttributes</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>propertyAttributes</anchor>
            <arglist>(int key) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVariant::Type</type>
            <name>propertyType</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>propertyType</anchor>
            <arglist>(int key) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>cursorPosition</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>cursorPosition-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>minimumPagedItems</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>minimumPagedItems-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>count</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVariant</type>
            <name>id</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>id</anchor>
            <arglist>(int index) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QUrl</type>
            <name>url</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>url</anchor>
            <arglist>(int index) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>type</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>type</anchor>
            <arglist>(int index) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;QGalleryResource&gt;</type>
            <name>resources</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>resources</anchor>
            <arglist>(int index) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual ItemStatus</type>
            <name>status</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>status</anchor>
            <arglist>(int index) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVariant</type>
            <name>metaData</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>metaData</anchor>
            <arglist>(int index, int key) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setMetaData</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>setMetaData</anchor>
            <arglist>(int index, int key, const QVariant &amp; value) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>metaData</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>metaData-2</anchor>
            <arglist>(int index, const QString &amp; property) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setMetaData</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>setMetaData-2</anchor>
            <arglist>(int index, const QString &amp; property, const QVariant &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setCursorPosition</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>cursorPosition-prop</anchor>
            <arglist>(int position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>inserted</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>inserted</anchor>
            <arglist>(int index, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removed</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>removed</anchor>
            <arglist>(int index, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moved</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>moved</anchor>
            <arglist>(int from, int to, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>statusChanged</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>statusChanged</anchor>
            <arglist>(int index, int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>metaDataChanged</name>
            <anchorfile>qgalleryitemlist.html</anchorfile>
            <anchor>metaDataChanged</anchor>
            <arglist>(int index, int count, const QList&lt;int&gt; &amp; keys)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCameraImageProcessingControl</name>
        <filename>qcameraimageprocessingcontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCameraImageProcessingControl</name>
            <anchorfile>qcameraimageprocessingcontrol.html</anchorfile>
            <anchor>dtor.QCameraImageProcessingControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>ProcessingParameter</name>
            <anchor>ProcessingParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Contrast">
            <anchor>ProcessingParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Saturation">
            <anchor>ProcessingParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Brightness">
            <anchor>ProcessingParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sharpening">
            <anchor>ProcessingParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Denoising">
            <anchor>ProcessingParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QCameraImageProcessing::WhiteBalanceMode</type>
            <name>whiteBalanceMode</name>
            <anchorfile>qcameraimageprocessingcontrol.html</anchorfile>
            <anchor>whiteBalanceMode</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setWhiteBalanceMode</name>
            <anchorfile>qcameraimageprocessingcontrol.html</anchorfile>
            <anchor>setWhiteBalanceMode</anchor>
            <arglist>(QCameraImageProcessing::WhiteBalanceMode mode) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isWhiteBalanceModeSupported</name>
            <anchorfile>qcameraimageprocessingcontrol.html</anchorfile>
            <anchor>isWhiteBalanceModeSupported</anchor>
            <arglist>(QCameraImageProcessing::WhiteBalanceMode mode) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>manualWhiteBalance</name>
            <anchorfile>qcameraimageprocessingcontrol.html</anchorfile>
            <anchor>manualWhiteBalance</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setManualWhiteBalance</name>
            <anchorfile>qcameraimageprocessingcontrol.html</anchorfile>
            <anchor>setManualWhiteBalance</anchor>
            <arglist>(int colorTemperature) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isProcessingParameterSupported</name>
            <anchorfile>qcameraimageprocessingcontrol.html</anchorfile>
            <anchor>isProcessingParameterSupported</anchor>
            <arglist>(ProcessingParameter parameter) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVariant</type>
            <name>processingParameter</name>
            <anchorfile>qcameraimageprocessingcontrol.html</anchorfile>
            <anchor>processingParameter</anchor>
            <arglist>(ProcessingParameter parameter) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setProcessingParameter</name>
            <anchorfile>qcameraimageprocessingcontrol.html</anchorfile>
            <anchor>setProcessingParameter</anchor>
            <arglist>(ProcessingParameter parameter, QVariant value) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;QByteArray&gt;</type>
            <name>supportedPresets</name>
            <anchorfile>qcameraimageprocessingcontrol.html</anchorfile>
            <anchor>supportedPresets</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>presetDescription</name>
            <anchorfile>qcameraimageprocessingcontrol.html</anchorfile>
            <anchor>presetDescription</anchor>
            <arglist>(const QByteArray &amp; preset) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QByteArray</type>
            <name>preset</name>
            <anchorfile>qcameraimageprocessingcontrol.html</anchorfile>
            <anchor>preset</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setPreset</name>
            <anchorfile>qcameraimageprocessingcontrol.html</anchorfile>
            <anchor>setPreset</anchor>
            <arglist>(const QByteArray &amp; preset) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QCameraImageProcessingControl</name>
            <anchorfile>qcameraimageprocessingcontrol.html</anchorfile>
            <anchor>QCameraImageProcessingControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkIdFetchRequest</name>
        <filename>qlandmarkidfetchrequest.html</filename>
        <base>QLandmarkAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkIdFetchRequest</name>
            <anchorfile>qlandmarkidfetchrequest.html</anchorfile>
            <anchor>QLandmarkIdFetchRequest</anchor>
            <arglist>(QLandmarkManager * manager, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLandmarkIdFetchRequest</name>
            <anchorfile>qlandmarkidfetchrequest.html</anchorfile>
            <anchor>dtor.QLandmarkIdFetchRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkFilter</type>
            <name>filter</name>
            <anchorfile>qlandmarkidfetchrequest.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilter</name>
            <anchorfile>qlandmarkidfetchrequest.html</anchorfile>
            <anchor>setFilter</anchor>
            <arglist>(const QLandmarkFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkSortOrder&gt;</type>
            <name>sorting</name>
            <anchorfile>qlandmarkidfetchrequest.html</anchorfile>
            <anchor>sorting</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSorting</name>
            <anchorfile>qlandmarkidfetchrequest.html</anchorfile>
            <anchor>setSorting</anchor>
            <arglist>(const QList&lt;QLandmarkSortOrder&gt; &amp; sorting)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSorting</name>
            <anchorfile>qlandmarkidfetchrequest.html</anchorfile>
            <anchor>setSorting-2</anchor>
            <arglist>(const QLandmarkSortOrder &amp; sorting)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkFetchHint</type>
            <name>fetchHint</name>
            <anchorfile>qlandmarkidfetchrequest.html</anchorfile>
            <anchor>fetchHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFetchHint</name>
            <anchorfile>qlandmarkidfetchrequest.html</anchorfile>
            <anchor>setFetchHint</anchor>
            <arglist>(const QLandmarkFetchHint &amp; fetchHint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkId&gt;</type>
            <name>landmarkIds</name>
            <anchorfile>qlandmarkidfetchrequest.html</anchorfile>
            <anchor>landmarkIds</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemFetchHint</name>
        <filename>qorganizeritemfetchhint.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemFetchHint</name>
            <anchorfile>qorganizeritemfetchhint.html</anchorfile>
            <anchor>QOrganizerItemFetchHint</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemFetchHint</name>
            <anchorfile>qorganizeritemfetchhint.html</anchorfile>
            <anchor>QOrganizerItemFetchHint-2</anchor>
            <arglist>(const QOrganizerItemFetchHint &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOrganizerItemFetchHint</name>
            <anchorfile>qorganizeritemfetchhint.html</anchorfile>
            <anchor>dtor.QOrganizerItemFetchHint</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemFetchHint &amp;</type>
            <name>operator=</name>
            <anchorfile>qorganizeritemfetchhint.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QOrganizerItemFetchHint &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>detailDefinitionsHint</name>
            <anchorfile>qorganizeritemfetchhint.html</anchorfile>
            <anchor>detailDefinitionsHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDetailDefinitionsHint</name>
            <anchorfile>qorganizeritemfetchhint.html</anchorfile>
            <anchor>setDetailDefinitionsHint</anchor>
            <arglist>(const QStringList &amp; definitionNames)</arglist>
        </member>
        <member kind="enum">
            <name>OptimizationHint</name>
            <anchor>OptimizationHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllRequired">
            <anchor>OptimizationHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoActionPreferences">
            <anchor>OptimizationHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoBinaryBlobs">
            <anchor>OptimizationHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QOrganizerItemFetchHint::OptimizationHint">
            <name>OptimizationHints</name>
            <anchorfile>qorganizeritemfetchhint.html</anchorfile>
            <anchor>OptimizationHints-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>OptimizationHints</type>
            <name>optimizationHints</name>
            <anchorfile>qorganizeritemfetchhint.html</anchorfile>
            <anchor>optimizationHints</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOptimizationHints</name>
            <anchorfile>qorganizeritemfetchhint.html</anchorfile>
            <anchor>setOptimizationHints</anchor>
            <arglist>(QFlags&lt;QOrganizerItemFetchHint::OptimizationHint&gt; hints)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactChangeLogFilter</name>
        <filename>qcontactchangelogfilter.html</filename>
        <base>QContactFilter</base>
        <member kind="enum">
            <name>EventType</name>
            <anchor>EventType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EventAdded">
            <anchor>EventType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EventChanged">
            <anchor>EventType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EventRemoved">
            <anchor>EventType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactChangeLogFilter</name>
            <anchorfile>qcontactchangelogfilter.html</anchorfile>
            <anchor>QContactChangeLogFilter</anchor>
            <arglist>(QContactChangeLogFilter::EventType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactChangeLogFilter</name>
            <anchorfile>qcontactchangelogfilter.html</anchorfile>
            <anchor>QContactChangeLogFilter-2</anchor>
            <arglist>(const QContactFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEventType</name>
            <anchorfile>qcontactchangelogfilter.html</anchorfile>
            <anchor>setEventType</anchor>
            <arglist>(QContactChangeLogFilter::EventType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSince</name>
            <anchorfile>qcontactchangelogfilter.html</anchorfile>
            <anchor>setSince</anchor>
            <arglist>(const QDateTime &amp; since)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>since</name>
            <anchorfile>qcontactchangelogfilter.html</anchorfile>
            <anchor>since</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactChangeLogFilter::EventType</type>
            <name>eventType</name>
            <anchorfile>qcontactchangelogfilter.html</anchorfile>
            <anchor>eventType</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGalleryAbstractResponse</name>
        <filename>qgalleryabstractresponse.html</filename>
        <base>QGalleryItemList</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryAbstractResponse</name>
            <anchorfile>qgalleryabstractresponse.html</anchorfile>
            <anchor>QGalleryAbstractResponse</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGalleryAbstractResponse</name>
            <anchorfile>qgalleryabstractresponse.html</anchorfile>
            <anchor>dtor.QGalleryAbstractResponse</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>result</name>
            <anchorfile>qgalleryabstractresponse.html</anchorfile>
            <anchor>result</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isIdle</name>
            <anchorfile>qgalleryabstractresponse.html</anchorfile>
            <anchor>isIdle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>cancel</name>
            <anchorfile>qgalleryabstractresponse.html</anchorfile>
            <anchor>cancel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>waitForFinished</name>
            <anchorfile>qgalleryabstractresponse.html</anchorfile>
            <anchor>waitForFinished</anchor>
            <arglist>(int msecs) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qgalleryabstractresponse.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>progressChanged</name>
            <anchorfile>qgalleryabstractresponse.html</anchorfile>
            <anchor>progressChanged</anchor>
            <arglist>(int current, int maximum)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>finish</name>
            <anchorfile>qgalleryabstractresponse.html</anchorfile>
            <anchor>finish</anchor>
            <arglist>(int result, bool idle)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRemoteServiceClassRegister</name>
        <filename>qremoteserviceclassregister.html</filename>
        <member kind="enum">
            <name>InstanceType</name>
            <anchor>InstanceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SharedInstance">
            <anchor>InstanceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UniqueInstance">
            <anchor>InstanceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QRemoteServiceIdentifier&gt;</type>
            <name>types</name>
            <anchorfile>qremoteserviceclassregister.html</anchorfile>
            <anchor>types</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>registerType</name>
            <anchorfile>qremoteserviceclassregister.html</anchorfile>
            <anchor>registerType</anchor>
            <arglist>(QRemoteServiceClassRegister::InstanceType type)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkUnionFilter</name>
        <filename>qlandmarkunionfilter.html</filename>
        <base>QLandmarkFilter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkUnionFilter</name>
            <anchorfile>qlandmarkunionfilter.html</anchorfile>
            <anchor>QLandmarkUnionFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkUnionFilter</name>
            <anchorfile>qlandmarkunionfilter.html</anchorfile>
            <anchor>QLandmarkUnionFilter-2</anchor>
            <arglist>(const QLandmarkFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QLandmarkUnionFilter</name>
            <anchorfile>qlandmarkunionfilter.html</anchorfile>
            <anchor>dtor.QLandmarkUnionFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilters</name>
            <anchorfile>qlandmarkunionfilter.html</anchorfile>
            <anchor>setFilters</anchor>
            <arglist>(const QList&lt;QLandmarkFilter&gt; &amp; filters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepend</name>
            <anchorfile>qlandmarkunionfilter.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(const QLandmarkFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qlandmarkunionfilter.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const QLandmarkFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qlandmarkunionfilter.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QLandmarkFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qlandmarkunionfilter.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkUnionFilter &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qlandmarkunionfilter.html</anchorfile>
            <anchor>operator&lt;&lt;</anchor>
            <arglist>(const QLandmarkFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkFilter&gt;</type>
            <name>filters</name>
            <anchorfile>qlandmarkunionfilter.html</anchorfile>
            <anchor>filters</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkCategorySaveRequest</name>
        <filename>qlandmarkcategorysaverequest.html</filename>
        <base>QLandmarkAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkCategorySaveRequest</name>
            <anchorfile>qlandmarkcategorysaverequest.html</anchorfile>
            <anchor>QLandmarkCategorySaveRequest</anchor>
            <arglist>(QLandmarkManager * manager, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLandmarkCategorySaveRequest</name>
            <anchorfile>qlandmarkcategorysaverequest.html</anchorfile>
            <anchor>dtor.QLandmarkCategorySaveRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkCategory&gt;</type>
            <name>categories</name>
            <anchorfile>qlandmarkcategorysaverequest.html</anchorfile>
            <anchor>categories</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCategories</name>
            <anchorfile>qlandmarkcategorysaverequest.html</anchorfile>
            <anchor>setCategories</anchor>
            <arglist>(const QList&lt;QLandmarkCategory&gt; &amp; categories)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCategory</name>
            <anchorfile>qlandmarkcategorysaverequest.html</anchorfile>
            <anchor>setCategory</anchor>
            <arglist>(const QLandmarkCategory &amp; category)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;int, QLandmarkManager::Error&gt;</type>
            <name>errorMap</name>
            <anchorfile>qlandmarkcategorysaverequest.html</anchorfile>
            <anchor>errorMap</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRadioTuner</name>
        <filename>qradiotuner.html</filename>
        <base>QMediaObject</base>
        <member kind="property" type="State">
            <name>state</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Band">
            <name>band</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>band-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>frequency</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>frequency-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>stereo</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>stereo-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="StereoMode">
            <name>stereoMode</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>stereoMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>signalStrength</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>signalStrength-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>volume</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>volume-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>muted</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>muted-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>searching</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>searching-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActiveState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StoppedState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Band</name>
            <anchor>Band-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AM">
            <anchor>Band-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FM">
            <anchor>Band-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SW">
            <anchor>Band-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LW">
            <anchor>Band-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FM2">
            <anchor>Band-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ResourceError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OpenError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutOfRangeError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StereoMode</name>
            <anchor>StereoMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ForceStereo">
            <anchor>StereoMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ForceMono">
            <anchor>StereoMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Auto">
            <anchor>StereoMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRadioTuner</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>QRadioTuner</anchor>
            <arglist>(QObject * parent, QMediaServiceProvider * provider)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRadioTuner</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>dtor.QRadioTuner</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isAvailable</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>isAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QtMultimediaKit::AvailabilityError</type>
            <name>availabilityError</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>availabilityError</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>State</type>
            <name>state</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Band</type>
            <name>band</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>band-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBandSupported</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>isBandSupported</anchor>
            <arglist>(Band band) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>frequency</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>frequency-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>frequencyStep</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>frequencyStep</anchor>
            <arglist>(Band band) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPair&lt;int, int&gt;</type>
            <name>frequencyRange</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>frequencyRange</anchor>
            <arglist>(Band band) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isStereo</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>stereo-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStereoMode</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>stereoMode-prop</anchor>
            <arglist>(QRadioTuner::StereoMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>StereoMode</type>
            <name>stereoMode</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>stereoMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>signalStrength</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>signalStrength-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>volume</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>volume-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMuted</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>muted-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSearching</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>searching-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>searchForward</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>searchForward</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>searchBackward</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>searchBackward</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancelSearch</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>cancelSearch</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBand</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>band-prop</anchor>
            <arglist>(Band band)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrequency</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>frequency-prop</anchor>
            <arglist>(int frequency)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVolume</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>volume-prop</anchor>
            <arglist>(int volume)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMuted</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>muted-prop</anchor>
            <arglist>(bool muted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QRadioTuner::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bandChanged</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>bandChanged</anchor>
            <arglist>(QRadioTuner::Band band)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>frequencyChanged</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>frequencyChanged</anchor>
            <arglist>(int frequency)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stereoStatusChanged</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>stereoStatusChanged</anchor>
            <arglist>(bool stereo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>searchingChanged</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>searchingChanged</anchor>
            <arglist>(bool searching)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>signalStrengthChanged</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>signalStrengthChanged</anchor>
            <arglist>(int strength)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>volumeChanged</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>volumeChanged</anchor>
            <arglist>(int volume)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mutedChanged</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>mutedChanged</anchor>
            <arglist>(bool muted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qradiotuner.html</anchorfile>
            <anchor>error-2</anchor>
            <arglist>(Error error)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSensorPluginInterface</name>
        <filename>qsensorplugininterface.html</filename>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>registerSensors</name>
            <anchorfile>qsensorplugininterface.html</anchorfile>
            <anchor>registerSensors</anchor>
            <arglist>() = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaService</name>
        <filename>qmediaservice.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMediaService</name>
            <anchorfile>qmediaservice.html</anchorfile>
            <anchor>dtor.QMediaService</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QMediaControl *</type>
            <name>requestControl</name>
            <anchorfile>qmediaservice.html</anchorfile>
            <anchor>requestControl</anchor>
            <arglist>(const char * interface) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>requestControl</name>
            <anchorfile>qmediaservice.html</anchorfile>
            <anchor>requestControl-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>releaseControl</name>
            <anchorfile>qmediaservice.html</anchorfile>
            <anchor>releaseControl</anchor>
            <arglist>(QMediaControl * control) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QMediaService</name>
            <anchorfile>qmediaservice.html</anchorfile>
            <anchor>QMediaService</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCameraFocus</name>
        <filename>qcamerafocus.html</filename>
        <member kind="property" type="FocusPointMode">
            <name>focusPointMode</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>focusPointMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPointF">
            <name>customFocusPoint</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>customFocusPoint-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QCameraFocusZoneList">
            <name>focusZones</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>focusZones-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FocusMode</name>
            <anchor>FocusMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ManualFocus">
            <anchor>FocusMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HyperfocalFocus">
            <anchor>FocusMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InfinityFocus">
            <anchor>FocusMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AutoFocus">
            <anchor>FocusMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContinuousFocus">
            <anchor>FocusMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MacroFocus">
            <anchor>FocusMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QCameraFocus::FocusMode">
            <name>FocusModes</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>FocusModes-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FocusPointMode</name>
            <anchor>FocusPointMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FocusPointAuto">
            <anchor>FocusPointMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FocusPointCenter">
            <anchor>FocusPointMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FocusPointFaceDetection">
            <anchor>FocusPointMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FocusPointCustom">
            <anchor>FocusPointMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAvailable</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>isAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FocusMode</type>
            <name>focusMode</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>focusMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocusMode</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>setFocusMode</anchor>
            <arglist>(FocusMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFocusModeSupported</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>isFocusModeSupported</anchor>
            <arglist>(FocusMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FocusPointMode</type>
            <name>focusPointMode</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>focusPointMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFocusPointMode</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>focusPointMode-prop</anchor>
            <arglist>(FocusPointMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFocusPointModeSupported</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>isFocusPointModeSupported</anchor>
            <arglist>(FocusPointMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>customFocusPoint</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>customFocusPoint-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCustomFocusPoint</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>customFocusPoint-prop</anchor>
            <arglist>(const QPointF &amp; point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCameraFocusZoneList</type>
            <name>focusZones</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>focusZones-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>maximumOpticalZoom</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>maximumOpticalZoom</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>maximumDigitalZoom</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>maximumDigitalZoom</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>opticalZoom</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>opticalZoom</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>digitalZoom</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>digitalZoom</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>zoomTo</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>zoomTo</anchor>
            <arglist>(qreal optical, qreal digital)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>opticalZoomChanged</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>opticalZoomChanged</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digitalZoomChanged</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>digitalZoomChanged</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>focusZonesChanged</name>
            <anchorfile>qcamerafocus.html</anchorfile>
            <anchor>focusZonesChanged</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaBindableInterface</name>
        <filename>qmediabindableinterface.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMediaBindableInterface</name>
            <anchorfile>qmediabindableinterface.html</anchorfile>
            <anchor>dtor.QMediaBindableInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QMediaObject *</type>
            <name>mediaObject</name>
            <anchorfile>qmediabindableinterface.html</anchorfile>
            <anchor>mediaObject</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>setMediaObject</name>
            <anchorfile>qmediabindableinterface.html</anchorfile>
            <anchor>setMediaObject</anchor>
            <arglist>(QMediaObject * object) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoRouteReply</name>
        <filename>qgeoroutereply.html</filename>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EngineNotSetError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CommunicationError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ParseError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsupportedOptionError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRouteReply</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>QGeoRouteReply</anchor>
            <arglist>(Error error, const QString &amp; errorString, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeoRouteReply</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>dtor.QGeoRouteReply</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest</type>
            <name>request</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>request</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGeoRoute&gt;</type>
            <name>routes</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>routes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>abort</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>abort</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>error-2</anchor>
            <arglist>(QGeoRouteReply::Error error, const QString &amp; errorString)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QGeoRouteReply</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>QGeoRouteReply-2</anchor>
            <arglist>(const QGeoRouteRequest &amp; request, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setError</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>setError</anchor>
            <arglist>(Error error, const QString &amp; errorString)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setFinished</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>setFinished</anchor>
            <arglist>(bool finished)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setRoutes</name>
            <anchorfile>qgeoroutereply.html</anchorfile>
            <anchor>setRoutes</anchor>
            <arglist>(const QList&lt;QGeoRoute&gt; &amp; routes)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAudioEncoderControl</name>
        <filename>qaudioencodercontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAudioEncoderControl</name>
            <anchorfile>qaudioencodercontrol.html</anchorfile>
            <anchor>dtor.QAudioEncoderControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QStringList</type>
            <name>supportedAudioCodecs</name>
            <anchorfile>qaudioencodercontrol.html</anchorfile>
            <anchor>supportedAudioCodecs</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>codecDescription</name>
            <anchorfile>qaudioencodercontrol.html</anchorfile>
            <anchor>codecDescription</anchor>
            <arglist>(const QString &amp; codec) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;int&gt;</type>
            <name>supportedSampleRates</name>
            <anchorfile>qaudioencodercontrol.html</anchorfile>
            <anchor>supportedSampleRates</anchor>
            <arglist>(const QAudioEncoderSettings &amp; settings, bool * continuous) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QAudioEncoderSettings</type>
            <name>audioSettings</name>
            <anchorfile>qaudioencodercontrol.html</anchorfile>
            <anchor>audioSettings</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setAudioSettings</name>
            <anchorfile>qaudioencodercontrol.html</anchorfile>
            <anchor>setAudioSettings</anchor>
            <arglist>(const QAudioEncoderSettings &amp; settings) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QStringList</type>
            <name>supportedEncodingOptions</name>
            <anchorfile>qaudioencodercontrol.html</anchorfile>
            <anchor>supportedEncodingOptions</anchor>
            <arglist>(const QString &amp; codec) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVariant</type>
            <name>encodingOption</name>
            <anchorfile>qaudioencodercontrol.html</anchorfile>
            <anchor>encodingOption</anchor>
            <arglist>(const QString &amp; codec, const QString &amp; option) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setEncodingOption</name>
            <anchorfile>qaudioencodercontrol.html</anchorfile>
            <anchor>setEncodingOption</anchor>
            <arglist>(const QString &amp; codec, const QString &amp; option, const QVariant &amp; value) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAudioEncoderControl</name>
            <anchorfile>qaudioencodercontrol.html</anchorfile>
            <anchor>QAudioEncoderControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactFetchHint</name>
        <filename>qcontactfetchhint.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactFetchHint</name>
            <anchorfile>qcontactfetchhint.html</anchorfile>
            <anchor>QContactFetchHint</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactFetchHint</name>
            <anchorfile>qcontactfetchhint.html</anchorfile>
            <anchor>QContactFetchHint-2</anchor>
            <arglist>(const QContactFetchHint &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactFetchHint</name>
            <anchorfile>qcontactfetchhint.html</anchorfile>
            <anchor>dtor.QContactFetchHint</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactFetchHint &amp;</type>
            <name>operator=</name>
            <anchorfile>qcontactfetchhint.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QContactFetchHint &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>detailDefinitionsHint</name>
            <anchorfile>qcontactfetchhint.html</anchorfile>
            <anchor>detailDefinitionsHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDetailDefinitionsHint</name>
            <anchorfile>qcontactfetchhint.html</anchorfile>
            <anchor>setDetailDefinitionsHint</anchor>
            <arglist>(const QStringList &amp; definitionNames)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>relationshipTypesHint</name>
            <anchorfile>qcontactfetchhint.html</anchorfile>
            <anchor>relationshipTypesHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRelationshipTypesHint</name>
            <anchorfile>qcontactfetchhint.html</anchorfile>
            <anchor>setRelationshipTypesHint</anchor>
            <arglist>(const QStringList &amp; relationshipTypes)</arglist>
        </member>
        <member kind="enum">
            <name>OptimizationHint</name>
            <anchor>OptimizationHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllRequired">
            <anchor>OptimizationHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoRelationships">
            <anchor>OptimizationHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoActionPreferences">
            <anchor>OptimizationHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoBinaryBlobs">
            <anchor>OptimizationHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QContactFetchHint::OptimizationHint">
            <name>OptimizationHints</name>
            <anchorfile>qcontactfetchhint.html</anchorfile>
            <anchor>OptimizationHints-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>OptimizationHints</type>
            <name>optimizationHints</name>
            <anchorfile>qcontactfetchhint.html</anchorfile>
            <anchor>optimizationHints</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOptimizationHints</name>
            <anchorfile>qcontactfetchhint.html</anchorfile>
            <anchor>setOptimizationHints</anchor>
            <arglist>(QFlags&lt;QContactFetchHint::OptimizationHint&gt; hints)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemChangeLogFilter</name>
        <filename>qorganizeritemchangelogfilter.html</filename>
        <base>QOrganizerItemFilter</base>
        <member kind="enum">
            <name>EventType</name>
            <anchor>EventType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EventAdded">
            <anchor>EventType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EventChanged">
            <anchor>EventType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EventRemoved">
            <anchor>EventType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemChangeLogFilter</name>
            <anchorfile>qorganizeritemchangelogfilter.html</anchorfile>
            <anchor>QOrganizerItemChangeLogFilter</anchor>
            <arglist>(QOrganizerItemChangeLogFilter::EventType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemChangeLogFilter</name>
            <anchorfile>qorganizeritemchangelogfilter.html</anchorfile>
            <anchor>QOrganizerItemChangeLogFilter-2</anchor>
            <arglist>(const QOrganizerItemFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEventType</name>
            <anchorfile>qorganizeritemchangelogfilter.html</anchorfile>
            <anchor>setEventType</anchor>
            <arglist>(QOrganizerItemChangeLogFilter::EventType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSince</name>
            <anchorfile>qorganizeritemchangelogfilter.html</anchorfile>
            <anchor>setSince</anchor>
            <arglist>(const QDateTime &amp; since)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>since</name>
            <anchorfile>qorganizeritemchangelogfilter.html</anchorfile>
            <anchor>since</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemChangeLogFilter::EventType</type>
            <name>eventType</name>
            <anchorfile>qorganizeritemchangelogfilter.html</anchorfile>
            <anchor>eventType</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGraphicsVideoItem</name>
        <filename>qgraphicsvideoitem.html</filename>
        <base>QMediaBindableInterface</base>
        <member kind="property" type="QMediaObject *">
            <name>mediaObject</name>
            <anchorfile>qgraphicsvideoitem.html</anchorfile>
            <anchor>mediaObject-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::AspectRatioMode">
            <name>aspectRatioMode</name>
            <anchorfile>qgraphicsvideoitem.html</anchorfile>
            <anchor>aspectRatioMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QPointF">
            <name>offset</name>
            <anchorfile>qgraphicsvideoitem.html</anchorfile>
            <anchor>offset-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSizeF">
            <name>size</name>
            <anchorfile>qgraphicsvideoitem.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSizeF">
            <name>nativeSize</name>
            <anchorfile>qgraphicsvideoitem.html</anchorfile>
            <anchor>nativeSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGraphicsVideoItem</name>
            <anchorfile>qgraphicsvideoitem.html</anchorfile>
            <anchor>QGraphicsVideoItem</anchor>
            <arglist>(QGraphicsItem * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGraphicsVideoItem</name>
            <anchorfile>qgraphicsvideoitem.html</anchorfile>
            <anchor>dtor.QGraphicsVideoItem</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMediaObject *</type>
            <name>mediaObject</name>
            <anchorfile>qgraphicsvideoitem.html</anchorfile>
            <anchor>mediaObject-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::AspectRatioMode</type>
            <name>aspectRatioMode</name>
            <anchorfile>qgraphicsvideoitem.html</anchorfile>
            <anchor>aspectRatioMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAspectRatioMode</name>
            <anchorfile>qgraphicsvideoitem.html</anchorfile>
            <anchor>aspectRatioMode-prop</anchor>
            <arglist>(Qt::AspectRatioMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>offset</name>
            <anchorfile>qgraphicsvideoitem.html</anchorfile>
            <anchor>offset-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOffset</name>
            <anchorfile>qgraphicsvideoitem.html</anchorfile>
            <anchor>offset-prop</anchor>
            <arglist>(const QPointF &amp; offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>size</name>
            <anchorfile>qgraphicsvideoitem.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSize</name>
            <anchorfile>qgraphicsvideoitem.html</anchorfile>
            <anchor>size-prop</anchor>
            <arglist>(const QSizeF &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>nativeSize</name>
            <anchorfile>qgraphicsvideoitem.html</anchorfile>
            <anchor>nativeSize-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>boundingRect</name>
            <anchorfile>qgraphicsvideoitem.html</anchorfile>
            <anchor>boundingRect</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>paint</name>
            <anchorfile>qgraphicsvideoitem.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nativeSizeChanged</name>
            <anchorfile>qgraphicsvideoitem.html</anchorfile>
            <anchor>nativeSizeChanged</anchor>
            <arglist>(const QSizeF &amp; size)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageManager</name>
        <filename>qmessagemanager.html</filename>
        <member kind="enum">
            <name>RemovalOption</name>
            <anchor>RemovalOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RemoveLocalCopyOnly">
            <anchor>RemovalOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RemoveOnOriginatingServer">
            <anchor>RemovalOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidId">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConstraintFailure">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContentInaccessible">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotYetImplemented">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrameworkFault">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WorkingMemoryOverflow">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Busy">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RequestIncomplete">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>NotificationFilterId</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>NotificationFilterId-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>NotificationFilterIdSet</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>NotificationFilterIdSet-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageManager</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>QMessageManager</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMessageManager</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>dtor.QMessageManager</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageManager::Error</type>
            <name>error</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageIdList</type>
            <name>queryMessages</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>queryMessages</anchor>
            <arglist>(const QMessageFilter &amp; filter, const QMessageSortOrder &amp; sortOrder, uint limit, uint offset) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageIdList</type>
            <name>queryMessages</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>queryMessages-2</anchor>
            <arglist>(const QMessageFilter &amp; filter, const QList&lt;QMessageSortOrder&gt; &amp; sortOrders, uint limit, uint offset) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageIdList</type>
            <name>queryMessages</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>queryMessages-3</anchor>
            <arglist>(const QMessageFilter &amp; filter, const QString &amp; body, QMessageDataComparator::MatchFlags matchFlags, const QMessageSortOrder &amp; sortOrder, uint limit, uint offset) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageIdList</type>
            <name>queryMessages</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>queryMessages-4</anchor>
            <arglist>(const QMessageFilter &amp; filter, const QString &amp; body, QMessageDataComparator::MatchFlags matchFlags, const QList&lt;QMessageSortOrder&gt; &amp; sortOrders, uint limit, uint offset) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageFolderIdList</type>
            <name>queryFolders</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>queryFolders</anchor>
            <arglist>(const QMessageFolderFilter &amp; filter, const QMessageFolderSortOrder &amp; sortOrder, uint limit, uint offset) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageFolderIdList</type>
            <name>queryFolders</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>queryFolders-2</anchor>
            <arglist>(const QMessageFolderFilter &amp; filter, const QList&lt;QMessageFolderSortOrder&gt; &amp; sortOrders, uint limit, uint offset) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageAccountIdList</type>
            <name>queryAccounts</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>queryAccounts</anchor>
            <arglist>(const QMessageAccountFilter &amp; filter, const QMessageAccountSortOrder &amp; sortOrder, uint limit, uint offset) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageAccountIdList</type>
            <name>queryAccounts</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>queryAccounts-2</anchor>
            <arglist>(const QMessageAccountFilter &amp; filter, const QList&lt;QMessageAccountSortOrder&gt; &amp; sortOrders, uint limit, uint offset) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>countMessages</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>countMessages</anchor>
            <arglist>(const QMessageFilter &amp; filter) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>countFolders</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>countFolders</anchor>
            <arglist>(const QMessageFolderFilter &amp; filter) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>countAccounts</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>countAccounts</anchor>
            <arglist>(const QMessageAccountFilter &amp; filter) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addMessage</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>addMessage</anchor>
            <arglist>(QMessage * message)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>updateMessage</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>updateMessage</anchor>
            <arglist>(QMessage * message)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeMessage</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>removeMessage</anchor>
            <arglist>(const QMessageId &amp; id, RemovalOption option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeMessages</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>removeMessages</anchor>
            <arglist>(const QMessageFilter &amp; filter, RemovalOption option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessage</type>
            <name>message</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>message</anchor>
            <arglist>(const QMessageId &amp; id) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageFolder</type>
            <name>folder</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>folder</anchor>
            <arglist>(const QMessageFolderId &amp; id) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageAccount</type>
            <name>account</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>account</anchor>
            <arglist>(const QMessageAccountId &amp; id) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NotificationFilterId</type>
            <name>registerNotificationFilter</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>registerNotificationFilter</anchor>
            <arglist>(const QMessageFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unregisterNotificationFilter</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>unregisterNotificationFilter</anchor>
            <arglist>(NotificationFilterId notificationFilterId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>messageAdded</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>messageAdded</anchor>
            <arglist>(const QMessageId &amp; id, const QMessageManager::NotificationFilterIdSet &amp; matchingFilterIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>messageRemoved</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>messageRemoved</anchor>
            <arglist>(const QMessageId &amp; id, const QMessageManager::NotificationFilterIdSet &amp; matchingFilterIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>messageUpdated</name>
            <anchorfile>qmessagemanager.html</anchorfile>
            <anchor>messageUpdated</anchor>
            <arglist>(const QMessageId &amp; id, const QMessageManager::NotificationFilterIdSet &amp; matchingFilterIds)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemDateTimePeriodFilter</name>
        <filename>qorganizeritemdatetimeperiodfilter.html</filename>
        <base>QOrganizerItemFilter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemDateTimePeriodFilter</name>
            <anchorfile>qorganizeritemdatetimeperiodfilter.html</anchorfile>
            <anchor>QOrganizerItemDateTimePeriodFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemDateTimePeriodFilter</name>
            <anchorfile>qorganizeritemdatetimeperiodfilter.html</anchorfile>
            <anchor>QOrganizerItemDateTimePeriodFilter-2</anchor>
            <arglist>(const QOrganizerItemFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStartPeriod</name>
            <anchorfile>qorganizeritemdatetimeperiodfilter.html</anchorfile>
            <anchor>setStartPeriod</anchor>
            <arglist>(const QDateTime &amp; start)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEndPeriod</name>
            <anchorfile>qorganizeritemdatetimeperiodfilter.html</anchorfile>
            <anchor>setEndPeriod</anchor>
            <arglist>(const QDateTime &amp; end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>startPeriod</name>
            <anchorfile>qorganizeritemdatetimeperiodfilter.html</anchorfile>
            <anchor>startPeriod</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>endPeriod</name>
            <anchorfile>qorganizeritemdatetimeperiodfilter.html</anchorfile>
            <anchor>endPeriod</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVersitContactExporterDetailHandler</name>
        <filename>qversitcontactexporterdetailhandler.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QVersitContactExporterDetailHandler</name>
            <anchorfile>qversitcontactexporterdetailhandler.html</anchorfile>
            <anchor>dtor.QVersitContactExporterDetailHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>preProcessDetail</name>
            <anchorfile>qversitcontactexporterdetailhandler.html</anchorfile>
            <anchor>preProcessDetail</anchor>
            <arglist>(const QContact &amp; contact, const QContactDetail &amp; detail, QVersitDocument * document) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>postProcessDetail</name>
            <anchorfile>qversitcontactexporterdetailhandler.html</anchorfile>
            <anchor>postProcessDetail</anchor>
            <arglist>(const QContact &amp; contact, const QContactDetail &amp; detail, bool alreadyProcessed, QVersitDocument * document) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVersitContactExporterDetailHandlerV2</name>
        <filename>qversitcontactexporterdetailhandlerv2.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVersitContactExporterDetailHandlerV2 *</type>
            <name>createBackupHandler</name>
            <anchorfile>qversitcontactexporterdetailhandlerv2.html</anchorfile>
            <anchor>createBackupHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QVersitContactExporterDetailHandlerV2</name>
            <anchorfile>qversitcontactexporterdetailhandlerv2.html</anchorfile>
            <anchor>dtor.QVersitContactExporterDetailHandlerV2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>detailProcessed</name>
            <anchorfile>qversitcontactexporterdetailhandlerv2.html</anchorfile>
            <anchor>detailProcessed</anchor>
            <arglist>(const QContact &amp; contact, const QContactDetail &amp; detail, const QSet&lt;QString&gt; &amp; processedFields, const QVersitDocument &amp; document, QList&lt;QVersitProperty&gt; * toBeRemoved, QList&lt;QVersitProperty&gt; * toBeAdded) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>contactProcessed</name>
            <anchorfile>qversitcontactexporterdetailhandlerv2.html</anchorfile>
            <anchor>contactProcessed</anchor>
            <arglist>(const QContact &amp; contact, QVersitDocument * document) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>version</name>
            <anchorfile>qversitcontactexporterdetailhandlerv2.html</anchorfile>
            <anchor>version</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVersitContactExporter</name>
        <filename>qversitcontactexporter.html</filename>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EmptyContactError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoNameError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersitContactExporter</name>
            <anchorfile>qversitcontactexporter.html</anchorfile>
            <anchor>QVersitContactExporter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QVersitContactExporter</name>
            <anchorfile>qversitcontactexporter.html</anchorfile>
            <anchor>dtor.QVersitContactExporter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exportContacts</name>
            <anchorfile>qversitcontactexporter.html</anchorfile>
            <anchor>exportContacts</anchor>
            <arglist>(const QList&lt;QContact&gt; &amp; contacts, QVersitDocument::VersitType versitType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QVersitDocument&gt;</type>
            <name>documents</name>
            <anchorfile>qversitcontactexporter.html</anchorfile>
            <anchor>documents</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;int, Error&gt;</type>
            <name>errors</name>
            <anchorfile>qversitcontactexporter.html</anchorfile>
            <anchor>errors</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDetailHandler</name>
            <anchorfile>qversitcontactexporter.html</anchorfile>
            <anchor>setDetailHandler</anchor>
            <arglist>(QVersitContactExporterDetailHandlerV2 * handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResourceHandler</name>
            <anchorfile>qversitcontactexporter.html</anchorfile>
            <anchor>setResourceHandler</anchor>
            <arglist>(QVersitResourceHandler * handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVersitResourceHandler *</type>
            <name>resourceHandler</name>
            <anchorfile>qversitcontactexporter.html</anchorfile>
            <anchor>resourceHandler</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemDetailDefinitionFetchRequest</name>
        <filename>qorganizeritemdetaildefinitionfetchrequest.html</filename>
        <base>QOrganizerItemAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemDetailDefinitionFetchRequest</name>
            <anchorfile>qorganizeritemdetaildefinitionfetchrequest.html</anchorfile>
            <anchor>QOrganizerItemDetailDefinitionFetchRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefinitionName</name>
            <anchorfile>qorganizeritemdetaildefinitionfetchrequest.html</anchorfile>
            <anchor>setDefinitionName</anchor>
            <arglist>(const QString &amp; definitionName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefinitionNames</name>
            <anchorfile>qorganizeritemdetaildefinitionfetchrequest.html</anchorfile>
            <anchor>setDefinitionNames</anchor>
            <arglist>(const QStringList &amp; names)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>definitionNames</name>
            <anchorfile>qorganizeritemdetaildefinitionfetchrequest.html</anchorfile>
            <anchor>definitionNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemType</name>
            <anchorfile>qorganizeritemdetaildefinitionfetchrequest.html</anchorfile>
            <anchor>setItemType</anchor>
            <arglist>(const QString &amp; organizeritemType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>itemType</name>
            <anchorfile>qorganizeritemdetaildefinitionfetchrequest.html</anchorfile>
            <anchor>itemType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;QString, QOrganizerItemDetailDefinition&gt;</type>
            <name>definitions</name>
            <anchorfile>qorganizeritemdetaildefinitionfetchrequest.html</anchorfile>
            <anchor>definitions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;int, QOrganizerItemManager::Error&gt;</type>
            <name>errorMap</name>
            <anchorfile>qorganizeritemdetaildefinitionfetchrequest.html</anchorfile>
            <anchor>errorMap</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoCoordinate</name>
        <filename>qgeocoordinate.html</filename>
        <member kind="enum">
            <name>CoordinateType</name>
            <anchor>CoordinateType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidCoordinate">
            <anchor>CoordinateType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Coordinate2D">
            <anchor>CoordinateType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Coordinate3D">
            <anchor>CoordinateType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CoordinateFormat</name>
            <anchor>CoordinateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Degrees">
            <anchor>CoordinateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DegreesWithHemisphere">
            <anchor>CoordinateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DegreesMinutes">
            <anchor>CoordinateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DegreesMinutesWithHemisphere">
            <anchor>CoordinateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DegreesMinutesSeconds">
            <anchor>CoordinateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DegreesMinutesSecondsWithHemisphere">
            <anchor>CoordinateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoCoordinate</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>QGeoCoordinate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoCoordinate</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>QGeoCoordinate-2</anchor>
            <arglist>(double latitude, double longitude)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoCoordinate</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>QGeoCoordinate-3</anchor>
            <arglist>(double latitude, double longitude, double altitude)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoCoordinate</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>QGeoCoordinate-4</anchor>
            <arglist>(const QGeoCoordinate &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoCoordinate</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>dtor.QGeoCoordinate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QGeoCoordinate &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QGeoCoordinate &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QGeoCoordinate &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CoordinateType</type>
            <name>type</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLatitude</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>setLatitude</anchor>
            <arglist>(double latitude)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>latitude</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>latitude</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLongitude</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>setLongitude</anchor>
            <arglist>(double longitude)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>longitude</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>longitude</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAltitude</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>setAltitude</anchor>
            <arglist>(double altitude)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>altitude</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>altitude</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>distanceTo</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>distanceTo</anchor>
            <arglist>(const QGeoCoordinate &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>azimuthTo</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>azimuthTo</anchor>
            <arglist>(const QGeoCoordinate &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qgeocoordinate.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>(CoordinateFormat format) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVersitDocument</name>
        <filename>qversitdocument.html</filename>
        <member kind="enum">
            <name>VersitType</name>
            <anchor>VersitType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidType">
            <anchor>VersitType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VCard21Type">
            <anchor>VersitType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VCard30Type">
            <anchor>VersitType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ICalendar20Type">
            <anchor>VersitType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersitDocument</name>
            <anchorfile>qversitdocument.html</anchorfile>
            <anchor>QVersitDocument</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersitDocument</name>
            <anchorfile>qversitdocument.html</anchorfile>
            <anchor>QVersitDocument-2</anchor>
            <arglist>(const QVersitDocument &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersitDocument</name>
            <anchorfile>qversitdocument.html</anchorfile>
            <anchor>QVersitDocument-3</anchor>
            <arglist>(VersitType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QVersitDocument</name>
            <anchorfile>qversitdocument.html</anchorfile>
            <anchor>dtor.QVersitDocument</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVersitDocument &amp;</type>
            <name>operator=</name>
            <anchorfile>qversitdocument.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QVersitDocument &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qversitdocument.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QVersitDocument &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qversitdocument.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QVersitDocument &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qversitdocument.html</anchorfile>
            <anchor>setType</anchor>
            <arglist>(VersitType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>VersitType</type>
            <name>type</name>
            <anchorfile>qversitdocument.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComponentType</name>
            <anchorfile>qversitdocument.html</anchorfile>
            <anchor>setComponentType</anchor>
            <arglist>(QString componentType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>componentType</name>
            <anchorfile>qversitdocument.html</anchorfile>
            <anchor>componentType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addProperty</name>
            <anchorfile>qversitdocument.html</anchorfile>
            <anchor>addProperty</anchor>
            <arglist>(const QVersitProperty &amp; property)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeProperty</name>
            <anchorfile>qversitdocument.html</anchorfile>
            <anchor>removeProperty</anchor>
            <arglist>(const QVersitProperty &amp; property)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeProperties</name>
            <anchorfile>qversitdocument.html</anchorfile>
            <anchor>removeProperties</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QVersitProperty&gt;</type>
            <name>properties</name>
            <anchorfile>qversitdocument.html</anchorfile>
            <anchor>properties</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addSubDocument</name>
            <anchorfile>qversitdocument.html</anchorfile>
            <anchor>addSubDocument</anchor>
            <arglist>(const QVersitDocument &amp; subdocument)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSubDocuments</name>
            <anchorfile>qversitdocument.html</anchorfile>
            <anchor>setSubDocuments</anchor>
            <arglist>(const QList&lt;QVersitDocument&gt; &amp; documents)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QVersitDocument&gt;</type>
            <name>subDocuments</name>
            <anchorfile>qversitdocument.html</anchorfile>
            <anchor>subDocuments</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qversitdocument.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qversitdocument.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactManagerEngine</name>
        <filename>qcontactmanagerengine.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactManagerEngine</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>QContactManagerEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>managerName</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMap&lt;QString, QString&gt;</type>
            <name>managerParameters</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>managerParameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>managerVersion</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>managerVersion</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerUri</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>managerUri</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QContactLocalId&gt;</type>
            <name>contactIds</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>contactIds</anchor>
            <arglist>(const QContactFilter &amp; filter, const QList&lt;QContactSortOrder&gt; &amp; sortOrders, QContactManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QContact&gt;</type>
            <name>contacts</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>contacts</anchor>
            <arglist>(const QContactFilter &amp; filter, const QList&lt;QContactSortOrder&gt; &amp; sortOrders, const QContactFetchHint &amp; fetchHint, QContactManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QContact</type>
            <name>contact</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>contact</anchor>
            <arglist>(const QContactLocalId &amp; contactId, const QContactFetchHint &amp; fetchHint, QContactManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>saveContact</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>saveContact</anchor>
            <arglist>(QContact * contact, QContactManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeContact</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>removeContact</anchor>
            <arglist>(const QContactLocalId &amp; contactId, QContactManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>saveRelationship</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>saveRelationship</anchor>
            <arglist>(QContactRelationship * relationship, QContactManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeRelationship</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>removeRelationship</anchor>
            <arglist>(const QContactRelationship &amp; relationship, QContactManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>saveContacts</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>saveContacts</anchor>
            <arglist>(QList&lt;QContact&gt; * contacts, QMap&lt;int, QContactManager::Error&gt; * errorMap, QContactManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeContacts</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>removeContacts</anchor>
            <arglist>(const QList&lt;QContactLocalId&gt; &amp; contactIds, QMap&lt;int, QContactManager::Error&gt; * errorMap, QContactManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QContact</type>
            <name>compatibleContact</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>compatibleContact</anchor>
            <arglist>(const QContact &amp; original, QContactManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>synthesizedDisplayLabel</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>synthesizedDisplayLabel</anchor>
            <arglist>(const QContact &amp; contact, QContactManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setSelfContactId</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>setSelfContactId</anchor>
            <arglist>(const QContactLocalId &amp; contactId, QContactManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QContactLocalId</type>
            <name>selfContactId</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>selfContactId</anchor>
            <arglist>(QContactManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QContactRelationship&gt;</type>
            <name>relationships</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>relationships</anchor>
            <arglist>(const QString &amp; relationshipType, const QContactId &amp; participantId, QContactRelationship::Role role, QContactManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>saveRelationships</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>saveRelationships</anchor>
            <arglist>(QList&lt;QContactRelationship&gt; * relationships, QMap&lt;int, QContactManager::Error&gt; * errorMap, QContactManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeRelationships</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>removeRelationships</anchor>
            <arglist>(const QList&lt;QContactRelationship&gt; &amp; relationships, QMap&lt;int, QContactManager::Error&gt; * errorMap, QContactManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>validateContact</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>validateContact</anchor>
            <arglist>(const QContact &amp; contact, QContactManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>validateDefinition</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>validateDefinition</anchor>
            <arglist>(const QContactDetailDefinition &amp; definition, QContactManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMap&lt;QString, QContactDetailDefinition&gt;</type>
            <name>detailDefinitions</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>detailDefinitions</anchor>
            <arglist>(const QString &amp; contactType, QContactManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QContactDetailDefinition</type>
            <name>detailDefinition</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>detailDefinition</anchor>
            <arglist>(const QString &amp; definitionName, const QString &amp; contactType, QContactManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>saveDetailDefinition</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>saveDetailDefinition</anchor>
            <arglist>(const QContactDetailDefinition &amp; def, const QString &amp; contactType, QContactManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeDetailDefinition</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>removeDetailDefinition</anchor>
            <arglist>(const QString &amp; definitionName, const QString &amp; contactType, QContactManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>requestDestroyed</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>requestDestroyed</anchor>
            <arglist>(QContactAbstractRequest * req)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>startRequest</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>startRequest</anchor>
            <arglist>(QContactAbstractRequest * req)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>cancelRequest</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>cancelRequest</anchor>
            <arglist>(QContactAbstractRequest * req)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForRequestFinished</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>waitForRequestFinished</anchor>
            <arglist>(QContactAbstractRequest * req, int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasFeature</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>hasFeature</anchor>
            <arglist>(QContactManager::ManagerFeature feature, const QString &amp; contactType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isRelationshipTypeSupported</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>isRelationshipTypeSupported</anchor>
            <arglist>(const QString &amp; relationshipType, const QString &amp; contactType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isFilterSupported</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>isFilterSupported</anchor>
            <arglist>(const QContactFilter &amp; filter) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QVariant::Type&gt;</type>
            <name>supportedDataTypes</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>supportedDataTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>supportedContactTypes</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>supportedContactTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMap&lt;QString, QMap&lt;QString, QContactDetailDefinition&gt; &gt;</type>
            <name>schemaDefinitions</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>schemaDefinitions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataChanged</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>dataChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>contactsAdded</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>contactsAdded</anchor>
            <arglist>(const QList&lt;QContactLocalId&gt; &amp; contactIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>contactsChanged</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>contactsChanged</anchor>
            <arglist>(const QList&lt;QContactLocalId&gt; &amp; contactIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>contactsRemoved</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>contactsRemoved</anchor>
            <arglist>(const QList&lt;QContactLocalId&gt; &amp; contactIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>relationshipsAdded</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>relationshipsAdded</anchor>
            <arglist>(const QList&lt;QContactLocalId&gt; &amp; affectedContactIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>relationshipsRemoved</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>relationshipsRemoved</anchor>
            <arglist>(const QList&lt;QContactLocalId&gt; &amp; affectedContactIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selfContactIdChanged</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>selfContactIdChanged</anchor>
            <arglist>(const QContactLocalId &amp; oldId, const QContactLocalId &amp; newId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateRequestState</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>updateRequestState</anchor>
            <arglist>(QContactAbstractRequest * req, QContactAbstractRequest::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateContactLocalIdFetchRequest</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>updateContactLocalIdFetchRequest</anchor>
            <arglist>(QContactLocalIdFetchRequest * req, const QList&lt;QContactLocalId&gt; &amp; result, QContactManager::Error error, QContactAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateContactFetchRequest</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>updateContactFetchRequest</anchor>
            <arglist>(QContactFetchRequest * req, const QList&lt;QContact&gt; &amp; result, QContactManager::Error error, QContactAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateContactRemoveRequest</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>updateContactRemoveRequest</anchor>
            <arglist>(QContactRemoveRequest * req, QContactManager::Error error, const QMap&lt;int, QContactManager::Error&gt; &amp; errorMap, QContactAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateContactSaveRequest</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>updateContactSaveRequest</anchor>
            <arglist>(QContactSaveRequest * req, const QList&lt;QContact&gt; &amp; result, QContactManager::Error error, const QMap&lt;int, QContactManager::Error&gt; &amp; errorMap, QContactAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateDefinitionSaveRequest</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>updateDefinitionSaveRequest</anchor>
            <arglist>(QContactDetailDefinitionSaveRequest * req, const QList&lt;QContactDetailDefinition&gt; &amp; result, QContactManager::Error error, const QMap&lt;int, QContactManager::Error&gt; &amp; errorMap, QContactAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateDefinitionRemoveRequest</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>updateDefinitionRemoveRequest</anchor>
            <arglist>(QContactDetailDefinitionRemoveRequest * req, QContactManager::Error error, const QMap&lt;int, QContactManager::Error&gt; &amp; errorMap, QContactAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateDefinitionFetchRequest</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>updateDefinitionFetchRequest</anchor>
            <arglist>(QContactDetailDefinitionFetchRequest * req, const QMap&lt;QString, QContactDetailDefinition&gt; &amp; result, QContactManager::Error error, const QMap&lt;int, QContactManager::Error&gt; &amp; errorMap, QContactAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateRelationshipSaveRequest</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>updateRelationshipSaveRequest</anchor>
            <arglist>(QContactRelationshipSaveRequest * req, const QList&lt;QContactRelationship&gt; &amp; result, QContactManager::Error error, const QMap&lt;int, QContactManager::Error&gt; &amp; errorMap, QContactAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateRelationshipRemoveRequest</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>updateRelationshipRemoveRequest</anchor>
            <arglist>(QContactRelationshipRemoveRequest * req, QContactManager::Error error, const QMap&lt;int, QContactManager::Error&gt; &amp; errorMap, QContactAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateRelationshipFetchRequest</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>updateRelationshipFetchRequest</anchor>
            <arglist>(QContactRelationshipFetchRequest * req, const QList&lt;QContactRelationship&gt; &amp; result, QContactManager::Error error, QContactAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDetailAccessConstraints</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>setDetailAccessConstraints</anchor>
            <arglist>(QContactDetail * detail, QFlags&lt;QContactDetail::AccessConstraint&gt; constraints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setContactDisplayLabel</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>setContactDisplayLabel</anchor>
            <arglist>(QContact * contact, const QString &amp; displayLabel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setContactRelationships</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>setContactRelationships</anchor>
            <arglist>(QContact * contact, const QList&lt;QContactRelationship&gt; &amp; relationships)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>compareContact</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>compareContact</anchor>
            <arglist>(const QContact &amp; a, const QContact &amp; b, const QList&lt;QContactSortOrder&gt; &amp; sortOrders)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>addSorted</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>addSorted</anchor>
            <arglist>(QList&lt;QContact&gt; * sorted, const QContact &amp; toAdd, const QList&lt;QContactSortOrder&gt; &amp; sortOrders)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>compareVariant</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>compareVariant</anchor>
            <arglist>(const QVariant &amp; first, const QVariant &amp; second, Qt::CaseSensitivity sensitivity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>testFilter</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>testFilter</anchor>
            <arglist>(const QContactFilter &amp; filter, const QContact &amp; contact)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QContactLocalId&gt;</type>
            <name>sortContacts</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>sortContacts</anchor>
            <arglist>(const QList&lt;QContact&gt; &amp; cs, const QList&lt;QContactSortOrder&gt; &amp; sortOrders)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QContactFilter</type>
            <name>canonicalizedFilter</name>
            <anchorfile>qcontactmanagerengine.html</anchorfile>
            <anchor>canonicalizedFilter</anchor>
            <arglist>(const QContactFilter &amp; filter)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaPlaylist</name>
        <filename>qmediaplaylist.html</filename>
        <base>QMediaBindableInterface</base>
        <member kind="property" type="QMediaPlaylist::PlaybackMode">
            <name>playbackMode</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>playbackMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QMediaContent">
            <name>currentMedia</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>currentMedia-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>currentIndex</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>PlaybackMode</name>
            <anchor>PlaybackMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CurrentItemOnce">
            <anchor>PlaybackMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CurrentItemInLoop">
            <anchor>PlaybackMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sequential">
            <anchor>PlaybackMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Loop">
            <anchor>PlaybackMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Random">
            <anchor>PlaybackMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FormatError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FormatNotSupportedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NetworkError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AccessDeniedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaPlaylist</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>QMediaPlaylist</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMediaPlaylist</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>dtor.QMediaPlaylist</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMediaObject *</type>
            <name>mediaObject</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>mediaObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PlaybackMode</type>
            <name>playbackMode</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>playbackMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlaybackMode</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>playbackMode-prop</anchor>
            <arglist>(PlaybackMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentIndex</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaContent</type>
            <name>currentMedia</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>currentMedia-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>nextIndex</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>nextIndex</anchor>
            <arglist>(int steps) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>previousIndex</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>previousIndex</anchor>
            <arglist>(int steps) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaContent</type>
            <name>media</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>media</anchor>
            <arglist>(int index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mediaCount</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>mediaCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadOnly</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>isReadOnly</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addMedia</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>addMedia</anchor>
            <arglist>(const QMediaContent &amp; content)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addMedia</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>addMedia-2</anchor>
            <arglist>(const QList&lt;QMediaContent&gt; &amp; items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>insertMedia</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>insertMedia</anchor>
            <arglist>(int pos, const QMediaContent &amp; content)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>insertMedia</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>insertMedia-2</anchor>
            <arglist>(int pos, const QList&lt;QMediaContent&gt; &amp; items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeMedia</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>removeMedia</anchor>
            <arglist>(int pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeMedia</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>removeMedia-2</anchor>
            <arglist>(int start, int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>clear</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>load</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>load</anchor>
            <arglist>(const QUrl &amp; location, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>load</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>load-2</anchor>
            <arglist>(QIODevice * device, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>save</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>save</anchor>
            <arglist>(const QUrl &amp; location, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>save</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>save-2</anchor>
            <arglist>(QIODevice * device, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shuffle</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>shuffle</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>next</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>previous</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentIndex</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>currentIndex-prop</anchor>
            <arglist>(int playlistPosition)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentIndexChanged</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>currentIndexChanged</anchor>
            <arglist>(int position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>playbackModeChanged</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>playbackModeChanged</anchor>
            <arglist>(QMediaPlaylist::PlaybackMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentMediaChanged</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>currentMediaChanged</anchor>
            <arglist>(const QMediaContent &amp; content)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mediaAboutToBeInserted</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>mediaAboutToBeInserted</anchor>
            <arglist>(int start, int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mediaInserted</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>mediaInserted</anchor>
            <arglist>(int start, int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mediaAboutToBeRemoved</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>mediaAboutToBeRemoved</anchor>
            <arglist>(int start, int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mediaRemoved</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>mediaRemoved</anchor>
            <arglist>(int start, int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mediaChanged</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>mediaChanged</anchor>
            <arglist>(int start, int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>loaded</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>loaded</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>loadFailed</name>
            <anchorfile>qmediaplaylist.html</anchorfile>
            <anchor>loadFailed</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGalleryItemListModel</name>
        <filename>qgalleryitemlistmodel.html</filename>
        <member kind="property" type="QGalleryItemList *">
            <name>itemList</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>itemList-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>autoUpdateCursorPosition</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>autoUpdateCursorPosition-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryItemListModel</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>QGalleryItemListModel</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGalleryItemListModel</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>dtor.QGalleryItemListModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGalleryItemList *</type>
            <name>itemList</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>itemList-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoUpdateCursorPosition</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>autoUpdateCursorPosition-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoUpdateCursorPosition</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>autoUpdateCursorPosition-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;int, QString&gt;</type>
            <name>roleProperties</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>roleProperties</anchor>
            <arglist>(int column) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRoleProperties</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>setRoleProperties</anchor>
            <arglist>(int column, const QHash&lt;int, QString&gt; &amp; properties)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>rowCount</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>(const QModelIndex &amp; parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>columnCount</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>columnCount</anchor>
            <arglist>(const QModelIndex &amp; parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addColumn</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>addColumn</anchor>
            <arglist>(const QHash&lt;int, QString&gt; &amp; properties)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addColumn</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>addColumn-2</anchor>
            <arglist>(const QString &amp; property, int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertColumn</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>insertColumn</anchor>
            <arglist>(int index, const QHash&lt;int, QString&gt; &amp; properties)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertColumn</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>insertColumn-2</anchor>
            <arglist>(int index, const QString &amp; property, int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeColumn</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>removeColumn</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>index</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>index</anchor>
            <arglist>(int row, int column, const QModelIndex &amp; parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>parent</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>(const QModelIndex &amp; parent) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>data</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QModelIndex &amp; index, int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setData</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QModelIndex &amp; index, const QVariant &amp; value, int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>headerData</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>headerData</anchor>
            <arglist>(int section, Qt::Orientation orientation, int role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setHeaderData</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>setHeaderData</anchor>
            <arglist>(int section, Qt::Orientation orientation, const QVariant &amp; value, int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>(const QModelIndex &amp; index) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemList</name>
            <anchorfile>qgalleryitemlistmodel.html</anchorfile>
            <anchor>itemList-prop</anchor>
            <arglist>(QGalleryItemList * list)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVersitReader</name>
        <filename>qversitreader.html</filename>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnspecifiedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IOError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutOfMemoryError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotReadyError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ParseError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InactiveState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActiveState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CanceledState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FinishedState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersitReader</name>
            <anchorfile>qversitreader.html</anchorfile>
            <anchor>QVersitReader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersitReader</name>
            <anchorfile>qversitreader.html</anchorfile>
            <anchor>QVersitReader-2</anchor>
            <arglist>(QIODevice * inputDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersitReader</name>
            <anchorfile>qversitreader.html</anchorfile>
            <anchor>QVersitReader-3</anchor>
            <arglist>(const QByteArray &amp; inputData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QVersitReader</name>
            <anchorfile>qversitreader.html</anchorfile>
            <anchor>dtor.QVersitReader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qversitreader.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice * device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qversitreader.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qversitreader.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QByteArray &amp; inputData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultCodec</name>
            <anchorfile>qversitreader.html</anchorfile>
            <anchor>setDefaultCodec</anchor>
            <arglist>(QTextCodec * codec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCodec *</type>
            <name>defaultCodec</name>
            <anchorfile>qversitreader.html</anchorfile>
            <anchor>defaultCodec</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QVersitDocument&gt;</type>
            <name>results</name>
            <anchorfile>qversitreader.html</anchorfile>
            <anchor>results</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>State</type>
            <name>state</name>
            <anchorfile>qversitreader.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qversitreader.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startReading</name>
            <anchorfile>qversitreader.html</anchorfile>
            <anchor>startReading</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancel</name>
            <anchorfile>qversitreader.html</anchorfile>
            <anchor>cancel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qversitreader.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QVersitReader::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resultsAvailable</name>
            <anchorfile>qversitreader.html</anchorfile>
            <anchor>resultsAvailable</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoMappingManagerEngine</name>
        <filename>qgeomappingmanagerengine.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoMappingManagerEngine</name>
            <anchorfile>qgeomappingmanagerengine.html</anchorfile>
            <anchor>QGeoMappingManagerEngine</anchor>
            <arglist>(const QMap&lt;QString, QString&gt; &amp; parameters, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeoMappingManagerEngine</name>
            <anchorfile>qgeomappingmanagerengine.html</anchorfile>
            <anchor>dtor.QGeoMappingManagerEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerName</name>
            <anchorfile>qgeomappingmanagerengine.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;QString, QString&gt;</type>
            <name>managerParameters</name>
            <anchorfile>qgeomappingmanagerengine.html</anchorfile>
            <anchor>managerParameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>managerVersion</name>
            <anchorfile>qgeomappingmanagerengine.html</anchorfile>
            <anchor>managerVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QGeoMapData *</type>
            <name>createMapData</name>
            <anchorfile>qgeomappingmanagerengine.html</anchorfile>
            <anchor>createMapData</anchor>
            <arglist>(QGeoMapWidget * widget) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>removeMapData</name>
            <anchorfile>qgeomappingmanagerengine.html</anchorfile>
            <anchor>removeMapData</anchor>
            <arglist>(QGeoMapData * mapData)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>updateMapImage</name>
            <anchorfile>qgeomappingmanagerengine.html</anchorfile>
            <anchor>updateMapImage</anchor>
            <arglist>(QGeoMapData * mapData) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGeoMapWidget::MapType&gt;</type>
            <name>supportedMapTypes</name>
            <anchorfile>qgeomappingmanagerengine.html</anchorfile>
            <anchor>supportedMapTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>minimumImageSize</name>
            <anchorfile>qgeomappingmanagerengine.html</anchorfile>
            <anchor>minimumImageSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>maximumImageSize</name>
            <anchorfile>qgeomappingmanagerengine.html</anchorfile>
            <anchor>maximumImageSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>minimumZoomLevel</name>
            <anchorfile>qgeomappingmanagerengine.html</anchorfile>
            <anchor>minimumZoomLevel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>maximumZoomLevel</name>
            <anchorfile>qgeomappingmanagerengine.html</anchorfile>
            <anchor>maximumZoomLevel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSupportedMapTypes</name>
            <anchorfile>qgeomappingmanagerengine.html</anchorfile>
            <anchor>setSupportedMapTypes</anchor>
            <arglist>(const QList&lt;QGeoMapWidget::MapType&gt; &amp; mapTypes)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumZoomLevel</name>
            <anchorfile>qgeomappingmanagerengine.html</anchorfile>
            <anchor>setMinimumZoomLevel</anchor>
            <arglist>(qreal minimumZoom)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumZoomLevel</name>
            <anchorfile>qgeomappingmanagerengine.html</anchorfile>
            <anchor>setMaximumZoomLevel</anchor>
            <arglist>(qreal maximumZoom)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumImageSize</name>
            <anchorfile>qgeomappingmanagerengine.html</anchorfile>
            <anchor>setMinimumImageSize</anchor>
            <arglist>(const QSize &amp; minimumImageSize)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setMaximumImageSize</name>
            <anchorfile>qgeomappingmanagerengine.html</anchorfile>
            <anchor>setMaximumImageSize</anchor>
            <arglist>(const QSize &amp; maximumImageSize)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTelephonyCallInfo</name>
        <filename>qtelephonycallinfo.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTelephonyCallInfo</name>
            <anchorfile>qtelephonycallinfo.html</anchorfile>
            <anchor>QTelephonyCallInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTelephonyCallInfo</name>
            <anchorfile>qtelephonycallinfo.html</anchorfile>
            <anchor>QTelephonyCallInfo-2</anchor>
            <arglist>(const QTelephonyCallInfo &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTelephonyCallInfo</name>
            <anchorfile>qtelephonycallinfo.html</anchorfile>
            <anchor>dtor.QTelephonyCallInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>CallType</name>
            <anchor>CallType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Any">
            <anchor>CallType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Text">
            <anchor>CallType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Data">
            <anchor>CallType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Video">
            <anchor>CallType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Voice">
            <anchor>CallType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Other">
            <anchor>CallType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CallStatus</name>
            <anchor>CallStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Idle">
            <anchor>CallStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dialing">
            <anchor>CallStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Alerting">
            <anchor>CallStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Connected">
            <anchor>CallStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Disconnecting">
            <anchor>CallStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Incomming">
            <anchor>CallStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OnHold">
            <anchor>CallStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>remotePartyIdentifier</name>
            <anchorfile>qtelephonycallinfo.html</anchorfile>
            <anchor>remotePartyIdentifier</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CallType</type>
            <name>type</name>
            <anchorfile>qtelephonycallinfo.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>subTyp</name>
            <anchorfile>qtelephonycallinfo.html</anchorfile>
            <anchor>subTyp</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CallStatus</type>
            <name>status</name>
            <anchorfile>qtelephonycallinfo.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qtelephonycallinfo.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const QString &amp; key) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemDetailDefinitionSaveRequest</name>
        <filename>qorganizeritemdetaildefinitionsaverequest.html</filename>
        <base>QOrganizerItemAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemDetailDefinitionSaveRequest</name>
            <anchorfile>qorganizeritemdetaildefinitionsaverequest.html</anchorfile>
            <anchor>QOrganizerItemDetailDefinitionSaveRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefinition</name>
            <anchorfile>qorganizeritemdetaildefinitionsaverequest.html</anchorfile>
            <anchor>setDefinition</anchor>
            <arglist>(const QOrganizerItemDetailDefinition &amp; definition)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefinitions</name>
            <anchorfile>qorganizeritemdetaildefinitionsaverequest.html</anchorfile>
            <anchor>setDefinitions</anchor>
            <arglist>(const QList&lt;QOrganizerItemDetailDefinition&gt; &amp; definitions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemType</name>
            <anchorfile>qorganizeritemdetaildefinitionsaverequest.html</anchorfile>
            <anchor>setItemType</anchor>
            <arglist>(const QString &amp; organizeritemType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>itemType</name>
            <anchorfile>qorganizeritemdetaildefinitionsaverequest.html</anchorfile>
            <anchor>itemType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItemDetailDefinition&gt;</type>
            <name>definitions</name>
            <anchorfile>qorganizeritemdetaildefinitionsaverequest.html</anchorfile>
            <anchor>definitions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;int, QOrganizerItemManager::Error&gt;</type>
            <name>errorMap</name>
            <anchorfile>qorganizeritemdetaildefinitionsaverequest.html</anchorfile>
            <anchor>errorMap</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVideoDeviceControl</name>
        <filename>qvideodevicecontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QVideoDeviceControl</name>
            <anchorfile>qvideodevicecontrol.html</anchorfile>
            <anchor>dtor.QVideoDeviceControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>deviceCount</name>
            <anchorfile>qvideodevicecontrol.html</anchorfile>
            <anchor>deviceCount</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>deviceName</name>
            <anchorfile>qvideodevicecontrol.html</anchorfile>
            <anchor>deviceName</anchor>
            <arglist>(int index) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>deviceDescription</name>
            <anchorfile>qvideodevicecontrol.html</anchorfile>
            <anchor>deviceDescription</anchor>
            <arglist>(int index) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QIcon</type>
            <name>deviceIcon</name>
            <anchorfile>qvideodevicecontrol.html</anchorfile>
            <anchor>deviceIcon</anchor>
            <arglist>(int index) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>defaultDevice</name>
            <anchorfile>qvideodevicecontrol.html</anchorfile>
            <anchor>defaultDevice</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>selectedDevice</name>
            <anchorfile>qvideodevicecontrol.html</anchorfile>
            <anchor>selectedDevice</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setSelectedDevice</name>
            <anchorfile>qvideodevicecontrol.html</anchorfile>
            <anchor>setSelectedDevice</anchor>
            <arglist>(int index) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectedDeviceChanged</name>
            <anchorfile>qvideodevicecontrol.html</anchorfile>
            <anchor>selectedDeviceChanged</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectedDeviceChanged</name>
            <anchorfile>qvideodevicecontrol.html</anchorfile>
            <anchor>selectedDeviceChanged-2</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>devicesChanged</name>
            <anchorfile>qvideodevicecontrol.html</anchorfile>
            <anchor>devicesChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QVideoDeviceControl</name>
            <anchorfile>qvideodevicecontrol.html</anchorfile>
            <anchor>QVideoDeviceControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemIntersectionFilter</name>
        <filename>qorganizeritemintersectionfilter.html</filename>
        <base>QOrganizerItemFilter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemIntersectionFilter</name>
            <anchorfile>qorganizeritemintersectionfilter.html</anchorfile>
            <anchor>QOrganizerItemIntersectionFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemIntersectionFilter</name>
            <anchorfile>qorganizeritemintersectionfilter.html</anchorfile>
            <anchor>QOrganizerItemIntersectionFilter-2</anchor>
            <arglist>(const QOrganizerItemFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilters</name>
            <anchorfile>qorganizeritemintersectionfilter.html</anchorfile>
            <anchor>setFilters</anchor>
            <arglist>(const QList&lt;QOrganizerItemFilter&gt; &amp; filters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepend</name>
            <anchorfile>qorganizeritemintersectionfilter.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qorganizeritemintersectionfilter.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qorganizeritemintersectionfilter.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemIntersectionFilter &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qorganizeritemintersectionfilter.html</anchorfile>
            <anchor>operator&lt;&lt;</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItemFilter&gt;</type>
            <name>filters</name>
            <anchorfile>qorganizeritemintersectionfilter.html</anchorfile>
            <anchor>filters</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactUnionFilter</name>
        <filename>qcontactunionfilter.html</filename>
        <base>QContactFilter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactUnionFilter</name>
            <anchorfile>qcontactunionfilter.html</anchorfile>
            <anchor>QContactUnionFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactUnionFilter</name>
            <anchorfile>qcontactunionfilter.html</anchorfile>
            <anchor>QContactUnionFilter-2</anchor>
            <arglist>(const QContactFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilters</name>
            <anchorfile>qcontactunionfilter.html</anchorfile>
            <anchor>setFilters</anchor>
            <arglist>(const QList&lt;QContactFilter&gt; &amp; filters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepend</name>
            <anchorfile>qcontactunionfilter.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(const QContactFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qcontactunionfilter.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const QContactFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qcontactunionfilter.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QContactFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactUnionFilter &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qcontactunionfilter.html</anchorfile>
            <anchor>operator&lt;&lt;</anchor>
            <arglist>(const QContactFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactFilter&gt;</type>
            <name>filters</name>
            <anchorfile>qcontactunionfilter.html</anchorfile>
            <anchor>filters</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoServiceProvider</name>
        <filename>qgeoserviceprovider.html</filename>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotSupportedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownParameterError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MissingRequiredParameterError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>availableServiceProviders</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>availableServiceProviders</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoServiceProvider</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>QGeoServiceProvider</anchor>
            <arglist>(const QString &amp; providerName, const QMap&lt;QString, QString&gt; &amp; parameters, QString )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoServiceProvider</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>QGeoServiceProvider-2</anchor>
            <arglist>(const QString &amp; providerName, int providerVersion, const QMap&lt;QString, QString&gt; &amp; parameters, QString )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoServiceProvider</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>dtor.QGeoServiceProvider</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoSearchManager *</type>
            <name>searchManager</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>searchManager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoMappingManager *</type>
            <name>mappingManager</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>mappingManager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRoutingManager *</type>
            <name>routingManager</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>routingManager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qgeoserviceprovider.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaContainerControl</name>
        <filename>qmediacontainercontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMediaContainerControl</name>
            <anchorfile>qmediacontainercontrol.html</anchorfile>
            <anchor>dtor.QMediaContainerControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QStringList</type>
            <name>supportedContainers</name>
            <anchorfile>qmediacontainercontrol.html</anchorfile>
            <anchor>supportedContainers</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>containerMimeType</name>
            <anchorfile>qmediacontainercontrol.html</anchorfile>
            <anchor>containerMimeType</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setContainerMimeType</name>
            <anchorfile>qmediacontainercontrol.html</anchorfile>
            <anchor>setContainerMimeType</anchor>
            <arglist>(const QString &amp; mimeType) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>containerDescription</name>
            <anchorfile>qmediacontainercontrol.html</anchorfile>
            <anchor>containerDescription</anchor>
            <arglist>(const QString &amp; mimeType) const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QMediaContainerControl</name>
            <anchorfile>qmediacontainercontrol.html</anchorfile>
            <anchor>QMediaContainerControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVideoSurfaceFormat</name>
        <filename>qvideosurfaceformat.html</filename>
        <member kind="enum">
            <name>Direction</name>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TopToBottom">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BottomToTop">
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>YCbCrColorSpace</name>
            <anchor>YCbCrColorSpace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="YCbCr_Undefined">
            <anchor>YCbCrColorSpace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="YCbCr_BT601">
            <anchor>YCbCrColorSpace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="YCbCr_BT709">
            <anchor>YCbCrColorSpace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="YCbCr_xvYCC601">
            <anchor>YCbCrColorSpace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="YCbCr_xvYCC709">
            <anchor>YCbCrColorSpace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="YCbCr_JPEG">
            <anchor>YCbCrColorSpace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVideoSurfaceFormat</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>QVideoSurfaceFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVideoSurfaceFormat</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>QVideoSurfaceFormat-2</anchor>
            <arglist>(const QSize &amp; size, QVideoFrame::PixelFormat format, QAbstractVideoBuffer::HandleType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVideoSurfaceFormat</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>QVideoSurfaceFormat-3</anchor>
            <arglist>(const QVideoSurfaceFormat &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QVideoSurfaceFormat</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>dtor.QVideoSurfaceFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVideoSurfaceFormat &amp;</type>
            <name>operator=</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QVideoSurfaceFormat &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QVideoSurfaceFormat &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QVideoSurfaceFormat &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVideoFrame::PixelFormat</type>
            <name>pixelFormat</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>pixelFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractVideoBuffer::HandleType</type>
            <name>handleType</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>handleType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>frameSize</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>frameSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrameSize</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>setFrameSize</anchor>
            <arglist>(const QSize &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrameSize</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>setFrameSize-2</anchor>
            <arglist>(int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>frameWidth</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>frameWidth</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>frameHeight</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>frameHeight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>viewport</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>viewport</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewport</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>setViewport</anchor>
            <arglist>(const QRect &amp; viewport)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Direction</type>
            <name>scanLineDirection</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>scanLineDirection</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScanLineDirection</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>setScanLineDirection</anchor>
            <arglist>(Direction direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>frameRate</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>frameRate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrameRate</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>setFrameRate</anchor>
            <arglist>(qreal rate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>pixelAspectRatio</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>pixelAspectRatio</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixelAspectRatio</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>setPixelAspectRatio</anchor>
            <arglist>(const QSize &amp; ratio)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixelAspectRatio</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>setPixelAspectRatio-2</anchor>
            <arglist>(int horizontal, int vertical)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>YCbCrColorSpace</type>
            <name>yCbCrColorSpace</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>yCbCrColorSpace</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setYCbCrColorSpace</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>setYCbCrColorSpace</anchor>
            <arglist>(YCbCrColorSpace space)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>sizeHint</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>propertyNames</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>propertyNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>property</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>property</anchor>
            <arglist>(const char * name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProperty</name>
            <anchorfile>qvideosurfaceformat.html</anchorfile>
            <anchor>setProperty</anchor>
            <arglist>(const char * name, const QVariant &amp; value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageSortOrder</name>
        <filename>qmessagesortorder.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageSortOrder</name>
            <anchorfile>qmessagesortorder.html</anchorfile>
            <anchor>QMessageSortOrder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageSortOrder</name>
            <anchorfile>qmessagesortorder.html</anchorfile>
            <anchor>QMessageSortOrder-2</anchor>
            <arglist>(const QMessageSortOrder &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMessageSortOrder</name>
            <anchorfile>qmessagesortorder.html</anchorfile>
            <anchor>dtor.QMessageSortOrder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qmessagesortorder.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSupported</name>
            <anchorfile>qmessagesortorder.html</anchorfile>
            <anchor>isSupported</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageSortOrder</type>
            <name>operator+</name>
            <anchorfile>qmessagesortorder.html</anchorfile>
            <anchor>operator+</anchor>
            <arglist>(const QMessageSortOrder &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageSortOrder &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmessagesortorder.html</anchorfile>
            <anchor>operator+=</anchor>
            <arglist>(const QMessageSortOrder &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageSortOrder</type>
            <name>byType</name>
            <anchorfile>qmessagesortorder.html</anchorfile>
            <anchor>byType</anchor>
            <arglist>(Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageSortOrder</type>
            <name>bySender</name>
            <anchorfile>qmessagesortorder.html</anchorfile>
            <anchor>bySender</anchor>
            <arglist>(Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageSortOrder</type>
            <name>byRecipients</name>
            <anchorfile>qmessagesortorder.html</anchorfile>
            <anchor>byRecipients</anchor>
            <arglist>(Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageSortOrder</type>
            <name>bySubject</name>
            <anchorfile>qmessagesortorder.html</anchorfile>
            <anchor>bySubject</anchor>
            <arglist>(Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageSortOrder</type>
            <name>byTimeStamp</name>
            <anchorfile>qmessagesortorder.html</anchorfile>
            <anchor>byTimeStamp</anchor>
            <arglist>(Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageSortOrder</type>
            <name>byReceptionTimeStamp</name>
            <anchorfile>qmessagesortorder.html</anchorfile>
            <anchor>byReceptionTimeStamp</anchor>
            <arglist>(Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageSortOrder</type>
            <name>byStatus</name>
            <anchorfile>qmessagesortorder.html</anchorfile>
            <anchor>byStatus</anchor>
            <arglist>(QMessage::Status flag, Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageSortOrder</type>
            <name>byPriority</name>
            <anchorfile>qmessagesortorder.html</anchorfile>
            <anchor>byPriority</anchor>
            <arglist>(Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageSortOrder</type>
            <name>bySize</name>
            <anchorfile>qmessagesortorder.html</anchorfile>
            <anchor>bySize</anchor>
            <arglist>(Qt::SortOrder order)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSystemDeviceInfo</name>
        <filename>qsystemdeviceinfo.html</filename>
        <member kind="property" type="Profile">
            <name>currentProfile</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>currentProfile-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="PowerState">
            <name>currentPowerState</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>currentPowerState-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="SimStatus">
            <name>simStatus</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>simStatus-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="BatteryStatus">
            <name>batteryStatus</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>batteryStatus-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="InputMethodFlags">
            <name>inputMethodType</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>inputMethodType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>imei</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>imei-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>imsi</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>imsi-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>manufacturer</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>manufacturer-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>model</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>model-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>productName</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>productName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>batteryLevel</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>batteryLevel-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>isDeviceLocked</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>isDeviceLocked-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>currentBluetoothPowerState</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>currentBluetoothPowerState-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSystemDeviceInfo</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>QSystemDeviceInfo</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSystemDeviceInfo</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>dtor.QSystemDeviceInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>BatteryStatus</name>
            <anchor>BatteryStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoBatteryLevel">
            <anchor>BatteryStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BatteryCritical">
            <anchor>BatteryStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BatteryVeryLow">
            <anchor>BatteryStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BatteryLow">
            <anchor>BatteryStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BatteryNormal">
            <anchor>BatteryStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>PowerState</name>
            <anchor>PowerState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownPower">
            <anchor>PowerState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BatteryPower">
            <anchor>PowerState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WallPower">
            <anchor>PowerState-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WallPowerChargingBattery">
            <anchor>PowerState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>InputMethod</name>
            <anchor>InputMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Keys">
            <anchor>InputMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Keypad">
            <anchor>InputMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Keyboard">
            <anchor>InputMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SingleTouch">
            <anchor>InputMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MultiTouch">
            <anchor>InputMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mouse">
            <anchor>InputMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QSystemDeviceInfo::InputMethod">
            <name>InputMethodFlags</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>InputMethodFlags-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSystemDeviceInfo::InputMethodFlags</type>
            <name>inputMethodType</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>inputMethodType-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>imei</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>imei-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>imsi</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>imsi-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>manufacturer</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>manufacturer-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>model</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>model-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>productName</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>productName-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>batteryLevel</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>batteryLevel-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSystemDeviceInfo::BatteryStatus</type>
            <name>batteryStatus</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>batteryStatus-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>Profile</name>
            <anchor>Profile-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownProfile">
            <anchor>Profile-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SilentProfile">
            <anchor>Profile-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NormalProfile">
            <anchor>Profile-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LoudProfile">
            <anchor>Profile-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VibProfile">
            <anchor>Profile-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OfflineProfile">
            <anchor>Profile-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PowersaveProfile">
            <anchor>Profile-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomProfile">
            <anchor>Profile-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SimStatus</name>
            <anchor>SimStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SimNotAvailable">
            <anchor>SimStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SingleSimAvailable">
            <anchor>SimStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DualSimAvailable">
            <anchor>SimStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SimLocked">
            <anchor>SimStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDeviceLocked</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>isDeviceLocked-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSystemDeviceInfo::SimStatus</type>
            <name>simStatus</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>simStatus-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSystemDeviceInfo::Profile</type>
            <name>currentProfile</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>currentProfile-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSystemDeviceInfo::PowerState</type>
            <name>currentPowerState</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>currentPowerState-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>currentBluetoothPowerState</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>currentBluetoothPowerState-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>batteryLevelChanged</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>batteryLevelChanged</anchor>
            <arglist>(int level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>batteryStatusChanged</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>batteryStatusChanged</anchor>
            <arglist>(QSystemDeviceInfo::BatteryStatus status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>powerStateChanged</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>powerStateChanged</anchor>
            <arglist>(QSystemDeviceInfo::PowerState state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentProfileChanged</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>currentProfileChanged</anchor>
            <arglist>(QSystemDeviceInfo::Profile profile)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bluetoothStateChanged</name>
            <anchorfile>qsystemdeviceinfo.html</anchorfile>
            <anchor>bluetoothStateChanged</anchor>
            <arglist>(bool on)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVideoRendererControl</name>
        <filename>qvideorenderercontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QVideoRendererControl</name>
            <anchorfile>qvideorenderercontrol.html</anchorfile>
            <anchor>dtor.QVideoRendererControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QAbstractVideoSurface *</type>
            <name>surface</name>
            <anchorfile>qvideorenderercontrol.html</anchorfile>
            <anchor>surface</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setSurface</name>
            <anchorfile>qvideorenderercontrol.html</anchorfile>
            <anchor>setSurface</anchor>
            <arglist>(QAbstractVideoSurface * surface) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QVideoRendererControl</name>
            <anchorfile>qvideorenderercontrol.html</anchorfile>
            <anchor>QVideoRendererControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRotationReading</name>
        <filename>qrotationreading.html</filename>
        <base>QSensorReading</base>
        <member kind="property" type="qreal">
            <name>x</name>
            <anchorfile>qrotationreading.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>y</name>
            <anchorfile>qrotationreading.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>z</name>
            <anchorfile>qrotationreading.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>x</name>
            <anchorfile>qrotationreading.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qrotationreading.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(qreal x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>y</name>
            <anchorfile>qrotationreading.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qrotationreading.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>z</name>
            <anchorfile>qrotationreading.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZ</name>
            <anchorfile>qrotationreading.html</anchorfile>
            <anchor>setZ</anchor>
            <arglist>(qreal z)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRotationFilter</name>
        <filename>qrotationfilter.html</filename>
        <base>QSensorFilter</base>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>filter</name>
            <anchorfile>qrotationfilter.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>(QRotationReading * reading) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRotationSensor</name>
        <filename>qrotationsensor.html</filename>
        <base>QSensor</base>
        <member kind="property" type="bool">
            <name>hasZ</name>
            <anchorfile>qrotationsensor.html</anchorfile>
            <anchor>hasZ-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRotationSensor</name>
            <anchorfile>qrotationsensor.html</anchorfile>
            <anchor>QRotationSensor</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QRotationSensor</name>
            <anchorfile>qrotationsensor.html</anchorfile>
            <anchor>dtor.QRotationSensor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRotationReading *</type>
            <name>reading</name>
            <anchorfile>qrotationsensor.html</anchorfile>
            <anchor>reading</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoTiledMapReply</name>
        <filename>qgeotiledmapreply.html</filename>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CommunicationError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ParseError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoTiledMapReply</name>
            <anchorfile>qgeotiledmapreply.html</anchorfile>
            <anchor>QGeoTiledMapReply</anchor>
            <arglist>(const QGeoTiledMapRequest &amp; request, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoTiledMapReply</name>
            <anchorfile>qgeotiledmapreply.html</anchorfile>
            <anchor>QGeoTiledMapReply-2</anchor>
            <arglist>(Error error, const QString &amp; errorString, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeoTiledMapReply</name>
            <anchorfile>qgeotiledmapreply.html</anchorfile>
            <anchor>dtor.QGeoTiledMapReply</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qgeotiledmapreply.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qgeotiledmapreply.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qgeotiledmapreply.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoTiledMapRequest</type>
            <name>request</name>
            <anchorfile>qgeotiledmapreply.html</anchorfile>
            <anchor>request</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>mapImageData</name>
            <anchorfile>qgeotiledmapreply.html</anchorfile>
            <anchor>mapImageData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>mapImageFormat</name>
            <anchorfile>qgeotiledmapreply.html</anchorfile>
            <anchor>mapImageFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>abort</name>
            <anchorfile>qgeotiledmapreply.html</anchorfile>
            <anchor>abort</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qgeotiledmapreply.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qgeotiledmapreply.html</anchorfile>
            <anchor>error-2</anchor>
            <arglist>(QGeoTiledMapReply::Error error, const QString &amp; errorString)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setError</name>
            <anchorfile>qgeotiledmapreply.html</anchorfile>
            <anchor>setError</anchor>
            <arglist>(Error error, const QString &amp; errorString)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setFinished</name>
            <anchorfile>qgeotiledmapreply.html</anchorfile>
            <anchor>setFinished</anchor>
            <arglist>(bool finished)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setMapImageData</name>
            <anchorfile>qgeotiledmapreply.html</anchorfile>
            <anchor>setMapImageData</anchor>
            <arglist>(const QByteArray &amp; data)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setMapImageFormat</name>
            <anchorfile>qgeotiledmapreply.html</anchorfile>
            <anchor>setMapImageFormat</anchor>
            <arglist>(const QString &amp; format)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkNameSort</name>
        <filename>qlandmarknamesort.html</filename>
        <base>QLandmarkSortOrder</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkNameSort</name>
            <anchorfile>qlandmarknamesort.html</anchorfile>
            <anchor>QLandmarkNameSort</anchor>
            <arglist>(Qt::SortOrder direction, Qt::CaseSensitivity sensitivity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkNameSort</name>
            <anchorfile>qlandmarknamesort.html</anchorfile>
            <anchor>QLandmarkNameSort-2</anchor>
            <arglist>(const QLandmarkSortOrder &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QLandmarkNameSort</name>
            <anchorfile>qlandmarknamesort.html</anchorfile>
            <anchor>dtor.QLandmarkNameSort</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CaseSensitivity</type>
            <name>caseSensitivity</name>
            <anchorfile>qlandmarknamesort.html</anchorfile>
            <anchor>caseSensitivity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCaseSensitivity</name>
            <anchorfile>qlandmarknamesort.html</anchorfile>
            <anchor>setCaseSensitivity</anchor>
            <arglist>(Qt::CaseSensitivity caseSensitivity)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrientationReading</name>
        <filename>qorientationreading.html</filename>
        <base>QSensorReading</base>
        <member kind="property" type="Orientation">
            <name>orientation</name>
            <anchorfile>qorientationreading.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Orientation</name>
            <anchor>Orientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Undefined">
            <anchor>Orientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TopUp">
            <anchor>Orientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TopDown">
            <anchor>Orientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LeftUp">
            <anchor>Orientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RightUp">
            <anchor>Orientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FaceUp">
            <anchor>Orientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FaceDown">
            <anchor>Orientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Orientation</type>
            <name>orientation</name>
            <anchorfile>qorientationreading.html</anchorfile>
            <anchor>orientation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOrientation</name>
            <anchorfile>qorientationreading.html</anchorfile>
            <anchor>setOrientation</anchor>
            <arglist>(Orientation orientation)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrientationFilter</name>
        <filename>qorientationfilter.html</filename>
        <base>QSensorFilter</base>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>filter</name>
            <anchorfile>qorientationfilter.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>(QOrientationReading * reading) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrientationSensor</name>
        <filename>qorientationsensor.html</filename>
        <base>QSensor</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrientationSensor</name>
            <anchorfile>qorientationsensor.html</anchorfile>
            <anchor>QOrientationSensor</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOrientationSensor</name>
            <anchorfile>qorientationsensor.html</anchorfile>
            <anchor>dtor.QOrientationSensor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrientationReading *</type>
            <name>reading</name>
            <anchorfile>qorientationsensor.html</anchorfile>
            <anchor>reading</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGalleryQueryRequest</name>
        <filename>qgalleryqueryrequest.html</filename>
        <base>QGalleryAbstractRequest</base>
        <member kind="property" type="QStringList">
            <name>propertyNames</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>propertyNames-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QStringList">
            <name>sortPropertyNames</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>sortPropertyNames-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>live</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>live-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>initialCursorPosition</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>initialCursorPosition-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>minimumPagedItems</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>minimumPagedItems-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>itemType</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>itemType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QGalleryFilter">
            <name>filter</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>filter-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QGalleryAbstractRequest::Scope">
            <name>scope</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>scope-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>scopeItemId</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>scopeItemId-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QGalleryItemList *">
            <name>items</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>items-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryQueryRequest</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>QGalleryQueryRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryQueryRequest</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>QGalleryQueryRequest-2</anchor>
            <arglist>(QAbstractGallery * gallery, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGalleryQueryRequest</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>dtor.QGalleryQueryRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>propertyNames</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>propertyNames-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPropertyNames</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>propertyNames-prop</anchor>
            <arglist>(const QStringList &amp; names)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>sortPropertyNames</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>sortPropertyNames-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSortPropertyNames</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>sortPropertyNames-prop</anchor>
            <arglist>(const QStringList &amp; names)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLive</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>live-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLive</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>live-prop</anchor>
            <arglist>(bool live)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>initialCursorPosition</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>initialCursorPosition-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInitialCursorPosition</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>initialCursorPosition-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minimumPagedItems</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>minimumPagedItems-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinimumPagedItems</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>minimumPagedItems-prop</anchor>
            <arglist>(int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>itemType</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>itemType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemType</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>itemType-prop</anchor>
            <arglist>(const QString &amp; type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGalleryAbstractRequest::Scope</type>
            <name>scope</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>scope-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScope</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>scope-prop</anchor>
            <arglist>(QGalleryAbstractRequest::Scope scope)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>scopeItemId</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>scopeItemId-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScopeItemId</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>scopeItemId-prop</anchor>
            <arglist>(const QVariant &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGalleryFilter</type>
            <name>filter</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>filter-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilter</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>filter-prop</anchor>
            <arglist>(const QGalleryFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGalleryItemList *</type>
            <name>items</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>items-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemsChanged</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>itemsChanged</anchor>
            <arglist>(QGalleryItemList * items)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setResponse</name>
            <anchorfile>qgalleryqueryrequest.html</anchorfile>
            <anchor>setResponse</anchor>
            <arglist>(QGalleryAbstractResponse * response)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNmeaPositionInfoSource</name>
        <filename>qnmeapositioninfosource.html</filename>
        <base>QGeoPositionInfoSource</base>
        <member kind="enum">
            <name>UpdateMode</name>
            <anchor>UpdateMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RealTimeMode">
            <anchor>UpdateMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SimulationMode">
            <anchor>UpdateMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNmeaPositionInfoSource</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>QNmeaPositionInfoSource</anchor>
            <arglist>(UpdateMode updateMode, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNmeaPositionInfoSource</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>dtor.QNmeaPositionInfoSource</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>UpdateMode</type>
            <name>updateMode</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>updateMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice * device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setUpdateInterval</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>setUpdateInterval</anchor>
            <arglist>(int msec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QGeoPositionInfo</type>
            <name>lastKnownPosition</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>lastKnownPosition</anchor>
            <arglist>(bool fromSatellitePositioningMethodsOnly) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual PositioningMethods</type>
            <name>supportedPositioningMethods</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>supportedPositioningMethods</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>minimumUpdateInterval</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>minimumUpdateInterval</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>startUpdates</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>startUpdates</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>stopUpdates</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>stopUpdates</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>requestUpdate</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>requestUpdate</anchor>
            <arglist>(int msec)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>parsePosInfoFromNmeaData</name>
            <anchorfile>qnmeapositioninfosource.html</anchorfile>
            <anchor>parsePosInfoFromNmeaData</anchor>
            <arglist>(const char * data, int size, QGeoPositionInfo * posInfo, bool * hasFix)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkCategoryFetchRequest</name>
        <filename>qlandmarkcategoryfetchrequest.html</filename>
        <base>QLandmarkAbstractRequest</base>
        <member kind="enum">
            <name>MatchingScheme</name>
            <anchor>MatchingScheme-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchAll">
            <anchor>MatchingScheme-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchSubset">
            <anchor>MatchingScheme-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkCategoryFetchRequest</name>
            <anchorfile>qlandmarkcategoryfetchrequest.html</anchorfile>
            <anchor>QLandmarkCategoryFetchRequest</anchor>
            <arglist>(QLandmarkManager * manager, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLandmarkCategoryFetchRequest</name>
            <anchorfile>qlandmarkcategoryfetchrequest.html</anchorfile>
            <anchor>dtor.QLandmarkCategoryFetchRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkCategoryId&gt;</type>
            <name>categoryIds</name>
            <anchorfile>qlandmarkcategoryfetchrequest.html</anchorfile>
            <anchor>categoryIds</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCategoryIds</name>
            <anchorfile>qlandmarkcategoryfetchrequest.html</anchorfile>
            <anchor>setCategoryIds</anchor>
            <arglist>(const QList&lt;QLandmarkCategoryId&gt; &amp; categoryIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCategoryId</name>
            <anchorfile>qlandmarkcategoryfetchrequest.html</anchorfile>
            <anchor>setCategoryId</anchor>
            <arglist>(const QLandmarkCategoryId &amp; categoryId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkCategory&gt;</type>
            <name>categories</name>
            <anchorfile>qlandmarkcategoryfetchrequest.html</anchorfile>
            <anchor>categories</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>MatchingScheme</type>
            <name>matchingScheme</name>
            <anchorfile>qlandmarkcategoryfetchrequest.html</anchorfile>
            <anchor>matchingScheme</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatchingScheme</name>
            <anchorfile>qlandmarkcategoryfetchrequest.html</anchorfile>
            <anchor>setMatchingScheme</anchor>
            <arglist>(QLandmarkCategoryFetchRequest::MatchingScheme matchingScheme)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkNameSort</type>
            <name>sorting</name>
            <anchorfile>qlandmarkcategoryfetchrequest.html</anchorfile>
            <anchor>sorting</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSorting</name>
            <anchorfile>qlandmarkcategoryfetchrequest.html</anchorfile>
            <anchor>setSorting</anchor>
            <arglist>(const QLandmarkNameSort &amp; nameSort)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QServiceFilter</name>
        <filename>qservicefilter.html</filename>
        <member kind="enum">
            <name>VersionMatchRule</name>
            <anchor>VersionMatchRule-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExactVersionMatch">
            <anchor>VersionMatchRule-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MinimumVersionMatch">
            <anchor>VersionMatchRule-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CapabilityMatchRule</name>
            <anchor>CapabilityMatchRule-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchMinimum">
            <anchor>CapabilityMatchRule-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchLoadable">
            <anchor>CapabilityMatchRule-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QServiceFilter</name>
            <anchorfile>qservicefilter.html</anchorfile>
            <anchor>QServiceFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QServiceFilter</name>
            <anchorfile>qservicefilter.html</anchorfile>
            <anchor>dtor.QServiceFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QServiceFilter</name>
            <anchorfile>qservicefilter.html</anchorfile>
            <anchor>QServiceFilter-2</anchor>
            <arglist>(const QServiceFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QServiceFilter</name>
            <anchorfile>qservicefilter.html</anchorfile>
            <anchor>QServiceFilter-3</anchor>
            <arglist>(const QString &amp; interfaceName, const QString &amp; version, QServiceFilter::VersionMatchRule rule)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QServiceFilter &amp;</type>
            <name>operator=</name>
            <anchorfile>qservicefilter.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QServiceFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInterface</name>
            <anchorfile>qservicefilter.html</anchorfile>
            <anchor>setInterface</anchor>
            <arglist>(const QString &amp; interfaceName, const QString &amp; version, QServiceFilter::VersionMatchRule rule)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setServiceName</name>
            <anchorfile>qservicefilter.html</anchorfile>
            <anchor>setServiceName</anchor>
            <arglist>(const QString &amp; serviceName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>serviceName</name>
            <anchorfile>qservicefilter.html</anchorfile>
            <anchor>serviceName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>interfaceName</name>
            <anchorfile>qservicefilter.html</anchorfile>
            <anchor>interfaceName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>majorVersion</name>
            <anchorfile>qservicefilter.html</anchorfile>
            <anchor>majorVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minorVersion</name>
            <anchorfile>qservicefilter.html</anchorfile>
            <anchor>minorVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>VersionMatchRule</type>
            <name>versionMatchRule</name>
            <anchorfile>qservicefilter.html</anchorfile>
            <anchor>versionMatchRule</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>customAttributes</name>
            <anchorfile>qservicefilter.html</anchorfile>
            <anchor>customAttributes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>customAttribute</name>
            <anchorfile>qservicefilter.html</anchorfile>
            <anchor>customAttribute</anchor>
            <arglist>(const QString &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCustomAttribute</name>
            <anchorfile>qservicefilter.html</anchorfile>
            <anchor>setCustomAttribute</anchor>
            <arglist>(const QString &amp; key, const QString &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearCustomAttribute</name>
            <anchorfile>qservicefilter.html</anchorfile>
            <anchor>clearCustomAttribute</anchor>
            <arglist>(const QString &amp; key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCapabilities</name>
            <anchorfile>qservicefilter.html</anchorfile>
            <anchor>setCapabilities</anchor>
            <arglist>(QServiceFilter::CapabilityMatchRule rule, const QStringList &amp; capabilities)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>capabilities</name>
            <anchorfile>qservicefilter.html</anchorfile>
            <anchor>capabilities</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CapabilityMatchRule</type>
            <name>capabilityMatchRule</name>
            <anchorfile>qservicefilter.html</anchorfile>
            <anchor>capabilityMatchRule</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMetaDataReaderControl</name>
        <filename>qmetadatareadercontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMetaDataReaderControl</name>
            <anchorfile>qmetadatareadercontrol.html</anchorfile>
            <anchor>dtor.QMetaDataReaderControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isMetaDataAvailable</name>
            <anchorfile>qmetadatareadercontrol.html</anchorfile>
            <anchor>isMetaDataAvailable</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVariant</type>
            <name>metaData</name>
            <anchorfile>qmetadatareadercontrol.html</anchorfile>
            <anchor>metaData</anchor>
            <arglist>(QtMultimediaKit::MetaData key) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;QtMultimediaKit::MetaData&gt;</type>
            <name>availableMetaData</name>
            <anchorfile>qmetadatareadercontrol.html</anchorfile>
            <anchor>availableMetaData</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVariant</type>
            <name>extendedMetaData</name>
            <anchorfile>qmetadatareadercontrol.html</anchorfile>
            <anchor>extendedMetaData</anchor>
            <arglist>(const QString &amp; key) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QStringList</type>
            <name>availableExtendedMetaData</name>
            <anchorfile>qmetadatareadercontrol.html</anchorfile>
            <anchor>availableExtendedMetaData</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>metaDataChanged</name>
            <anchorfile>qmetadatareadercontrol.html</anchorfile>
            <anchor>metaDataChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>metaDataAvailableChanged</name>
            <anchorfile>qmetadatareadercontrol.html</anchorfile>
            <anchor>metaDataAvailableChanged</anchor>
            <arglist>(bool available)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QMetaDataReaderControl</name>
            <anchorfile>qmetadatareadercontrol.html</anchorfile>
            <anchor>QMetaDataReaderControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkExportRequest</name>
        <filename>qlandmarkexportrequest.html</filename>
        <base>QLandmarkAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkExportRequest</name>
            <anchorfile>qlandmarkexportrequest.html</anchorfile>
            <anchor>QLandmarkExportRequest</anchor>
            <arglist>(QLandmarkManager * manager, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLandmarkExportRequest</name>
            <anchorfile>qlandmarkexportrequest.html</anchorfile>
            <anchor>dtor.QLandmarkExportRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qlandmarkexportrequest.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qlandmarkexportrequest.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice * device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qlandmarkexportrequest.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qlandmarkexportrequest.html</anchorfile>
            <anchor>setFileName</anchor>
            <arglist>(const QString &amp; fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>format</name>
            <anchorfile>qlandmarkexportrequest.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qlandmarkexportrequest.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QByteArray &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkId&gt;</type>
            <name>landmarkIds</name>
            <anchorfile>qlandmarkexportrequest.html</anchorfile>
            <anchor>landmarkIds</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLandmarkIds</name>
            <anchorfile>qlandmarkexportrequest.html</anchorfile>
            <anchor>setLandmarkIds</anchor>
            <arglist>(QList&lt;QLandmarkId&gt; &amp; landmarkIds)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageFolderId</name>
        <filename>qmessagefolderid.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageFolderId</name>
            <anchorfile>qmessagefolderid.html</anchorfile>
            <anchor>QMessageFolderId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageFolderId</name>
            <anchorfile>qmessagefolderid.html</anchorfile>
            <anchor>QMessageFolderId-2</anchor>
            <arglist>(const QMessageFolderId &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageFolderId</name>
            <anchorfile>qmessagefolderid.html</anchorfile>
            <anchor>QMessageFolderId-3</anchor>
            <arglist>(const QString &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMessageFolderId</name>
            <anchorfile>qmessagefolderid.html</anchorfile>
            <anchor>dtor.QMessageFolderId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qmessagefolderid.html</anchorfile>
            <anchor>operator&lt;</anchor>
            <arglist>(const QMessageFolderId &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qmessagefolderid.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmessagefolderid.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVideoWidget</name>
        <filename>qvideowidget.html</filename>
        <base>QMediaBindableInterface</base>
        <member kind="property" type="QMediaObject *">
            <name>mediaObject</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>mediaObject-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>fullScreen</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>fullScreen-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::AspectRatioMode">
            <name>aspectRatioMode</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>aspectRatioMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>brightness</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>brightness-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>contrast</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>contrast-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>hue</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>hue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>saturation</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>saturation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVideoWidget</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>QVideoWidget</anchor>
            <arglist>(QWidget * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QVideoWidget</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>dtor.QVideoWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMediaObject *</type>
            <name>mediaObject</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>mediaObject-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFullScreen</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>fullScreen-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::AspectRatioMode</type>
            <name>aspectRatioMode</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>aspectRatioMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>brightness</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>brightness-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>contrast</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>contrast-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>hue</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>hue-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>saturation</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>saturation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>sizeHint</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>sizeHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFullScreen</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>fullScreen-prop</anchor>
            <arglist>(bool fullScreen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAspectRatioMode</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>aspectRatioMode-prop</anchor>
            <arglist>(Qt::AspectRatioMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBrightness</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>brightness-prop</anchor>
            <arglist>(int brightness)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContrast</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>contrast-prop</anchor>
            <arglist>(int contrast)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHue</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>hue-prop</anchor>
            <arglist>(int hue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSaturation</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>saturation-prop</anchor>
            <arglist>(int saturation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fullScreenChanged</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>fullScreenChanged</anchor>
            <arglist>(bool fullScreen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>brightnessChanged</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>brightnessChanged</anchor>
            <arglist>(int brightness)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>contrastChanged</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>contrastChanged</anchor>
            <arglist>(int contrast)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hueChanged</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>hueChanged</anchor>
            <arglist>(int hue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>saturationChanged</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>saturationChanged</anchor>
            <arglist>(int saturation)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>showEvent</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>showEvent</anchor>
            <arglist>(QShowEvent * event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>hideEvent</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>hideEvent</anchor>
            <arglist>(QHideEvent * event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>resizeEvent</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QResizeEvent * event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>moveEvent</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>moveEvent</anchor>
            <arglist>(QMoveEvent * event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>paintEvent</name>
            <anchorfile>qvideowidget.html</anchorfile>
            <anchor>paintEvent</anchor>
            <arglist>(QPaintEvent * event)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCamera</name>
        <filename>qcamera.html</filename>
        <base>QMediaObject</base>
        <member kind="property" type="QCamera::State">
            <name>state</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QCamera::CaptureMode">
            <name>captureMode</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>captureMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QCamera::LockStatus">
            <name>lockStatus</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>lockStatus-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StoppedState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IdleState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActiveState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CaptureMode</name>
            <anchor>CaptureMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CaptureDisabled">
            <anchor>CaptureMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CaptureStillImage">
            <anchor>CaptureMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CaptureVideo">
            <anchor>CaptureMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CameraError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidRequestError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ServiceMissingError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotSupportedFeatureError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>LockStatus</name>
            <anchor>LockStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unlocked">
            <anchor>LockStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Searching">
            <anchor>LockStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Locked">
            <anchor>LockStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>LockChangeReason</name>
            <anchor>LockChangeReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserRequest">
            <anchor>LockChangeReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LockAcquired">
            <anchor>LockChangeReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LockFailed">
            <anchor>LockChangeReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LockLost">
            <anchor>LockChangeReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LockTemporaryLost">
            <anchor>LockChangeReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>LockType</name>
            <anchor>LockType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoLock">
            <anchor>LockType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LockExposure">
            <anchor>LockType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LockWhiteBalance">
            <anchor>LockType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LockFocus">
            <anchor>LockType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QCamera::LockType">
            <name>LockTypes</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>LockTypes-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCamera</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>QCamera</anchor>
            <arglist>(QObject * parent, QMediaServiceProvider * provider)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCamera</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>QCamera-2</anchor>
            <arglist>(const QByteArray &amp; device, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCamera</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>dtor.QCamera</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>availableDevices</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>availableDevices</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>deviceDescription</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>deviceDescription</anchor>
            <arglist>(const QByteArray &amp; device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isAvailable</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>isAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QtMultimediaKit::AvailabilityError</type>
            <name>availabilityError</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>availabilityError</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>State</type>
            <name>state</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CaptureMode</type>
            <name>captureMode</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>captureMode-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCaptureModeSupported</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>isCaptureModeSupported</anchor>
            <arglist>(CaptureMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCameraExposure *</type>
            <name>exposure</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>exposure</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCameraFocus *</type>
            <name>focus</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>focus</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCameraImageProcessing *</type>
            <name>imageProcessing</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>imageProcessing</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewfinder</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>setViewfinder</anchor>
            <arglist>(QVideoWidget * viewfinder)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewfinder</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>setViewfinder-2</anchor>
            <arglist>(QGraphicsVideoItem * viewfinder)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCamera::LockTypes</type>
            <name>supportedLocks</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>supportedLocks</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCamera::LockTypes</type>
            <name>requestedLocks</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>requestedLocks</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCamera::LockStatus</type>
            <name>lockStatus</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>lockStatus-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCamera::LockStatus</type>
            <name>lockStatus</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>lockStatus-prop</anchor>
            <arglist>(QCamera::LockType lockType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCaptureMode</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>captureMode-prop</anchor>
            <arglist>(QCamera::CaptureMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>searchAndLock</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>searchAndLock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unlock</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>unlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>searchAndLock</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>searchAndLock-2</anchor>
            <arglist>(QFlags&lt;QCamera::LockType&gt; locks)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unlock</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>unlock-2</anchor>
            <arglist>(QFlags&lt;QCamera::LockType&gt; locks)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QCamera::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>captureModeChanged</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>captureModeChanged</anchor>
            <arglist>(QCamera::CaptureMode )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>locked</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>locked</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lockFailed</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>lockFailed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lockStatusChanged</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>lockStatusChanged</anchor>
            <arglist>(QCamera::LockStatus status, QCamera::LockChangeReason reason)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lockStatusChanged</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>lockStatusChanged-2</anchor>
            <arglist>(QCamera::LockType lock, QCamera::LockStatus status, QCamera::LockChangeReason reason)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qcamera.html</anchorfile>
            <anchor>error-2</anchor>
            <arglist>(QCamera::Error value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAmbientLightReading</name>
        <filename>qambientlightreading.html</filename>
        <base>QSensorReading</base>
        <member kind="property" type="LightLevel">
            <name>lightLevel</name>
            <anchorfile>qambientlightreading.html</anchorfile>
            <anchor>lightLevel-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>LightLevel</name>
            <anchor>LightLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Undefined">
            <anchor>LightLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dark">
            <anchor>LightLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Twilight">
            <anchor>LightLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Light">
            <anchor>LightLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bright">
            <anchor>LightLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sunny">
            <anchor>LightLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>LightLevel</type>
            <name>lightLevel</name>
            <anchorfile>qambientlightreading.html</anchorfile>
            <anchor>lightLevel-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLightLevel</name>
            <anchorfile>qambientlightreading.html</anchorfile>
            <anchor>setLightLevel</anchor>
            <arglist>(LightLevel lightLevel)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAmbientLightFilter</name>
        <filename>qambientlightfilter.html</filename>
        <base>QSensorFilter</base>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>filter</name>
            <anchorfile>qambientlightfilter.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>(QAmbientLightReading * reading) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAmbientLightSensor</name>
        <filename>qambientlightsensor.html</filename>
        <base>QSensor</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAmbientLightSensor</name>
            <anchorfile>qambientlightsensor.html</anchorfile>
            <anchor>QAmbientLightSensor</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAmbientLightSensor</name>
            <anchorfile>qambientlightsensor.html</anchorfile>
            <anchor>dtor.QAmbientLightSensor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAmbientLightReading *</type>
            <name>reading</name>
            <anchorfile>qambientlightsensor.html</anchorfile>
            <anchor>reading</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageContentContainerId</name>
        <filename>qmessagecontentcontainerid.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageContentContainerId</name>
            <anchorfile>qmessagecontentcontainerid.html</anchorfile>
            <anchor>QMessageContentContainerId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageContentContainerId</name>
            <anchorfile>qmessagecontentcontainerid.html</anchorfile>
            <anchor>QMessageContentContainerId-2</anchor>
            <arglist>(const QMessageContentContainerId &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageContentContainerId</name>
            <anchorfile>qmessagecontentcontainerid.html</anchorfile>
            <anchor>QMessageContentContainerId-3</anchor>
            <arglist>(const QString &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMessageContentContainerId</name>
            <anchorfile>qmessagecontentcontainerid.html</anchorfile>
            <anchor>dtor.QMessageContentContainerId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qmessagecontentcontainerid.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmessagecontentcontainerid.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageId</name>
        <filename>qmessageid.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageId</name>
            <anchorfile>qmessageid.html</anchorfile>
            <anchor>QMessageId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageId</name>
            <anchorfile>qmessageid.html</anchorfile>
            <anchor>QMessageId-2</anchor>
            <arglist>(const QMessageId &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageId</name>
            <anchorfile>qmessageid.html</anchorfile>
            <anchor>QMessageId-3</anchor>
            <arglist>(const QString &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMessageId</name>
            <anchorfile>qmessageid.html</anchorfile>
            <anchor>dtor.QMessageId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qmessageid.html</anchorfile>
            <anchor>operator&lt;</anchor>
            <arglist>(const QMessageId &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qmessageid.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmessageid.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemDetailDefinitionRemoveRequest</name>
        <filename>qorganizeritemdetaildefinitionremoverequest.html</filename>
        <base>QOrganizerItemAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemDetailDefinitionRemoveRequest</name>
            <anchorfile>qorganizeritemdetaildefinitionremoverequest.html</anchorfile>
            <anchor>QOrganizerItemDetailDefinitionRemoveRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefinitionName</name>
            <anchorfile>qorganizeritemdetaildefinitionremoverequest.html</anchorfile>
            <anchor>setDefinitionName</anchor>
            <arglist>(const QString &amp; definitionName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefinitionNames</name>
            <anchorfile>qorganizeritemdetaildefinitionremoverequest.html</anchorfile>
            <anchor>setDefinitionNames</anchor>
            <arglist>(const QStringList &amp; names)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>definitionNames</name>
            <anchorfile>qorganizeritemdetaildefinitionremoverequest.html</anchorfile>
            <anchor>definitionNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemType</name>
            <anchorfile>qorganizeritemdetaildefinitionremoverequest.html</anchorfile>
            <anchor>setItemType</anchor>
            <arglist>(const QString &amp; organizeritemType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>itemType</name>
            <anchorfile>qorganizeritemdetaildefinitionremoverequest.html</anchorfile>
            <anchor>itemType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;int, QOrganizerItemManager::Error&gt;</type>
            <name>errorMap</name>
            <anchorfile>qorganizeritemdetaildefinitionremoverequest.html</anchorfile>
            <anchor>errorMap</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageFolder</name>
        <filename>qmessagefolder.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageFolder</name>
            <anchorfile>qmessagefolder.html</anchorfile>
            <anchor>QMessageFolder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageFolder</name>
            <anchorfile>qmessagefolder.html</anchorfile>
            <anchor>QMessageFolder-2</anchor>
            <arglist>(const QMessageFolderId &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageFolder</name>
            <anchorfile>qmessagefolder.html</anchorfile>
            <anchor>QMessageFolder-3</anchor>
            <arglist>(const QMessageFolder &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMessageFolder</name>
            <anchorfile>qmessagefolder.html</anchorfile>
            <anchor>dtor.QMessageFolder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageFolderId</type>
            <name>id</name>
            <anchorfile>qmessagefolder.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageAccountId</type>
            <name>parentAccountId</name>
            <anchorfile>qmessagefolder.html</anchorfile>
            <anchor>parentAccountId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageFolderId</type>
            <name>parentFolderId</name>
            <anchorfile>qmessagefolder.html</anchorfile>
            <anchor>parentFolderId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qmessagefolder.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>path</name>
            <anchorfile>qmessagefolder.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoPlace</name>
        <filename>qgeoplace.html</filename>
        <member kind="enum">
            <name>PlaceType</name>
            <anchor>PlaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GeoPlaceType">
            <anchor>PlaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LandmarkType">
            <anchor>PlaceType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoPlace</name>
            <anchorfile>qgeoplace.html</anchorfile>
            <anchor>QGeoPlace</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoPlace</name>
            <anchorfile>qgeoplace.html</anchorfile>
            <anchor>QGeoPlace-2</anchor>
            <arglist>(const QGeoPlace &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeoPlace</name>
            <anchorfile>qgeoplace.html</anchorfile>
            <anchor>dtor.QGeoPlace</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoPlace &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeoplace.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QGeoPlace &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeoplace.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QGeoPlace &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeoplace.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QGeoPlace &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PlaceType</type>
            <name>type</name>
            <anchorfile>qgeoplace.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoBoundingBox</type>
            <name>boundingBox</name>
            <anchorfile>qgeoplace.html</anchorfile>
            <anchor>boundingBox</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBoundingBox</name>
            <anchorfile>qgeoplace.html</anchorfile>
            <anchor>setBoundingBox</anchor>
            <arglist>(const QGeoBoundingBox &amp; boundingBox)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>coordinate</name>
            <anchorfile>qgeoplace.html</anchorfile>
            <anchor>coordinate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCoordinate</name>
            <anchorfile>qgeoplace.html</anchorfile>
            <anchor>setCoordinate</anchor>
            <arglist>(const QGeoCoordinate &amp; coordinate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoAddress</type>
            <name>address</name>
            <anchorfile>qgeoplace.html</anchorfile>
            <anchor>address</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddress</name>
            <anchorfile>qgeoplace.html</anchorfile>
            <anchor>setAddress</anchor>
            <arglist>(const QGeoAddress &amp; address)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QGeoPlace</name>
            <anchorfile>qgeoplace.html</anchorfile>
            <anchor>QGeoPlace-3</anchor>
            <arglist>(QGeoPlacePrivate * dd)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactDetailFieldDefinition</name>
        <filename>qcontactdetailfielddefinition.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactDetailFieldDefinition</name>
            <anchorfile>qcontactdetailfielddefinition.html</anchorfile>
            <anchor>QContactDetailFieldDefinition</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactDetailFieldDefinition</name>
            <anchorfile>qcontactdetailfielddefinition.html</anchorfile>
            <anchor>dtor.QContactDetailFieldDefinition</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactDetailFieldDefinition</name>
            <anchorfile>qcontactdetailfielddefinition.html</anchorfile>
            <anchor>QContactDetailFieldDefinition-2</anchor>
            <arglist>(const QContactDetailFieldDefinition &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactDetailFieldDefinition &amp;</type>
            <name>operator=</name>
            <anchorfile>qcontactdetailfielddefinition.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QContactDetailFieldDefinition &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant::Type</type>
            <name>dataType</name>
            <anchorfile>qcontactdetailfielddefinition.html</anchorfile>
            <anchor>dataType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDataType</name>
            <anchorfile>qcontactdetailfielddefinition.html</anchorfile>
            <anchor>setDataType</anchor>
            <arglist>(QVariant::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantList</type>
            <name>allowableValues</name>
            <anchorfile>qcontactdetailfielddefinition.html</anchorfile>
            <anchor>allowableValues</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAllowableValues</name>
            <anchorfile>qcontactdetailfielddefinition.html</anchorfile>
            <anchor>setAllowableValues</anchor>
            <arglist>(const QVariantList values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcontactdetailfielddefinition.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QContactDetailFieldDefinition &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcontactdetailfielddefinition.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QContactDetailFieldDefinition &amp; other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCameraExposureControl</name>
        <filename>qcameraexposurecontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCameraExposureControl</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>dtor.QCameraExposureControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>ExposureParameter</name>
            <anchor>ExposureParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidParameter">
            <anchor>ExposureParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ISO">
            <anchor>ExposureParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Aperture">
            <anchor>ExposureParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShutterSpeed">
            <anchor>ExposureParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExposureCompensation">
            <anchor>ExposureParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FlashPower">
            <anchor>ExposureParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FlashCompensation">
            <anchor>ExposureParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExtendedExposureParameter">
            <anchor>ExposureParameter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ParameterFlag</name>
            <anchor>ParameterFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AutomaticValue">
            <anchor>ParameterFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadOnly">
            <anchor>ParameterFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContinuousRange">
            <anchor>ParameterFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QCameraExposureControl::ParameterFlag">
            <name>ParameterFlags</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>ParameterFlags-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QCameraExposure::FlashModes</type>
            <name>flashMode</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>flashMode</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setFlashMode</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>setFlashMode</anchor>
            <arglist>(QFlags&lt;QCameraExposure::FlashMode&gt; mode) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isFlashModeSupported</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>isFlashModeSupported</anchor>
            <arglist>(QFlags&lt;QCameraExposure::FlashMode&gt; mode) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isFlashReady</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>isFlashReady</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QCameraExposure::ExposureMode</type>
            <name>exposureMode</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>exposureMode</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setExposureMode</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>setExposureMode</anchor>
            <arglist>(QCameraExposure::ExposureMode mode) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isExposureModeSupported</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>isExposureModeSupported</anchor>
            <arglist>(QCameraExposure::ExposureMode mode) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QCameraExposure::MeteringMode</type>
            <name>meteringMode</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>meteringMode</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setMeteringMode</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>setMeteringMode</anchor>
            <arglist>(QCameraExposure::MeteringMode mode) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isMeteringModeSupported</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>isMeteringModeSupported</anchor>
            <arglist>(QCameraExposure::MeteringMode mode) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isParameterSupported</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>isParameterSupported</anchor>
            <arglist>(ExposureParameter parameter) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVariant</type>
            <name>exposureParameter</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>exposureParameter</anchor>
            <arglist>(ExposureParameter parameter) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual ParameterFlags</type>
            <name>exposureParameterFlags</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>exposureParameterFlags</anchor>
            <arglist>(ExposureParameter parameter) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVariantList</type>
            <name>supportedParameterRange</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>supportedParameterRange</anchor>
            <arglist>(ExposureParameter parameter) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>setExposureParameter</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>setExposureParameter</anchor>
            <arglist>(ExposureParameter parameter, const QVariant &amp; value) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>extendedParameterName</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>extendedParameterName</anchor>
            <arglist>(ExposureParameter parameter) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>flashReady</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>flashReady</anchor>
            <arglist>(bool ready)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>exposureParameterChanged</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>exposureParameterChanged</anchor>
            <arglist>(int parameter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>exposureParameterRangeChanged</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>exposureParameterRangeChanged</anchor>
            <arglist>(int parameter)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QCameraExposureControl</name>
            <anchorfile>qcameraexposurecontrol.html</anchorfile>
            <anchor>QCameraExposureControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCameraViewfinder</name>
        <filename>qcameraviewfinder.html</filename>
        <base>QVideoWidget</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCameraViewfinder</name>
            <anchorfile>qcameraviewfinder.html</anchorfile>
            <anchor>QCameraViewfinder</anchor>
            <arglist>(QWidget * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCameraViewfinder</name>
            <anchorfile>qcameraviewfinder.html</anchorfile>
            <anchor>dtor.QCameraViewfinder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMediaObject *</type>
            <name>mediaObject</name>
            <anchorfile>qcameraviewfinder.html</anchorfile>
            <anchor>mediaObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setMediaObject</name>
            <anchorfile>qcameraviewfinder.html</anchorfile>
            <anchor>setMediaObject</anchor>
            <arglist>(QMediaObject * object)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkManagerEngine</name>
        <filename>qlandmarkmanagerengine.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkManagerEngine</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>QLandmarkManagerEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QLandmarkManagerEngine</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>dtor.QLandmarkManagerEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>managerName</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QMap&lt;QString, QString&gt;</type>
            <name>managerParameters</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>managerParameters</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>managerVersion</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>managerVersion</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerUri</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>managerUri</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;QLandmarkId&gt;</type>
            <name>landmarkIds</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>landmarkIds</anchor>
            <arglist>(const QLandmarkFilter &amp; filter, const QList&lt;QLandmarkSortOrder&gt; &amp; sortOrders, const QLandmarkFetchHint &amp; fetchHint, QLandmarkManager::Error * error, QString * errorString) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;QLandmarkCategoryId&gt;</type>
            <name>categoryIds</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>categoryIds</anchor>
            <arglist>(const QLandmarkNameSort &amp; nameSort, QLandmarkManager::Error * error, QString * errorString) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QLandmark</type>
            <name>landmark</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>landmark</anchor>
            <arglist>(const QLandmarkId &amp; landmarkId, QLandmarkManager::Error * error, QString * errorString) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;QLandmark&gt;</type>
            <name>landmarks</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>landmarks</anchor>
            <arglist>(const QLandmarkFilter &amp; filter, const QList&lt;QLandmarkSortOrder&gt; &amp; sortOrders, const QLandmarkFetchHint &amp; fetchHint, QLandmarkManager::Error * error, QString * errorString) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QLandmarkCategory</type>
            <name>category</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>category</anchor>
            <arglist>(const QLandmarkCategoryId &amp; categoryId, QLandmarkManager::Error * error, QString * errorString) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;QLandmarkCategory&gt;</type>
            <name>categories</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>categories</anchor>
            <arglist>(const QList&lt;QLandmarkCategoryId&gt; &amp; landmarkCategoryIds, QLandmarkManager::Error * error, QString * errorString) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;QLandmarkCategory&gt;</type>
            <name>categories</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>categories-2</anchor>
            <arglist>(const QLandmarkNameSort &amp; nameSort, QLandmarkManager::Error * error, QString * errorString) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>saveLandmark</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>saveLandmark</anchor>
            <arglist>(QLandmark * landmark, QLandmarkManager::Error * error, QString * errorString) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>saveLandmarks</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>saveLandmarks</anchor>
            <arglist>(QList&lt;QLandmark&gt; * landmarks, QMap&lt;int, QLandmarkManager::Error&gt; * errorMap, QLandmarkManager::Error * error, QString * errorString) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>removeLandmark</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>removeLandmark</anchor>
            <arglist>(const QLandmarkId &amp; landmarkId, QLandmarkManager::Error * error, QString * errorString) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>removeLandmarks</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>removeLandmarks</anchor>
            <arglist>(const QList&lt;QLandmarkId&gt; &amp; landmarkIds, QMap&lt;int, QLandmarkManager::Error&gt; * errorMap, QLandmarkManager::Error * error, QString * errorString) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>saveCategory</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>saveCategory</anchor>
            <arglist>(QLandmarkCategory * category, QLandmarkManager::Error * error, QString * errorString) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>removeCategory</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>removeCategory</anchor>
            <arglist>(const QLandmarkCategoryId &amp; categoryId, QLandmarkManager::Error * error, QString * errorString) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>importLandmarks</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>importLandmarks</anchor>
            <arglist>(QIODevice * device, const QByteArray &amp; format, QLandmarkManager::Error * error, QString * errorString)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>exportLandmarks</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>exportLandmarks</anchor>
            <arglist>(QIODevice * device, const QByteArray &amp; format, QList&lt;QLandmarkId&gt; landmarkIds, QLandmarkManager::Error * error, QString * errorString) const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QLandmarkManager::FilterSupportLevel</type>
            <name>filterSupportLevel</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>filterSupportLevel</anchor>
            <arglist>(const QLandmarkFilter &amp; filter) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isFeatureSupported</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>isFeatureSupported</anchor>
            <arglist>(QLandmarkManager::LandmarkFeature feature) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isReadOnly</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>isReadOnly</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isReadOnly</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>isReadOnly-2</anchor>
            <arglist>(const QLandmarkId &amp; landmarkId) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isReadOnly</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>isReadOnly-3</anchor>
            <arglist>(const QLandmarkCategoryId &amp; categoryId) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>requestDestroyed</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>requestDestroyed</anchor>
            <arglist>(QLandmarkAbstractRequest * request) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>startRequest</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>startRequest</anchor>
            <arglist>(QLandmarkAbstractRequest * request) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>cancelRequest</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>cancelRequest</anchor>
            <arglist>(QLandmarkAbstractRequest * request) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>waitForRequestFinished</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>waitForRequestFinished</anchor>
            <arglist>(QLandmarkAbstractRequest * request, int msecs) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>landmarksAdded</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>landmarksAdded</anchor>
            <arglist>(const QList&lt;QLandmarkId&gt; &amp; landmarkIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>landmarksChanged</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>landmarksChanged</anchor>
            <arglist>(const QList&lt;QLandmarkId&gt; &amp; landmarkIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>landmarksRemoved</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>landmarksRemoved</anchor>
            <arglist>(const QList&lt;QLandmarkId&gt; &amp; landmarkIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>categoriesAdded</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>categoriesAdded</anchor>
            <arglist>(const QList&lt;QLandmarkCategoryId&gt; &amp; categoryIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>categoriesChanged</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>categoriesChanged</anchor>
            <arglist>(const QList&lt;QLandmarkCategoryId&gt; &amp; categoryIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>categoriesRemoved</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>categoriesRemoved</anchor>
            <arglist>(const QList&lt;QLandmarkCategoryId&gt; &amp; categoryIds)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>void</type>
            <name>updateRequestState</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>updateRequestState</anchor>
            <arglist>(QLandmarkAbstractRequest * req, QLandmarkAbstractRequest::State state)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>void</type>
            <name>updateLandmarkIdFetchRequest</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>updateLandmarkIdFetchRequest</anchor>
            <arglist>(QLandmarkIdFetchRequest * req, const QList&lt;QLandmarkId&gt; &amp; result, QLandmarkManager::Error error, const QString &amp; errorString, QLandmarkAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>void</type>
            <name>updateLandmarkFetchRequest</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>updateLandmarkFetchRequest</anchor>
            <arglist>(QLandmarkFetchRequest * req, const QList&lt;QLandmark&gt; &amp; result, QLandmarkManager::Error error, const QString &amp; errorString, QLandmarkAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>void</type>
            <name>updateLandmarkRemoveRequest</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>updateLandmarkRemoveRequest</anchor>
            <arglist>(QLandmarkRemoveRequest * req, QLandmarkManager::Error error, const QString &amp; errorString, const QMap&lt;int, QLandmarkManager::Error&gt; &amp; errorMap, QLandmarkAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>void</type>
            <name>updateLandmarkSaveRequest</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>updateLandmarkSaveRequest</anchor>
            <arglist>(QLandmarkSaveRequest * req, const QList&lt;QLandmark&gt; &amp; result, QLandmarkManager::Error error, const QString &amp; errorString, const QMap&lt;int, QLandmarkManager::Error&gt; &amp; errorMap, QLandmarkAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>void</type>
            <name>updateLandmarkCategoryIdFetchRequest</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>updateLandmarkCategoryIdFetchRequest</anchor>
            <arglist>(QLandmarkCategoryIdFetchRequest * req, const QList&lt;QLandmarkCategoryId&gt; &amp; result, QLandmarkManager::Error error, const QString &amp; errorString, QLandmarkAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>void</type>
            <name>updateLandmarkCategoryFetchRequest</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>updateLandmarkCategoryFetchRequest</anchor>
            <arglist>(QLandmarkCategoryFetchRequest * req, const QList&lt;QLandmarkCategory&gt; &amp; result, QLandmarkManager::Error error, const QString &amp; errorString, QLandmarkAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>void</type>
            <name>updateLandmarkCategoryRemoveRequest</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>updateLandmarkCategoryRemoveRequest</anchor>
            <arglist>(QLandmarkCategoryRemoveRequest * req, QLandmarkManager::Error error, const QString &amp; errorString, const QMap&lt;int, QLandmarkManager::Error&gt; &amp; errorMap, QLandmarkAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>void</type>
            <name>updateLandmarkCategorySaveRequest</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>updateLandmarkCategorySaveRequest</anchor>
            <arglist>(QLandmarkCategorySaveRequest * req, const QList&lt;QLandmarkCategory&gt; &amp; result, QLandmarkManager::Error error, const QString &amp; errorString, const QMap&lt;int, QLandmarkManager::Error&gt; &amp; errorMap, QLandmarkAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>void</type>
            <name>updateLandmarkImportRequest</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>updateLandmarkImportRequest</anchor>
            <arglist>(QLandmarkImportRequest * req, QLandmarkManager::Error error, const QString &amp; errorString, QLandmarkAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>void</type>
            <name>updateLandmarkExportRequest</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>updateLandmarkExportRequest</anchor>
            <arglist>(QLandmarkExportRequest * req, QLandmarkManager::Error error, const QString &amp; errorString, QLandmarkAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>int</type>
            <name>compareLandmark</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>compareLandmark</anchor>
            <arglist>(const QLandmark &amp; a, const QLandmark &amp; b, const QList&lt;QLandmarkSortOrder&gt; &amp; sortOrders)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>int</type>
            <name>compareName</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>compareName</anchor>
            <arglist>(const QLandmark &amp; a, const QLandmark &amp; b, const QLandmarkNameSort &amp; nameSort)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>int</type>
            <name>compareDistance</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>compareDistance</anchor>
            <arglist>(const QLandmark &amp; a, const QLandmark &amp; b, const QLandmarkDistanceSort &amp; distanceSort)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>void</type>
            <name>addSorted</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>addSorted</anchor>
            <arglist>(QList&lt;QLandmark&gt; * sorted, const QLandmark &amp; landmark, const QList&lt;QLandmarkSortOrder&gt; &amp; sortOrders)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>bool</type>
            <name>testFilter</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>testFilter</anchor>
            <arglist>(const QLandmarkFilter &amp; filter, const QLandmark &amp; landmark)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>QList&lt;QLandmarkId&gt;</type>
            <name>sortLandmarks</name>
            <anchorfile>qlandmarkmanagerengine.html</anchorfile>
            <anchor>sortLandmarks</anchor>
            <arglist>(const QList&lt;QLandmark&gt; &amp; landmarks, const QList&lt;QLandmarkSortOrder&gt; &amp; sortOrders)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkBoxFilter</name>
        <filename>qlandmarkboxfilter.html</filename>
        <base>QLandmarkFilter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkBoxFilter</name>
            <anchorfile>qlandmarkboxfilter.html</anchorfile>
            <anchor>QLandmarkBoxFilter</anchor>
            <arglist>(const QGeoCoordinate &amp; topLeft, const QGeoCoordinate &amp; bottomRight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkBoxFilter</name>
            <anchorfile>qlandmarkboxfilter.html</anchorfile>
            <anchor>QLandmarkBoxFilter-2</anchor>
            <arglist>(const QLandmarkFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QLandmarkBoxFilter</name>
            <anchorfile>qlandmarkboxfilter.html</anchorfile>
            <anchor>dtor.QLandmarkBoxFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>topLeftCoordinate</name>
            <anchorfile>qlandmarkboxfilter.html</anchorfile>
            <anchor>topLeftCoordinate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopLeftCoordinate</name>
            <anchorfile>qlandmarkboxfilter.html</anchorfile>
            <anchor>setTopLeftCoordinate</anchor>
            <arglist>(const QGeoCoordinate &amp; topLeft)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>bottomRightCoordinate</name>
            <anchorfile>qlandmarkboxfilter.html</anchorfile>
            <anchor>bottomRightCoordinate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomRightCoordinate</name>
            <anchorfile>qlandmarkboxfilter.html</anchorfile>
            <anchor>setBottomRightCoordinate</anchor>
            <arglist>(const QGeoCoordinate &amp; bottomRight)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoBoundingBox</name>
        <filename>qgeoboundingbox.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoBoundingBox</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>QGeoBoundingBox</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoBoundingBox</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>QGeoBoundingBox-2</anchor>
            <arglist>(const QGeoCoordinate &amp; center, double degreesWidth, double degreesHeight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoBoundingBox</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>QGeoBoundingBox-3</anchor>
            <arglist>(const QGeoCoordinate &amp; topLeft, const QGeoCoordinate &amp; bottomRight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoBoundingBox</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>QGeoBoundingBox-4</anchor>
            <arglist>(const QGeoBoundingBox &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoBoundingBox</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>dtor.QGeoBoundingBox</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoBoundingBox &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QGeoBoundingBox &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QGeoBoundingBox &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QGeoBoundingBox &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>topLeft</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>topLeft</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>topRight</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>topRight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>bottomLeft</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>bottomLeft</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>bottomRight</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>bottomRight</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCenter</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>setCenter</anchor>
            <arglist>(const QGeoCoordinate &amp; center)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>center</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>center</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(double degreesWidth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>width</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(double degreesHeight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>height</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>height</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QGeoCoordinate &amp; coordinate) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>contains-2</anchor>
            <arglist>(const QGeoBoundingBox &amp; boundingBox) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>intersects</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>intersects</anchor>
            <arglist>(const QGeoBoundingBox &amp; boundingBox) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(double degreesLatitude, double degreesLongitude)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoBoundingBox</type>
            <name>translated</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(double degreesLatitude, double degreesLongitude) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoBoundingBox</type>
            <name>united</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>united</anchor>
            <arglist>(const QGeoBoundingBox &amp; boundingBox) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoBoundingBox</type>
            <name>operator|</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>operator|</anchor>
            <arglist>(const QGeoBoundingBox &amp; boundingBox) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoBoundingBox &amp;</type>
            <name>operator|=</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>operator|=</anchor>
            <arglist>(const QGeoBoundingBox &amp; boundingBox)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoBoundingBox</type>
            <name>intersected</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>intersected</anchor>
            <arglist>(const QGeoBoundingBox &amp; boundingBox) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoBoundingBox</type>
            <name>operator&amp;</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>operator&amp;</anchor>
            <arglist>(const QGeoBoundingBox &amp; boundingBox) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoBoundingBox &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qgeoboundingbox.html</anchorfile>
            <anchor>operator&amp;=</anchor>
            <arglist>(const QGeoBoundingBox &amp; boundingBox)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemLocalIdFetchRequest</name>
        <filename>qorganizeritemlocalidfetchrequest.html</filename>
        <base>QOrganizerItemAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemLocalIdFetchRequest</name>
            <anchorfile>qorganizeritemlocalidfetchrequest.html</anchorfile>
            <anchor>QOrganizerItemLocalIdFetchRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilter</name>
            <anchorfile>qorganizeritemlocalidfetchrequest.html</anchorfile>
            <anchor>setFilter</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSorting</name>
            <anchorfile>qorganizeritemlocalidfetchrequest.html</anchorfile>
            <anchor>setSorting</anchor>
            <arglist>(const QList&lt;QOrganizerItemSortOrder&gt; &amp; sorting)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemFilter</type>
            <name>filter</name>
            <anchorfile>qorganizeritemlocalidfetchrequest.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItemSortOrder&gt;</type>
            <name>sorting</name>
            <anchorfile>qorganizeritemlocalidfetchrequest.html</anchorfile>
            <anchor>sorting</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItemLocalId&gt;</type>
            <name>itemIds</name>
            <anchorfile>qorganizeritemlocalidfetchrequest.html</anchorfile>
            <anchor>itemIds</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessage</name>
        <filename>qmessage.html</filename>
        <base>QMessageContentContainer</base>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoType">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mms">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sms">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Email">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InstantMessage">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AnyType">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QMessage::Type">
            <name>TypeFlags</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>TypeFlags-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Status</name>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Read">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HasAttachments">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Incoming">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Removed">
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QMessage::Status">
            <name>StatusFlags</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>StatusFlags-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Priority</name>
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HighPriority">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NormalPriority">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LowPriority">
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StandardFolder</name>
            <anchor>StandardFolder-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InboxFolder">
            <anchor>StandardFolder-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutboxFolder">
            <anchor>StandardFolder-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DraftsFolder">
            <anchor>StandardFolder-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SentFolder">
            <anchor>StandardFolder-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TrashFolder">
            <anchor>StandardFolder-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ResponseType</name>
            <anchor>ResponseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReplyToSender">
            <anchor>ResponseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReplyToAll">
            <anchor>ResponseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Forward">
            <anchor>ResponseType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessage</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>QMessage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessage</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>QMessage-2</anchor>
            <arglist>(const QMessageId &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessage</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>QMessage-3</anchor>
            <arglist>(const QMessage &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMessage</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>dtor.QMessage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageId</type>
            <name>id</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type</type>
            <name>type</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>setType</anchor>
            <arglist>(Type t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageAccountId</type>
            <name>parentAccountId</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>parentAccountId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setParentAccountId</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>setParentAccountId</anchor>
            <arglist>(const QMessageAccountId &amp; accountId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageFolderId</type>
            <name>parentFolderId</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>parentFolderId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>StandardFolder</type>
            <name>standardFolder</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>standardFolder</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageAddress</type>
            <name>from</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>from</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrom</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>setFrom</anchor>
            <arglist>(const QMessageAddress &amp; address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>subject</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>subject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSubject</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>setSubject</anchor>
            <arglist>(const QString &amp; text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>date</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>date</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDate</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>setDate</anchor>
            <arglist>(const QDateTime &amp; d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>receivedDate</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>receivedDate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setReceivedDate</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>setReceivedDate</anchor>
            <arglist>(const QDateTime &amp; d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageAddressList</type>
            <name>to</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>to</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTo</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>setTo</anchor>
            <arglist>(const QMessageAddressList &amp; toList)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTo</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>setTo-2</anchor>
            <arglist>(const QMessageAddress &amp; address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageAddressList</type>
            <name>cc</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>cc</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCc</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>setCc</anchor>
            <arglist>(const QMessageAddressList &amp; ccList)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageAddressList</type>
            <name>bcc</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>bcc</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBcc</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>setBcc</anchor>
            <arglist>(const QMessageAddressList &amp; bccList)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>StatusFlags</type>
            <name>status</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStatus</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>setStatus</anchor>
            <arglist>(QFlags&lt;QMessage::Status&gt; newStatus)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStatus</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>setStatus-2</anchor>
            <arglist>(Status flag, bool set)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Priority</type>
            <name>priority</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>priority</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPriority</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>setPriority</anchor>
            <arglist>(Priority newPriority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageContentContainerId</type>
            <name>bodyId</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>bodyId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBody</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>setBody</anchor>
            <arglist>(const QString &amp; body, const QByteArray &amp; mimeType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBody</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>setBody-2</anchor>
            <arglist>(QTextStream &amp; in, const QByteArray &amp; mimeType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageContentContainerIdList</type>
            <name>attachmentIds</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>attachmentIds</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendAttachments</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>appendAttachments</anchor>
            <arglist>(const QStringList &amp; fileNames)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearAttachments</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>clearAttachments</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isModified</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>isModified</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessage</type>
            <name>createResponseMessage</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>createResponseMessage</anchor>
            <arglist>(ResponseType type) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setPreferredCharsets</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>setPreferredCharsets</anchor>
            <arglist>(const QList&lt;QByteArray&gt; &amp; charsetNames)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>preferredCharsets</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>preferredCharsets</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>preferredCharsetFor</name>
            <anchorfile>qmessage.html</anchorfile>
            <anchor>preferredCharsetFor</anchor>
            <arglist>(const QString &amp; text)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGalleryRemoveRequest</name>
        <filename>qgalleryremoverequest.html</filename>
        <base>QGalleryAbstractRequest</base>
        <member kind="property" type="QVariant">
            <name>itemId</name>
            <anchorfile>qgalleryremoverequest.html</anchorfile>
            <anchor>itemId-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryRemoveRequest</name>
            <anchorfile>qgalleryremoverequest.html</anchorfile>
            <anchor>QGalleryRemoveRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryRemoveRequest</name>
            <anchorfile>qgalleryremoverequest.html</anchorfile>
            <anchor>QGalleryRemoveRequest-2</anchor>
            <arglist>(QAbstractGallery * gallery, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGalleryRemoveRequest</name>
            <anchorfile>qgalleryremoverequest.html</anchorfile>
            <anchor>dtor.QGalleryRemoveRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>itemId</name>
            <anchorfile>qgalleryremoverequest.html</anchorfile>
            <anchor>itemId-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemId</name>
            <anchorfile>qgalleryremoverequest.html</anchorfile>
            <anchor>itemId-prop</anchor>
            <arglist>(const QVariant &amp; id)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setResponse</name>
            <anchorfile>qgalleryremoverequest.html</anchorfile>
            <anchor>setResponse</anchor>
            <arglist>(QGalleryAbstractResponse * response)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoMappingManager</name>
        <filename>qgeomappingmanager.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoMappingManager</name>
            <anchorfile>qgeomappingmanager.html</anchorfile>
            <anchor>dtor.QGeoMappingManager</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerName</name>
            <anchorfile>qgeomappingmanager.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;QString, QString&gt;</type>
            <name>managerParameters</name>
            <anchorfile>qgeomappingmanager.html</anchorfile>
            <anchor>managerParameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>managerVersion</name>
            <anchorfile>qgeomappingmanager.html</anchorfile>
            <anchor>managerVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoMapData *</type>
            <name>createMapData</name>
            <anchorfile>qgeomappingmanager.html</anchorfile>
            <anchor>createMapData</anchor>
            <arglist>(QGeoMapWidget * widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeMapData</name>
            <anchorfile>qgeomappingmanager.html</anchorfile>
            <anchor>removeMapData</anchor>
            <arglist>(QGeoMapData * mapData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateMapImage</name>
            <anchorfile>qgeomappingmanager.html</anchorfile>
            <anchor>updateMapImage</anchor>
            <arglist>(QGeoMapData * mapData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGeoMapWidget::MapType&gt;</type>
            <name>supportedMapTypes</name>
            <anchorfile>qgeomappingmanager.html</anchorfile>
            <anchor>supportedMapTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>minimumImageSize</name>
            <anchorfile>qgeomappingmanager.html</anchorfile>
            <anchor>minimumImageSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>maximumImageSize</name>
            <anchorfile>qgeomappingmanager.html</anchorfile>
            <anchor>maximumImageSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>minimumZoomLevel</name>
            <anchorfile>qgeomappingmanager.html</anchorfile>
            <anchor>minimumZoomLevel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>maximumZoomLevel</name>
            <anchorfile>qgeomappingmanager.html</anchorfile>
            <anchor>maximumZoomLevel</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAudioEncoderSettings</name>
        <filename>qaudioencodersettings.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAudioEncoderSettings</name>
            <anchorfile>qaudioencodersettings.html</anchorfile>
            <anchor>QAudioEncoderSettings</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAudioEncoderSettings</name>
            <anchorfile>qaudioencodersettings.html</anchorfile>
            <anchor>QAudioEncoderSettings-2</anchor>
            <arglist>(const QAudioEncoderSettings &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAudioEncoderSettings</name>
            <anchorfile>qaudioencodersettings.html</anchorfile>
            <anchor>dtor.QAudioEncoderSettings</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAudioEncoderSettings &amp;</type>
            <name>operator=</name>
            <anchorfile>qaudioencodersettings.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QAudioEncoderSettings &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qaudioencodersettings.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QAudioEncoderSettings &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qaudioencodersettings.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QAudioEncoderSettings &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qaudioencodersettings.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QtMultimediaKit::EncodingMode</type>
            <name>encodingMode</name>
            <anchorfile>qaudioencodersettings.html</anchorfile>
            <anchor>encodingMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEncodingMode</name>
            <anchorfile>qaudioencodersettings.html</anchorfile>
            <anchor>setEncodingMode</anchor>
            <arglist>(QtMultimediaKit::EncodingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>codec</name>
            <anchorfile>qaudioencodersettings.html</anchorfile>
            <anchor>codec</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCodec</name>
            <anchorfile>qaudioencodersettings.html</anchorfile>
            <anchor>setCodec</anchor>
            <arglist>(const QString &amp; codec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bitRate</name>
            <anchorfile>qaudioencodersettings.html</anchorfile>
            <anchor>bitRate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBitRate</name>
            <anchorfile>qaudioencodersettings.html</anchorfile>
            <anchor>setBitRate</anchor>
            <arglist>(int rate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>channelCount</name>
            <anchorfile>qaudioencodersettings.html</anchorfile>
            <anchor>channelCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChannelCount</name>
            <anchorfile>qaudioencodersettings.html</anchorfile>
            <anchor>setChannelCount</anchor>
            <arglist>(int channels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sampleRate</name>
            <anchorfile>qaudioencodersettings.html</anchorfile>
            <anchor>sampleRate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSampleRate</name>
            <anchorfile>qaudioencodersettings.html</anchorfile>
            <anchor>setSampleRate</anchor>
            <arglist>(int rate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QtMultimediaKit::EncodingQuality</type>
            <name>quality</name>
            <anchorfile>qaudioencodersettings.html</anchorfile>
            <anchor>quality</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuality</name>
            <anchorfile>qaudioencodersettings.html</anchorfile>
            <anchor>setQuality</anchor>
            <arglist>(QtMultimediaKit::EncodingQuality quality)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVideoEncoderSettings</name>
        <filename>qvideoencodersettings.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVideoEncoderSettings</name>
            <anchorfile>qvideoencodersettings.html</anchorfile>
            <anchor>QVideoEncoderSettings</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVideoEncoderSettings</name>
            <anchorfile>qvideoencodersettings.html</anchorfile>
            <anchor>QVideoEncoderSettings-2</anchor>
            <arglist>(const QVideoEncoderSettings &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QVideoEncoderSettings</name>
            <anchorfile>qvideoencodersettings.html</anchorfile>
            <anchor>dtor.QVideoEncoderSettings</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVideoEncoderSettings &amp;</type>
            <name>operator=</name>
            <anchorfile>qvideoencodersettings.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QVideoEncoderSettings &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qvideoencodersettings.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QVideoEncoderSettings &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qvideoencodersettings.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QVideoEncoderSettings &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qvideoencodersettings.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QtMultimediaKit::EncodingMode</type>
            <name>encodingMode</name>
            <anchorfile>qvideoencodersettings.html</anchorfile>
            <anchor>encodingMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEncodingMode</name>
            <anchorfile>qvideoencodersettings.html</anchorfile>
            <anchor>setEncodingMode</anchor>
            <arglist>(QtMultimediaKit::EncodingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>codec</name>
            <anchorfile>qvideoencodersettings.html</anchorfile>
            <anchor>codec</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCodec</name>
            <anchorfile>qvideoencodersettings.html</anchorfile>
            <anchor>setCodec</anchor>
            <arglist>(const QString &amp; codec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>resolution</name>
            <anchorfile>qvideoencodersettings.html</anchorfile>
            <anchor>resolution</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResolution</name>
            <anchorfile>qvideoencodersettings.html</anchorfile>
            <anchor>setResolution</anchor>
            <arglist>(const QSize &amp; resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResolution</name>
            <anchorfile>qvideoencodersettings.html</anchorfile>
            <anchor>setResolution-2</anchor>
            <arglist>(int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>frameRate</name>
            <anchorfile>qvideoencodersettings.html</anchorfile>
            <anchor>frameRate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrameRate</name>
            <anchorfile>qvideoencodersettings.html</anchorfile>
            <anchor>setFrameRate</anchor>
            <arglist>(qreal rate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bitRate</name>
            <anchorfile>qvideoencodersettings.html</anchorfile>
            <anchor>bitRate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBitRate</name>
            <anchorfile>qvideoencodersettings.html</anchorfile>
            <anchor>setBitRate</anchor>
            <arglist>(int value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QtMultimediaKit::EncodingQuality</type>
            <name>quality</name>
            <anchorfile>qvideoencodersettings.html</anchorfile>
            <anchor>quality</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuality</name>
            <anchorfile>qvideoencodersettings.html</anchorfile>
            <anchor>setQuality</anchor>
            <arglist>(QtMultimediaKit::EncodingQuality quality)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QImageEncoderSettings</name>
        <filename>qimageencodersettings.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImageEncoderSettings</name>
            <anchorfile>qimageencodersettings.html</anchorfile>
            <anchor>QImageEncoderSettings</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QImageEncoderSettings</name>
            <anchorfile>qimageencodersettings.html</anchorfile>
            <anchor>QImageEncoderSettings-2</anchor>
            <arglist>(const QImageEncoderSettings &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QImageEncoderSettings</name>
            <anchorfile>qimageencodersettings.html</anchorfile>
            <anchor>dtor.QImageEncoderSettings</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImageEncoderSettings &amp;</type>
            <name>operator=</name>
            <anchorfile>qimageencodersettings.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QImageEncoderSettings &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qimageencodersettings.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QImageEncoderSettings &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qimageencodersettings.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QImageEncoderSettings &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qimageencodersettings.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>codec</name>
            <anchorfile>qimageencodersettings.html</anchorfile>
            <anchor>codec</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCodec</name>
            <anchorfile>qimageencodersettings.html</anchorfile>
            <anchor>setCodec</anchor>
            <arglist>(const QString &amp; codec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>resolution</name>
            <anchorfile>qimageencodersettings.html</anchorfile>
            <anchor>resolution</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResolution</name>
            <anchorfile>qimageencodersettings.html</anchorfile>
            <anchor>setResolution</anchor>
            <arglist>(const QSize &amp; resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResolution</name>
            <anchorfile>qimageencodersettings.html</anchorfile>
            <anchor>setResolution-2</anchor>
            <arglist>(int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QtMultimediaKit::EncodingQuality</type>
            <name>quality</name>
            <anchorfile>qimageencodersettings.html</anchorfile>
            <anchor>quality</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuality</name>
            <anchorfile>qimageencodersettings.html</anchorfile>
            <anchor>setQuality</anchor>
            <arglist>(QtMultimediaKit::EncodingQuality quality)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaPlaylistProvider</name>
        <filename>qmediaplaylistprovider.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaPlaylistProvider</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>QMediaPlaylistProvider</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMediaPlaylistProvider</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>dtor.QMediaPlaylistProvider</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>load</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>load</anchor>
            <arglist>(const QUrl &amp; location, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>load</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>load-2</anchor>
            <arglist>(QIODevice * device, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>save</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>save</anchor>
            <arglist>(const QUrl &amp; location, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>save</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>save-2</anchor>
            <arglist>(QIODevice * device, const char * format)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>mediaCount</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>mediaCount</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QMediaContent</type>
            <name>media</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>media</anchor>
            <arglist>(int index) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isReadOnly</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>isReadOnly</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>addMedia</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>addMedia</anchor>
            <arglist>(const QMediaContent &amp; media)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>addMedia</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>addMedia-2</anchor>
            <arglist>(const QList&lt;QMediaContent&gt; &amp; items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertMedia</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>insertMedia</anchor>
            <arglist>(int position, const QMediaContent &amp; media)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertMedia</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>insertMedia-2</anchor>
            <arglist>(int position, const QList&lt;QMediaContent&gt; &amp; items)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeMedia</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>removeMedia</anchor>
            <arglist>(int position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeMedia</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>removeMedia-2</anchor>
            <arglist>(int start, int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>clear</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>shuffle</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>shuffle</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mediaAboutToBeInserted</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>mediaAboutToBeInserted</anchor>
            <arglist>(int start, int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mediaInserted</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>mediaInserted</anchor>
            <arglist>(int start, int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mediaAboutToBeRemoved</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>mediaAboutToBeRemoved</anchor>
            <arglist>(int start, int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mediaRemoved</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>mediaRemoved</anchor>
            <arglist>(int start, int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mediaChanged</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>mediaChanged</anchor>
            <arglist>(int start, int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>loaded</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>loaded</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>loadFailed</name>
            <anchorfile>qmediaplaylistprovider.html</anchorfile>
            <anchor>loadFailed</anchor>
            <arglist>(QMediaPlaylist::Error error, const QString &amp; errorMessage)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactFetchRequest</name>
        <filename>qcontactfetchrequest.html</filename>
        <base>QContactAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactFetchRequest</name>
            <anchorfile>qcontactfetchrequest.html</anchorfile>
            <anchor>QContactFetchRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactFetchRequest</name>
            <anchorfile>qcontactfetchrequest.html</anchorfile>
            <anchor>dtor.QContactFetchRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilter</name>
            <anchorfile>qcontactfetchrequest.html</anchorfile>
            <anchor>setFilter</anchor>
            <arglist>(const QContactFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSorting</name>
            <anchorfile>qcontactfetchrequest.html</anchorfile>
            <anchor>setSorting</anchor>
            <arglist>(const QList&lt;QContactSortOrder&gt; &amp; sorting)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFetchHint</name>
            <anchorfile>qcontactfetchrequest.html</anchorfile>
            <anchor>setFetchHint</anchor>
            <arglist>(const QContactFetchHint &amp; fetchHint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactFilter</type>
            <name>filter</name>
            <anchorfile>qcontactfetchrequest.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactSortOrder&gt;</type>
            <name>sorting</name>
            <anchorfile>qcontactfetchrequest.html</anchorfile>
            <anchor>sorting</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactFetchHint</type>
            <name>fetchHint</name>
            <anchorfile>qcontactfetchrequest.html</anchorfile>
            <anchor>fetchHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContact&gt;</type>
            <name>contacts</name>
            <anchorfile>qcontactfetchrequest.html</anchorfile>
            <anchor>contacts</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGalleryUrlRequest</name>
        <filename>qgalleryurlrequest.html</filename>
        <base>QGalleryAbstractRequest</base>
        <member kind="property" type="QUrl">
            <name>itemUrl</name>
            <anchorfile>qgalleryurlrequest.html</anchorfile>
            <anchor>itemUrl-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>create</name>
            <anchorfile>qgalleryurlrequest.html</anchorfile>
            <anchor>create-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>itemId</name>
            <anchorfile>qgalleryurlrequest.html</anchorfile>
            <anchor>itemId-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>itemType</name>
            <anchorfile>qgalleryurlrequest.html</anchorfile>
            <anchor>itemType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryUrlRequest</name>
            <anchorfile>qgalleryurlrequest.html</anchorfile>
            <anchor>QGalleryUrlRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryUrlRequest</name>
            <anchorfile>qgalleryurlrequest.html</anchorfile>
            <anchor>QGalleryUrlRequest-2</anchor>
            <arglist>(QAbstractGallery * gallery, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGalleryUrlRequest</name>
            <anchorfile>qgalleryurlrequest.html</anchorfile>
            <anchor>dtor.QGalleryUrlRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>itemUrl</name>
            <anchorfile>qgalleryurlrequest.html</anchorfile>
            <anchor>itemUrl-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemUrl</name>
            <anchorfile>qgalleryurlrequest.html</anchorfile>
            <anchor>itemUrl-prop</anchor>
            <arglist>(const QUrl &amp; url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qgalleryurlrequest.html</anchorfile>
            <anchor>create-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCreate</name>
            <anchorfile>qgalleryurlrequest.html</anchorfile>
            <anchor>create-prop</anchor>
            <arglist>(bool create)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>itemId</name>
            <anchorfile>qgalleryurlrequest.html</anchorfile>
            <anchor>itemId-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>itemType</name>
            <anchorfile>qgalleryurlrequest.html</anchorfile>
            <anchor>itemType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemChanged</name>
            <anchorfile>qgalleryurlrequest.html</anchorfile>
            <anchor>itemChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setResponse</name>
            <anchorfile>qgalleryurlrequest.html</anchorfile>
            <anchor>setResponse</anchor>
            <arglist>(QGalleryAbstractResponse * response)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemManagerEngineFactory</name>
        <filename>qorganizeritemmanagerenginefactory.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;int&gt;</type>
            <name>supportedImplementationVersions</name>
            <anchorfile>qorganizeritemmanagerenginefactory.html</anchorfile>
            <anchor>supportedImplementationVersions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QOrganizerItemManagerEngineFactory</name>
            <anchorfile>qorganizeritemmanagerenginefactory.html</anchorfile>
            <anchor>dtor.QOrganizerItemManagerEngineFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QOrganizerItemManagerEngine *</type>
            <name>engine</name>
            <anchorfile>qorganizeritemmanagerenginefactory.html</anchorfile>
            <anchor>engine</anchor>
            <arglist>(const QMap&lt;QString, QString&gt; &amp; parameters, QOrganizerItemManager::Error * error) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>managerName</name>
            <anchorfile>qorganizeritemmanagerenginefactory.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGalleryAbstractRequest</name>
        <filename>qgalleryabstractrequest.html</filename>
        <member kind="property" type="QAbstractGallery *">
            <name>gallery</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>gallery-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>supported</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>supported-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="State">
            <name>state</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>result</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>result-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>currentProgress</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>currentProgress-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maximumProgress</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>maximumProgress-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Inactive">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Active">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Cancelling">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Idle">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Result</name>
            <anchor>Result-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoResult">
            <anchor>Result-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Succeeded">
            <anchor>Result-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Cancelled">
            <anchor>Result-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoGallery">
            <anchor>Result-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotSupported">
            <anchor>Result-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConnectionError">
            <anchor>Result-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidItemError">
            <anchor>Result-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemTypeError">
            <anchor>Result-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidPropertyError">
            <anchor>Result-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PropertyTypeError">
            <anchor>Result-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsupportedFilterTypeError">
            <anchor>Result-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsupportedFilterOptionError">
            <anchor>Result-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PermissionsError">
            <anchor>Result-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidDestinationError">
            <anchor>Result-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidUrlError">
            <anchor>Result-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RequestError">
            <anchor>Result-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Item">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Url">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Query">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Count">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Remove">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Scope</name>
            <anchor>Scope-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllDescendants">
            <anchor>Scope-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirectDescendants">
            <anchor>Scope-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryAbstractRequest</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>QGalleryAbstractRequest</anchor>
            <arglist>(Type type, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryAbstractRequest</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>QGalleryAbstractRequest-2</anchor>
            <arglist>(QAbstractGallery * gallery, Type type, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGalleryAbstractRequest</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>dtor.QGalleryAbstractRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractGallery *</type>
            <name>gallery</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>gallery-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGallery</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>gallery-prop</anchor>
            <arglist>(QAbstractGallery * gallery)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSupported</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>supported-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type</type>
            <name>type</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>State</type>
            <name>state</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>result</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>result-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentProgress</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>currentProgress-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumProgress</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>maximumProgress-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForFinished</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>waitForFinished</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>execute</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>execute</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancel</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>cancel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>supportedChanged</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>supportedChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>succeeded</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>succeeded</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancelled</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>cancelled</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>failed</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>failed</anchor>
            <arglist>(int result)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>(int result)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QGalleryAbstractRequest::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resultChanged</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>resultChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>progressChanged</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>progressChanged</anchor>
            <arglist>(int current, int maximum)</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setResponse</name>
            <anchorfile>qgalleryabstractrequest.html</anchorfile>
            <anchor>setResponse</anchor>
            <arglist>(QGalleryAbstractResponse * response) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemDetailFilter</name>
        <filename>qorganizeritemdetailfilter.html</filename>
        <base>QOrganizerItemFilter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemDetailFilter</name>
            <anchorfile>qorganizeritemdetailfilter.html</anchorfile>
            <anchor>QOrganizerItemDetailFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemDetailFilter</name>
            <anchorfile>qorganizeritemdetailfilter.html</anchorfile>
            <anchor>QOrganizerItemDetailFilter-2</anchor>
            <arglist>(const QOrganizerItemFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDetailDefinitionName</name>
            <anchorfile>qorganizeritemdetailfilter.html</anchorfile>
            <anchor>setDetailDefinitionName</anchor>
            <arglist>(const QString &amp; definitionName, const QString &amp; fieldName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatchFlags</name>
            <anchorfile>qorganizeritemdetailfilter.html</anchorfile>
            <anchor>setMatchFlags</anchor>
            <arglist>(QFlags&lt;QOrganizerItemFilter::MatchFlag&gt; flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qorganizeritemdetailfilter.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const QVariant &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>detailDefinitionName</name>
            <anchorfile>qorganizeritemdetailfilter.html</anchorfile>
            <anchor>detailDefinitionName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>detailFieldName</name>
            <anchorfile>qorganizeritemdetailfilter.html</anchorfile>
            <anchor>detailFieldName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemFilter::MatchFlags</type>
            <name>matchFlags</name>
            <anchorfile>qorganizeritemdetailfilter.html</anchorfile>
            <anchor>matchFlags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qorganizeritemdetailfilter.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactRelationshipFetchRequest</name>
        <filename>qcontactrelationshipfetchrequest.html</filename>
        <base>QContactAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactRelationshipFetchRequest</name>
            <anchorfile>qcontactrelationshipfetchrequest.html</anchorfile>
            <anchor>QContactRelationshipFetchRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactRelationshipFetchRequest</name>
            <anchorfile>qcontactrelationshipfetchrequest.html</anchorfile>
            <anchor>dtor.QContactRelationshipFetchRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFirst</name>
            <anchorfile>qcontactrelationshipfetchrequest.html</anchorfile>
            <anchor>setFirst</anchor>
            <arglist>(const QContactId &amp; firstId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactId</type>
            <name>first</name>
            <anchorfile>qcontactrelationshipfetchrequest.html</anchorfile>
            <anchor>first</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRelationshipType</name>
            <anchorfile>qcontactrelationshipfetchrequest.html</anchorfile>
            <anchor>setRelationshipType</anchor>
            <arglist>(const QString &amp; relationshipType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>relationshipType</name>
            <anchorfile>qcontactrelationshipfetchrequest.html</anchorfile>
            <anchor>relationshipType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSecond</name>
            <anchorfile>qcontactrelationshipfetchrequest.html</anchorfile>
            <anchor>setSecond</anchor>
            <arglist>(const QContactId &amp; secondId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactId</type>
            <name>second</name>
            <anchorfile>qcontactrelationshipfetchrequest.html</anchorfile>
            <anchor>second</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactRelationship&gt;</type>
            <name>relationships</name>
            <anchorfile>qcontactrelationshipfetchrequest.html</anchorfile>
            <anchor>relationships</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemInstanceFetchRequest</name>
        <filename>qorganizeriteminstancefetchrequest.html</filename>
        <base>QOrganizerItemAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemInstanceFetchRequest</name>
            <anchorfile>qorganizeriteminstancefetchrequest.html</anchorfile>
            <anchor>QOrganizerItemInstanceFetchRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilter</name>
            <anchorfile>qorganizeriteminstancefetchrequest.html</anchorfile>
            <anchor>setFilter</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSorting</name>
            <anchorfile>qorganizeriteminstancefetchrequest.html</anchorfile>
            <anchor>setSorting</anchor>
            <arglist>(const QList&lt;QOrganizerItemSortOrder&gt; &amp; sorting)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFetchHint</name>
            <anchorfile>qorganizeriteminstancefetchrequest.html</anchorfile>
            <anchor>setFetchHint</anchor>
            <arglist>(const QOrganizerItemFetchHint &amp; fetchHint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemFilter</type>
            <name>filter</name>
            <anchorfile>qorganizeriteminstancefetchrequest.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItemSortOrder&gt;</type>
            <name>sorting</name>
            <anchorfile>qorganizeriteminstancefetchrequest.html</anchorfile>
            <anchor>sorting</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemFetchHint</type>
            <name>fetchHint</name>
            <anchorfile>qorganizeriteminstancefetchrequest.html</anchorfile>
            <anchor>fetchHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItem&gt;</type>
            <name>items</name>
            <anchorfile>qorganizeriteminstancefetchrequest.html</anchorfile>
            <anchor>items</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAudioInput</name>
        <filename>qaudioinput.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAudioInput</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>QAudioInput</anchor>
            <arglist>(const QAudioFormat &amp; format, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAudioInput</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>QAudioInput-2</anchor>
            <arglist>(const QAudioDeviceInfo &amp; audioDevice, const QAudioFormat &amp; format, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAudioInput</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>dtor.QAudioInput</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAudioFormat</type>
            <name>format</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>start</anchor>
            <arglist>(QIODevice * device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>start</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>start-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>suspend</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>suspend</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resume</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>resume</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBufferSize</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>setBufferSize</anchor>
            <arglist>(int value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bufferSize</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>bufferSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bytesReady</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>bytesReady</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>periodSize</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>periodSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNotifyInterval</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>setNotifyInterval</anchor>
            <arglist>(int ms)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>notifyInterval</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>notifyInterval</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>processedUSecs</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>processedUSecs</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>elapsedUSecs</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>elapsedUSecs</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAudio::Error</type>
            <name>error</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAudio::State</type>
            <name>state</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QAudio::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>notify</name>
            <anchorfile>qaudioinput.html</anchorfile>
            <anchor>notify</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFeedbackEffect</name>
        <filename>qfeedbackeffect.html</filename>
        <member kind="property" type="int">
            <name>duration</name>
            <anchorfile>qfeedbackeffect.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="State">
            <name>state</name>
            <anchorfile>qfeedbackeffect.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ThemeEffect</name>
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeBasic">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeSensitive">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeBasicButton">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeSensitiveButton">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeBasicKeypad">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeSensitiveKeypad">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeBasicSlider">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeSensitiveSlider">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeBasicItem">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeSensitiveItem">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeItemScroll">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeItemPick">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeItemDrop">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeItemMoveOver">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeBounceEffect">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeCheckBox">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeMultipleCheckBox">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeEditor">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeTextSelection">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeBlankSelection">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeLineSelection">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeEmptyLineSelection">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemePopUp">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemePopupOpen">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemePopupClose">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeFlick">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeStopFlick">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeMultitouchActivate">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeRotateStep">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeLongPress">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemePositiveTacticon">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeNeutralTacticon">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeNegativeTacticon">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NumberOfThemeEffects">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ThemeUser">
            <anchor>ThemeEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Duration</name>
            <anchor>Duration-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="INFINITE">
            <anchor>Duration-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Stopped">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Paused">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Running">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Loading">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ErrorType</name>
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownError">
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DeviceBusy">
            <anchor>ErrorType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFeedbackEffect</name>
            <anchorfile>qfeedbackeffect.html</anchorfile>
            <anchor>QFeedbackEffect</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual State</type>
            <name>state</name>
            <anchorfile>qfeedbackeffect.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>duration</name>
            <anchorfile>qfeedbackeffect.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>supportsThemeEffect</name>
            <anchorfile>qfeedbackeffect.html</anchorfile>
            <anchor>supportsThemeEffect</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>playThemeEffect</name>
            <anchorfile>qfeedbackeffect.html</anchorfile>
            <anchor>playThemeEffect</anchor>
            <arglist>(ThemeEffect effect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qfeedbackeffect.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qfeedbackeffect.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pause</name>
            <anchorfile>qfeedbackeffect.html</anchorfile>
            <anchor>pause</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setState</name>
            <anchorfile>qfeedbackeffect.html</anchorfile>
            <anchor>setState</anchor>
            <arglist>(State ) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qfeedbackeffect.html</anchorfile>
            <anchor>error</anchor>
            <arglist>(QFeedbackEffect::ErrorType ) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFeedbackHapticsEffect</name>
        <filename>qfeedbackhapticseffect.html</filename>
        <base>QFeedbackEffect</base>
        <member kind="property" type="int">
            <name>duration</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>intensity</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>intensity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>attackTime</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>attackTime-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>attackIntensity</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>attackIntensity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>fadeTime</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>fadeTime-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>fadeIntensity</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>fadeIntensity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>period</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>period-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QFeedbackActuator">
            <name>actuator</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>actuator-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFeedbackHapticsEffect</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>QFeedbackHapticsEffect</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFeedbackHapticsEffect</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>dtor.QFeedbackHapticsEffect</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDuration</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>duration</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIntensity</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>intensity-prop</anchor>
            <arglist>(qreal intensity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>intensity</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>intensity-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttackTime</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>attackTime-prop</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>attackTime</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>attackTime-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttackIntensity</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>attackIntensity-prop</anchor>
            <arglist>(qreal intensity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>attackIntensity</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>attackIntensity-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFadeTime</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>fadeTime-prop</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>fadeTime</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>fadeTime-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFadeIntensity</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>fadeIntensity-prop</anchor>
            <arglist>(qreal intensity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>fadeIntensity</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>fadeIntensity-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPeriod</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>period-prop</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>period</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>period-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActuator</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>actuator-prop</anchor>
            <arglist>(const QFeedbackActuator &amp; actuator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFeedbackActuator</type>
            <name>actuator</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>actuator-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual State</type>
            <name>state</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setState</name>
            <anchorfile>qfeedbackhapticseffect.html</anchorfile>
            <anchor>setState</anchor>
            <arglist>(State )</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFeedbackFileEffect</name>
        <filename>qfeedbackfileeffect.html</filename>
        <base>QFeedbackEffect</base>
        <member kind="property" type="bool">
            <name>loaded</name>
            <anchorfile>qfeedbackfileeffect.html</anchorfile>
            <anchor>loaded-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>fileName</name>
            <anchorfile>qfeedbackfileeffect.html</anchorfile>
            <anchor>fileName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFeedbackFileEffect</name>
            <anchorfile>qfeedbackfileeffect.html</anchorfile>
            <anchor>QFeedbackFileEffect</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFeedbackFileEffect</name>
            <anchorfile>qfeedbackfileeffect.html</anchorfile>
            <anchor>dtor.QFeedbackFileEffect</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>duration</name>
            <anchorfile>qfeedbackfileeffect.html</anchorfile>
            <anchor>duration</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLoaded</name>
            <anchorfile>qfeedbackfileeffect.html</anchorfile>
            <anchor>loaded-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>load</name>
            <anchorfile>qfeedbackfileeffect.html</anchorfile>
            <anchor>load</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unload</name>
            <anchorfile>qfeedbackfileeffect.html</anchorfile>
            <anchor>unload</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLoaded</name>
            <anchorfile>qfeedbackfileeffect.html</anchorfile>
            <anchor>loaded-prop</anchor>
            <arglist>(bool )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qfeedbackfileeffect.html</anchorfile>
            <anchor>fileName-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qfeedbackfileeffect.html</anchorfile>
            <anchor>fileName-prop</anchor>
            <arglist>(const QString &amp; )</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>supportedMimeTypes</name>
            <anchorfile>qfeedbackfileeffect.html</anchorfile>
            <anchor>supportedMimeTypes</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual State</type>
            <name>state</name>
            <anchorfile>qfeedbackfileeffect.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setState</name>
            <anchorfile>qfeedbackfileeffect.html</anchorfile>
            <anchor>setState</anchor>
            <arglist>(State )</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactRelationshipRemoveRequest</name>
        <filename>qcontactrelationshipremoverequest.html</filename>
        <base>QContactAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactRelationshipRemoveRequest</name>
            <anchorfile>qcontactrelationshipremoverequest.html</anchorfile>
            <anchor>QContactRelationshipRemoveRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactRelationshipRemoveRequest</name>
            <anchorfile>qcontactrelationshipremoverequest.html</anchorfile>
            <anchor>dtor.QContactRelationshipRemoveRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRelationship</name>
            <anchorfile>qcontactrelationshipremoverequest.html</anchorfile>
            <anchor>setRelationship</anchor>
            <arglist>(const QContactRelationship &amp; relationship)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRelationships</name>
            <anchorfile>qcontactrelationshipremoverequest.html</anchorfile>
            <anchor>setRelationships</anchor>
            <arglist>(const QList&lt;QContactRelationship&gt; &amp; relationships)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactRelationship&gt;</type>
            <name>relationships</name>
            <anchorfile>qcontactrelationshipremoverequest.html</anchorfile>
            <anchor>relationships</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;int, QContactManager::Error&gt;</type>
            <name>errorMap</name>
            <anchorfile>qcontactrelationshipremoverequest.html</anchorfile>
            <anchor>errorMap</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkFetchHint</name>
        <filename>qlandmarkfetchhint.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkFetchHint</name>
            <anchorfile>qlandmarkfetchhint.html</anchorfile>
            <anchor>QLandmarkFetchHint</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkFetchHint</name>
            <anchorfile>qlandmarkfetchhint.html</anchorfile>
            <anchor>QLandmarkFetchHint-2</anchor>
            <arglist>(const QLandmarkFetchHint &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLandmarkFetchHint</name>
            <anchorfile>qlandmarkfetchhint.html</anchorfile>
            <anchor>dtor.QLandmarkFetchHint</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkFetchHint &amp;</type>
            <name>operator=</name>
            <anchorfile>qlandmarkfetchhint.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QLandmarkFetchHint &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaxItems</name>
            <anchorfile>qlandmarkfetchhint.html</anchorfile>
            <anchor>setMaxItems</anchor>
            <arglist>(int max)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxItems</name>
            <anchorfile>qlandmarkfetchhint.html</anchorfile>
            <anchor>maxItems</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOffset</name>
            <anchorfile>qlandmarkfetchhint.html</anchorfile>
            <anchor>setOffset</anchor>
            <arglist>(int offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>offset</name>
            <anchorfile>qlandmarkfetchhint.html</anchorfile>
            <anchor>offset</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaPlayerControl</name>
        <filename>qmediaplayercontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMediaPlayerControl</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>dtor.QMediaPlayerControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QMediaPlayer::State</type>
            <name>state</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QMediaPlayer::MediaStatus</type>
            <name>mediaStatus</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>mediaStatus</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual qint64</type>
            <name>duration</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>duration</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual qint64</type>
            <name>position</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setPosition</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>setPosition</anchor>
            <arglist>(qint64 position) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>volume</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>volume</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setVolume</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>setVolume</anchor>
            <arglist>(int volume) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isMuted</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>isMuted</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setMuted</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>setMuted</anchor>
            <arglist>(bool mute) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>bufferStatus</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>bufferStatus</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isAudioAvailable</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>isAudioAvailable</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isVideoAvailable</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>isVideoAvailable</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isSeekable</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>isSeekable</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QMediaTimeRange</type>
            <name>availablePlaybackRanges</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>availablePlaybackRanges</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual qreal</type>
            <name>playbackRate</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>playbackRate</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setPlaybackRate</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>setPlaybackRate</anchor>
            <arglist>(qreal rate) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QMediaContent</type>
            <name>media</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>media</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual const QIODevice *</type>
            <name>mediaStream</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>mediaStream</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setMedia</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>setMedia</anchor>
            <arglist>(const QMediaContent &amp; media, QIODevice * stream) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>play</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>play</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>pause</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>pause</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>stop</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mediaChanged</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>mediaChanged</anchor>
            <arglist>(const QMediaContent &amp; content)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>durationChanged</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>durationChanged</anchor>
            <arglist>(qint64 duration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionChanged</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>positionChanged</anchor>
            <arglist>(qint64 position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QMediaPlayer::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mediaStatusChanged</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>mediaStatusChanged</anchor>
            <arglist>(QMediaPlayer::MediaStatus status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>volumeChanged</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>volumeChanged</anchor>
            <arglist>(int volume)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mutedChanged</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>mutedChanged</anchor>
            <arglist>(bool mute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>audioAvailableChanged</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>audioAvailableChanged</anchor>
            <arglist>(bool audio)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>videoAvailableChanged</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>videoAvailableChanged</anchor>
            <arglist>(bool video)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bufferStatusChanged</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>bufferStatusChanged</anchor>
            <arglist>(int progress)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>seekableChanged</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>seekableChanged</anchor>
            <arglist>(bool seekable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>availablePlaybackRangesChanged</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>availablePlaybackRangesChanged</anchor>
            <arglist>(const QMediaTimeRange &amp; ranges)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>playbackRateChanged</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>playbackRateChanged</anchor>
            <arglist>(qreal rate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>error</anchor>
            <arglist>(int error, const QString &amp; errorString)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QMediaPlayerControl</name>
            <anchorfile>qmediaplayercontrol.html</anchorfile>
            <anchor>QMediaPlayerControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemDetailFieldDefinition</name>
        <filename>qorganizeritemdetailfielddefinition.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemDetailFieldDefinition</name>
            <anchorfile>qorganizeritemdetailfielddefinition.html</anchorfile>
            <anchor>QOrganizerItemDetailFieldDefinition</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOrganizerItemDetailFieldDefinition</name>
            <anchorfile>qorganizeritemdetailfielddefinition.html</anchorfile>
            <anchor>dtor.QOrganizerItemDetailFieldDefinition</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemDetailFieldDefinition</name>
            <anchorfile>qorganizeritemdetailfielddefinition.html</anchorfile>
            <anchor>QOrganizerItemDetailFieldDefinition-2</anchor>
            <arglist>(const QOrganizerItemDetailFieldDefinition &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemDetailFieldDefinition &amp;</type>
            <name>operator=</name>
            <anchorfile>qorganizeritemdetailfielddefinition.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QOrganizerItemDetailFieldDefinition &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant::Type</type>
            <name>dataType</name>
            <anchorfile>qorganizeritemdetailfielddefinition.html</anchorfile>
            <anchor>dataType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDataType</name>
            <anchorfile>qorganizeritemdetailfielddefinition.html</anchorfile>
            <anchor>setDataType</anchor>
            <arglist>(QVariant::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantList</type>
            <name>allowableValues</name>
            <anchorfile>qorganizeritemdetailfielddefinition.html</anchorfile>
            <anchor>allowableValues</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAllowableValues</name>
            <anchorfile>qorganizeritemdetailfielddefinition.html</anchorfile>
            <anchor>setAllowableValues</anchor>
            <arglist>(const QVariantList values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qorganizeritemdetailfielddefinition.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QOrganizerItemDetailFieldDefinition &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qorganizeritemdetailfielddefinition.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QOrganizerItemDetailFieldDefinition &amp; other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractVideoSurface</name>
        <filename>qabstractvideosurface.html</filename>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsupportedFormatError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IncorrectFormatError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StoppedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ResourceError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractVideoSurface</name>
            <anchorfile>qabstractvideosurface.html</anchorfile>
            <anchor>QAbstractVideoSurface</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractVideoSurface</name>
            <anchorfile>qabstractvideosurface.html</anchorfile>
            <anchor>dtor.QAbstractVideoSurface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;QVideoFrame::PixelFormat&gt;</type>
            <name>supportedPixelFormats</name>
            <anchorfile>qabstractvideosurface.html</anchorfile>
            <anchor>supportedPixelFormats</anchor>
            <arglist>(QAbstractVideoBuffer::HandleType type) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isFormatSupported</name>
            <anchorfile>qabstractvideosurface.html</anchorfile>
            <anchor>isFormatSupported</anchor>
            <arglist>(const QVideoSurfaceFormat &amp; format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVideoSurfaceFormat</type>
            <name>nearestFormat</name>
            <anchorfile>qabstractvideosurface.html</anchorfile>
            <anchor>nearestFormat</anchor>
            <arglist>(const QVideoSurfaceFormat &amp; format) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVideoSurfaceFormat</type>
            <name>surfaceFormat</name>
            <anchorfile>qabstractvideosurface.html</anchorfile>
            <anchor>surfaceFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>start</name>
            <anchorfile>qabstractvideosurface.html</anchorfile>
            <anchor>start</anchor>
            <arglist>(const QVideoSurfaceFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>stop</name>
            <anchorfile>qabstractvideosurface.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qabstractvideosurface.html</anchorfile>
            <anchor>isActive</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>present</name>
            <anchorfile>qabstractvideosurface.html</anchorfile>
            <anchor>present</anchor>
            <arglist>(const QVideoFrame &amp; frame) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qabstractvideosurface.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeChanged</name>
            <anchorfile>qabstractvideosurface.html</anchorfile>
            <anchor>activeChanged</anchor>
            <arglist>(bool active)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>surfaceFormatChanged</name>
            <anchorfile>qabstractvideosurface.html</anchorfile>
            <anchor>surfaceFormatChanged</anchor>
            <arglist>(const QVideoSurfaceFormat &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>supportedFormatsChanged</name>
            <anchorfile>qabstractvideosurface.html</anchorfile>
            <anchor>supportedFormatsChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setError</name>
            <anchorfile>qabstractvideosurface.html</anchorfile>
            <anchor>setError</anchor>
            <arglist>(Error error)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkFilter</name>
        <filename>qlandmarkfilter.html</filename>
        <member kind="enum">
            <name>FilterType</name>
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DefaultFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NameFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProximityFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CategoryFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BoxFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IntersectionFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnionFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AttributeFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LandmarkIdFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkFilter</name>
            <anchorfile>qlandmarkfilter.html</anchorfile>
            <anchor>QLandmarkFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkFilter</name>
            <anchorfile>qlandmarkfilter.html</anchorfile>
            <anchor>QLandmarkFilter-2</anchor>
            <arglist>(const QLandmarkFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkFilter &amp;</type>
            <name>operator=</name>
            <anchorfile>qlandmarkfilter.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QLandmarkFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QLandmarkFilter</name>
            <anchorfile>qlandmarkfilter.html</anchorfile>
            <anchor>dtor.QLandmarkFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FilterType</type>
            <name>type</name>
            <anchorfile>qlandmarkfilter.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlandmarkfilter.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QLandmarkFilter &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlandmarkfilter.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QLandmarkFilter &amp; other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDocumentGallery</name>
        <filename>qdocumentgallery.html</filename>
        <base>QAbstractGallery</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDocumentGallery</name>
            <anchorfile>qdocumentgallery.html</anchorfile>
            <anchor>QDocumentGallery</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDocumentGallery</name>
            <anchorfile>qdocumentgallery.html</anchorfile>
            <anchor>dtor.QDocumentGallery</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isRequestSupported</name>
            <anchorfile>qdocumentgallery.html</anchorfile>
            <anchor>isRequestSupported</anchor>
            <arglist>(QGalleryAbstractRequest::Type type) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>itemTypePropertyNames</name>
            <anchorfile>qdocumentgallery.html</anchorfile>
            <anchor>itemTypePropertyNames</anchor>
            <arglist>(const QString &amp; itemType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGalleryProperty::Attributes</type>
            <name>propertyAttributes</name>
            <anchorfile>qdocumentgallery.html</anchorfile>
            <anchor>propertyAttributes</anchor>
            <arglist>(const QString &amp; propertyName, const QString &amp; itemType) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QGalleryAbstractResponse *</type>
            <name>createResponse</name>
            <anchorfile>qdocumentgallery.html</anchorfile>
            <anchor>createResponse</anchor>
            <arglist>(QGalleryAbstractRequest * request)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkCategoryRemoveRequest</name>
        <filename>qlandmarkcategoryremoverequest.html</filename>
        <base>QLandmarkAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkCategoryRemoveRequest</name>
            <anchorfile>qlandmarkcategoryremoverequest.html</anchorfile>
            <anchor>QLandmarkCategoryRemoveRequest</anchor>
            <arglist>(QLandmarkManager * manager, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLandmarkCategoryRemoveRequest</name>
            <anchorfile>qlandmarkcategoryremoverequest.html</anchorfile>
            <anchor>dtor.QLandmarkCategoryRemoveRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkCategoryId&gt;</type>
            <name>categoryIds</name>
            <anchorfile>qlandmarkcategoryremoverequest.html</anchorfile>
            <anchor>categoryIds</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCategoryIds</name>
            <anchorfile>qlandmarkcategoryremoverequest.html</anchorfile>
            <anchor>setCategoryIds</anchor>
            <arglist>(const QList&lt;QLandmarkCategoryId&gt; &amp; categoryIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCategoryId</name>
            <anchorfile>qlandmarkcategoryremoverequest.html</anchorfile>
            <anchor>setCategoryId</anchor>
            <arglist>(const QLandmarkCategoryId &amp; categoryId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;int, QLandmarkManager::Error&gt;</type>
            <name>errorMap</name>
            <anchorfile>qlandmarkcategoryremoverequest.html</anchorfile>
            <anchor>errorMap</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkSortOrder</name>
        <filename>qlandmarksortorder.html</filename>
        <member kind="enum">
            <name>SortType</name>
            <anchor>SortType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DefaultSort">
            <anchor>SortType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NameSort">
            <anchor>SortType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DistanceSort">
            <anchor>SortType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkSortOrder</name>
            <anchorfile>qlandmarksortorder.html</anchorfile>
            <anchor>QLandmarkSortOrder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkSortOrder</name>
            <anchorfile>qlandmarksortorder.html</anchorfile>
            <anchor>QLandmarkSortOrder-2</anchor>
            <arglist>(const QLandmarkSortOrder &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkSortOrder &amp;</type>
            <name>operator=</name>
            <anchorfile>qlandmarksortorder.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QLandmarkSortOrder &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QLandmarkSortOrder</name>
            <anchorfile>qlandmarksortorder.html</anchorfile>
            <anchor>dtor.QLandmarkSortOrder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SortType</type>
            <name>type</name>
            <anchorfile>qlandmarksortorder.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::SortOrder</type>
            <name>direction</name>
            <anchorfile>qlandmarksortorder.html</anchorfile>
            <anchor>direction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirection</name>
            <anchorfile>qlandmarksortorder.html</anchorfile>
            <anchor>setDirection</anchor>
            <arglist>(Qt::SortOrder direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlandmarksortorder.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QLandmarkSortOrder &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlandmarksortorder.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QLandmarkSortOrder &amp; other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkId</name>
        <filename>qlandmarkid.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkId</name>
            <anchorfile>qlandmarkid.html</anchorfile>
            <anchor>QLandmarkId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkId</name>
            <anchorfile>qlandmarkid.html</anchorfile>
            <anchor>QLandmarkId-2</anchor>
            <arglist>(const QLandmarkId &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLandmarkId</name>
            <anchorfile>qlandmarkid.html</anchorfile>
            <anchor>dtor.QLandmarkId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qlandmarkid.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalId</name>
            <anchorfile>qlandmarkid.html</anchorfile>
            <anchor>setLocalId</anchor>
            <arglist>(const QString &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>localId</name>
            <anchorfile>qlandmarkid.html</anchorfile>
            <anchor>localId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerUri</name>
            <anchorfile>qlandmarkid.html</anchorfile>
            <anchor>managerUri</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setManagerUri</name>
            <anchorfile>qlandmarkid.html</anchorfile>
            <anchor>setManagerUri</anchor>
            <arglist>(const QString &amp; uri)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkId &amp;</type>
            <name>operator=</name>
            <anchorfile>qlandmarkid.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QLandmarkId &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlandmarkid.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QLandmarkId &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlandmarkid.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QLandmarkId &amp; other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageFolderSortOrder</name>
        <filename>qmessagefoldersortorder.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageFolderSortOrder</name>
            <anchorfile>qmessagefoldersortorder.html</anchorfile>
            <anchor>QMessageFolderSortOrder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageFolderSortOrder</name>
            <anchorfile>qmessagefoldersortorder.html</anchorfile>
            <anchor>QMessageFolderSortOrder-2</anchor>
            <arglist>(const QMessageFolderSortOrder &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMessageFolderSortOrder</name>
            <anchorfile>qmessagefoldersortorder.html</anchorfile>
            <anchor>dtor.QMessageFolderSortOrder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qmessagefoldersortorder.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSupported</name>
            <anchorfile>qmessagefoldersortorder.html</anchorfile>
            <anchor>isSupported</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageFolderSortOrder</type>
            <name>operator+</name>
            <anchorfile>qmessagefoldersortorder.html</anchorfile>
            <anchor>operator+</anchor>
            <arglist>(const QMessageFolderSortOrder &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageFolderSortOrder &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmessagefoldersortorder.html</anchorfile>
            <anchor>operator+=</anchor>
            <arglist>(const QMessageFolderSortOrder &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFolderSortOrder</type>
            <name>byName</name>
            <anchorfile>qmessagefoldersortorder.html</anchorfile>
            <anchor>byName</anchor>
            <arglist>(Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFolderSortOrder</type>
            <name>byPath</name>
            <anchorfile>qmessagefoldersortorder.html</anchorfile>
            <anchor>byPath</anchor>
            <arglist>(Qt::SortOrder order)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactRemoveRequest</name>
        <filename>qcontactremoverequest.html</filename>
        <base>QContactAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactRemoveRequest</name>
            <anchorfile>qcontactremoverequest.html</anchorfile>
            <anchor>QContactRemoveRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactRemoveRequest</name>
            <anchorfile>qcontactremoverequest.html</anchorfile>
            <anchor>dtor.QContactRemoveRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContactId</name>
            <anchorfile>qcontactremoverequest.html</anchorfile>
            <anchor>setContactId</anchor>
            <arglist>(const QContactLocalId &amp; contactId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContactIds</name>
            <anchorfile>qcontactremoverequest.html</anchorfile>
            <anchor>setContactIds</anchor>
            <arglist>(const QList&lt;QContactLocalId&gt; &amp; contactIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactLocalId&gt;</type>
            <name>contactIds</name>
            <anchorfile>qcontactremoverequest.html</anchorfile>
            <anchor>contactIds</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;int, QContactManager::Error&gt;</type>
            <name>errorMap</name>
            <anchorfile>qcontactremoverequest.html</anchorfile>
            <anchor>errorMap</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemUnionFilter</name>
        <filename>qorganizeritemunionfilter.html</filename>
        <base>QOrganizerItemFilter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemUnionFilter</name>
            <anchorfile>qorganizeritemunionfilter.html</anchorfile>
            <anchor>QOrganizerItemUnionFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemUnionFilter</name>
            <anchorfile>qorganizeritemunionfilter.html</anchorfile>
            <anchor>QOrganizerItemUnionFilter-2</anchor>
            <arglist>(const QOrganizerItemFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilters</name>
            <anchorfile>qorganizeritemunionfilter.html</anchorfile>
            <anchor>setFilters</anchor>
            <arglist>(const QList&lt;QOrganizerItemFilter&gt; &amp; filters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepend</name>
            <anchorfile>qorganizeritemunionfilter.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qorganizeritemunionfilter.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qorganizeritemunionfilter.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemUnionFilter &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qorganizeritemunionfilter.html</anchorfile>
            <anchor>operator&lt;&lt;</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItemFilter&gt;</type>
            <name>filters</name>
            <anchorfile>qorganizeritemunionfilter.html</anchorfile>
            <anchor>filters</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkConfigurationManager</name>
        <filename>qnetworkconfigurationmanager.html</filename>
        <member kind="enum">
            <name>Capability</name>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CanStartAndStopInterfaces">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DirectConnectionRouting">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SystemSessionSupport">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ApplicationLevelRoaming">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ForcedRoaming">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DataStatistics">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NetworkSessionRequired">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QNetworkConfigurationManager::Capability">
            <name>Capabilities</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>Capabilities-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkConfigurationManager</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>QNetworkConfigurationManager</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QNetworkConfigurationManager</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>dtor.QNetworkConfigurationManager</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfigurationManager::Capabilities</type>
            <name>capabilities</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>capabilities</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration</type>
            <name>defaultConfiguration</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>defaultConfiguration</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QNetworkConfiguration&gt;</type>
            <name>allConfigurations</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>allConfigurations</anchor>
            <arglist>(QFlags&lt;QNetworkConfiguration::StateFlag&gt; filter) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration</type>
            <name>configurationFromIdentifier</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>configurationFromIdentifier</anchor>
            <arglist>(const QString &amp; identifier) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateConfigurations</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>updateConfigurations</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isOnline</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>isOnline</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>configurationAdded</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>configurationAdded</anchor>
            <arglist>(const QNetworkConfiguration &amp; config)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>configurationRemoved</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>configurationRemoved</anchor>
            <arglist>(const QNetworkConfiguration &amp; configuration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>configurationChanged</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>configurationChanged</anchor>
            <arglist>(const QNetworkConfiguration &amp; config)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>onlineStateChanged</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>onlineStateChanged</anchor>
            <arglist>(bool isOnline)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateCompleted</name>
            <anchorfile>qnetworkconfigurationmanager.html</anchorfile>
            <anchor>updateCompleted</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemChangeSet</name>
        <filename>qorganizeritemchangeset.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemChangeSet</name>
            <anchorfile>qorganizeritemchangeset.html</anchorfile>
            <anchor>QOrganizerItemChangeSet</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemChangeSet</name>
            <anchorfile>qorganizeritemchangeset.html</anchorfile>
            <anchor>QOrganizerItemChangeSet-2</anchor>
            <arglist>(const QOrganizerItemChangeSet &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOrganizerItemChangeSet</name>
            <anchorfile>qorganizeritemchangeset.html</anchorfile>
            <anchor>dtor.QOrganizerItemChangeSet</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemChangeSet &amp;</type>
            <name>operator=</name>
            <anchorfile>qorganizeritemchangeset.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QOrganizerItemChangeSet &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDataChanged</name>
            <anchorfile>qorganizeritemchangeset.html</anchorfile>
            <anchor>setDataChanged</anchor>
            <arglist>(bool dataChanged)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>dataChanged</name>
            <anchorfile>qorganizeritemchangeset.html</anchorfile>
            <anchor>dataChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;QOrganizerItemLocalId&gt;</type>
            <name>addedItems</name>
            <anchorfile>qorganizeritemchangeset.html</anchorfile>
            <anchor>addedItems</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertAddedItem</name>
            <anchorfile>qorganizeritemchangeset.html</anchorfile>
            <anchor>insertAddedItem</anchor>
            <arglist>(QOrganizerItemLocalId addedOrganizerItemId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertAddedItems</name>
            <anchorfile>qorganizeritemchangeset.html</anchorfile>
            <anchor>insertAddedItems</anchor>
            <arglist>(const QList&lt;QOrganizerItemLocalId&gt; &amp; addedOrganizerItemIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearAddedItems</name>
            <anchorfile>qorganizeritemchangeset.html</anchorfile>
            <anchor>clearAddedItems</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;QOrganizerItemLocalId&gt;</type>
            <name>changedItems</name>
            <anchorfile>qorganizeritemchangeset.html</anchorfile>
            <anchor>changedItems</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertChangedItem</name>
            <anchorfile>qorganizeritemchangeset.html</anchorfile>
            <anchor>insertChangedItem</anchor>
            <arglist>(QOrganizerItemLocalId changedOrganizerItemId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertChangedItems</name>
            <anchorfile>qorganizeritemchangeset.html</anchorfile>
            <anchor>insertChangedItems</anchor>
            <arglist>(const QList&lt;QOrganizerItemLocalId&gt; &amp; changedOrganizerItemIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearChangedItems</name>
            <anchorfile>qorganizeritemchangeset.html</anchorfile>
            <anchor>clearChangedItems</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;QOrganizerItemLocalId&gt;</type>
            <name>removedItems</name>
            <anchorfile>qorganizeritemchangeset.html</anchorfile>
            <anchor>removedItems</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRemovedItem</name>
            <anchorfile>qorganizeritemchangeset.html</anchorfile>
            <anchor>insertRemovedItem</anchor>
            <arglist>(QOrganizerItemLocalId removedOrganizerItemId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRemovedItems</name>
            <anchorfile>qorganizeritemchangeset.html</anchorfile>
            <anchor>insertRemovedItems</anchor>
            <arglist>(const QList&lt;QOrganizerItemLocalId&gt; &amp; removedOrganizerItemIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearRemovedItems</name>
            <anchorfile>qorganizeritemchangeset.html</anchorfile>
            <anchor>clearRemovedItems</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearAll</name>
            <anchorfile>qorganizeritemchangeset.html</anchorfile>
            <anchor>clearAll</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>emitSignals</name>
            <anchorfile>qorganizeritemchangeset.html</anchorfile>
            <anchor>emitSignals</anchor>
            <arglist>(QOrganizerItemManagerEngine * engine)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContact</name>
        <filename>qcontact.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContact</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>QContact</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContact</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>dtor.QContact</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContact</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>QContact-2</anchor>
            <arglist>(const QContact &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContact &amp;</type>
            <name>operator=</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QContact &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QContact &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QContact &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactId</type>
            <name>id</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setId</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>setId</anchor>
            <arglist>(const QContactId &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactLocalId</type>
            <name>localId</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>localId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>type</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>setType</anchor>
            <arglist>(const QString &amp; type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>setType-2</anchor>
            <arglist>(const QContactType &amp; type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>displayLabel</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>displayLabel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearDetails</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>clearDetails</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactDetail</type>
            <name>detail</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>detail</anchor>
            <arglist>(const QString &amp; definitionName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactDetail&gt;</type>
            <name>details</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>details</anchor>
            <arglist>(const QString &amp; definitionName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactDetail</type>
            <name>detailWithAction</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>detailWithAction</anchor>
            <arglist>(QContactAction * action) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactDetail&gt;</type>
            <name>detailsWithAction</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>detailsWithAction</anchor>
            <arglist>(QContactAction * action) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactDetail&gt;</type>
            <name>details</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>details-2</anchor>
            <arglist>(const QString &amp; definitionName, const QString &amp; fieldName, const QString &amp; value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactDetail</type>
            <name>detail</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>detail-3</anchor>
            <arglist>(const QLatin1Constant &amp; definitionName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactDetail&gt;</type>
            <name>details</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>details-5</anchor>
            <arglist>(const QLatin1Constant &amp; definitionName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactDetail&gt;</type>
            <name>details</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>details-6</anchor>
            <arglist>(const QLatin1Constant &amp; definitionName, const QLatin1Constant &amp; fieldName, const QString &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>details</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>details-7</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>details</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>details-8</anchor>
            <arglist>(const QString &amp; fieldName, const QString &amp; value) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>detail</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>detail-4</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>saveDetail</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>saveDetail</anchor>
            <arglist>(QContactDetail * detail)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeDetail</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>removeDetail</anchor>
            <arglist>(QContactDetail * detail)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactRelationship&gt;</type>
            <name>relationships</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>relationships</anchor>
            <arglist>(const QString &amp; relationshipType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactId&gt;</type>
            <name>relatedContacts</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>relatedContacts</anchor>
            <arglist>(const QString &amp; relationshipType, QContactRelationship::Role role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactActionDescriptor&gt;</type>
            <name>availableActions</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>availableActions</anchor>
            <arglist>(const QString &amp; vendorName, int implementationVersion) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setPreferredDetail</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>setPreferredDetail</anchor>
            <arglist>(const QString &amp; actionName, const QContactDetail &amp; preferredDetail)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPreferredDetail</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>isPreferredDetail</anchor>
            <arglist>(const QString &amp; actionName, const QContactDetail &amp; detail) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactDetail</type>
            <name>preferredDetail</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>preferredDetail</anchor>
            <arglist>(const QString &amp; actionName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;QString, QContactDetail&gt;</type>
            <name>preferredDetails</name>
            <anchorfile>qcontact.html</anchorfile>
            <anchor>preferredDetails</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageAccountFilter</name>
        <filename>qmessageaccountfilter.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageAccountFilter</name>
            <anchorfile>qmessageaccountfilter.html</anchorfile>
            <anchor>QMessageAccountFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageAccountFilter</name>
            <anchorfile>qmessageaccountfilter.html</anchorfile>
            <anchor>QMessageAccountFilter-2</anchor>
            <arglist>(const QMessageAccountFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMessageAccountFilter</name>
            <anchorfile>qmessageaccountfilter.html</anchorfile>
            <anchor>dtor.QMessageAccountFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatchFlags</name>
            <anchorfile>qmessageaccountfilter.html</anchorfile>
            <anchor>setMatchFlags</anchor>
            <arglist>(QMessageDataComparator::MatchFlags matchFlags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageDataComparator::MatchFlags</type>
            <name>matchFlags</name>
            <anchorfile>qmessageaccountfilter.html</anchorfile>
            <anchor>matchFlags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qmessageaccountfilter.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSupported</name>
            <anchorfile>qmessageaccountfilter.html</anchorfile>
            <anchor>isSupported</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageAccountFilter</type>
            <name>operator~</name>
            <anchorfile>qmessageaccountfilter.html</anchorfile>
            <anchor>operator~</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageAccountFilter</type>
            <name>operator&amp;</name>
            <anchorfile>qmessageaccountfilter.html</anchorfile>
            <anchor>operator&amp;</anchor>
            <arglist>(const QMessageAccountFilter &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageAccountFilter</type>
            <name>operator|</name>
            <anchorfile>qmessageaccountfilter.html</anchorfile>
            <anchor>operator|</anchor>
            <arglist>(const QMessageAccountFilter &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMessageAccountFilter &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qmessageaccountfilter.html</anchorfile>
            <anchor>operator&amp;=</anchor>
            <arglist>(const QMessageAccountFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMessageAccountFilter &amp;</type>
            <name>operator|=</name>
            <anchorfile>qmessageaccountfilter.html</anchorfile>
            <anchor>operator|=</anchor>
            <arglist>(const QMessageAccountFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageAccountFilter</type>
            <name>byId</name>
            <anchorfile>qmessageaccountfilter.html</anchorfile>
            <anchor>byId</anchor>
            <arglist>(const QMessageAccountId &amp; id, QMessageDataComparator::EqualityComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageAccountFilter</type>
            <name>byId</name>
            <anchorfile>qmessageaccountfilter.html</anchorfile>
            <anchor>byId-2</anchor>
            <arglist>(const QMessageAccountIdList &amp; ids, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageAccountFilter</type>
            <name>byId</name>
            <anchorfile>qmessageaccountfilter.html</anchorfile>
            <anchor>byId-3</anchor>
            <arglist>(const QMessageAccountFilter &amp; filter, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageAccountFilter</type>
            <name>byName</name>
            <anchorfile>qmessageaccountfilter.html</anchorfile>
            <anchor>byName</anchor>
            <arglist>(const QString &amp; value, QMessageDataComparator::EqualityComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageAccountFilter</type>
            <name>byName</name>
            <anchorfile>qmessageaccountfilter.html</anchorfile>
            <anchor>byName-2</anchor>
            <arglist>(const QString &amp; value, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemSaveRequest</name>
        <filename>qorganizeritemsaverequest.html</filename>
        <base>QOrganizerItemAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemSaveRequest</name>
            <anchorfile>qorganizeritemsaverequest.html</anchorfile>
            <anchor>QOrganizerItemSaveRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItem</name>
            <anchorfile>qorganizeritemsaverequest.html</anchorfile>
            <anchor>setItem</anchor>
            <arglist>(const QOrganizerItem &amp; organizeritem)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItems</name>
            <anchorfile>qorganizeritemsaverequest.html</anchorfile>
            <anchor>setItems</anchor>
            <arglist>(const QList&lt;QOrganizerItem&gt; &amp; organizeritems)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItem&gt;</type>
            <name>items</name>
            <anchorfile>qorganizeritemsaverequest.html</anchorfile>
            <anchor>items</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;int, QOrganizerItemManager::Error&gt;</type>
            <name>errorMap</name>
            <anchorfile>qorganizeritemsaverequest.html</anchorfile>
            <anchor>errorMap</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkDistanceSort</name>
        <filename>qlandmarkdistancesort.html</filename>
        <base>QLandmarkSortOrder</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkDistanceSort</name>
            <anchorfile>qlandmarkdistancesort.html</anchorfile>
            <anchor>QLandmarkDistanceSort</anchor>
            <arglist>(const QGeoCoordinate &amp; coordinate, Qt::SortOrder direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkDistanceSort</name>
            <anchorfile>qlandmarkdistancesort.html</anchorfile>
            <anchor>QLandmarkDistanceSort-2</anchor>
            <arglist>(const QLandmarkSortOrder &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QLandmarkDistanceSort</name>
            <anchorfile>qlandmarkdistancesort.html</anchorfile>
            <anchor>dtor.QLandmarkDistanceSort</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>coordinate</name>
            <anchorfile>qlandmarkdistancesort.html</anchorfile>
            <anchor>coordinate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCoordinate</name>
            <anchorfile>qlandmarkdistancesort.html</anchorfile>
            <anchor>setCoordinate</anchor>
            <arglist>(const QGeoCoordinate &amp; coordinate)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactRelationship</name>
        <filename>qcontactrelationship.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactRelationship</name>
            <anchorfile>qcontactrelationship.html</anchorfile>
            <anchor>QContactRelationship</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactRelationship</name>
            <anchorfile>qcontactrelationship.html</anchorfile>
            <anchor>dtor.QContactRelationship</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactRelationship</name>
            <anchorfile>qcontactrelationship.html</anchorfile>
            <anchor>QContactRelationship-2</anchor>
            <arglist>(const QContactRelationship &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactRelationship &amp;</type>
            <name>operator=</name>
            <anchorfile>qcontactrelationship.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QContactRelationship &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcontactrelationship.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QContactRelationship &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcontactrelationship.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QContactRelationship &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactId</type>
            <name>first</name>
            <anchorfile>qcontactrelationship.html</anchorfile>
            <anchor>first</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactId</type>
            <name>second</name>
            <anchorfile>qcontactrelationship.html</anchorfile>
            <anchor>second</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>relationshipType</name>
            <anchorfile>qcontactrelationship.html</anchorfile>
            <anchor>relationshipType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFirst</name>
            <anchorfile>qcontactrelationship.html</anchorfile>
            <anchor>setFirst</anchor>
            <arglist>(const QContactId &amp; firstId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSecond</name>
            <anchorfile>qcontactrelationship.html</anchorfile>
            <anchor>setSecond</anchor>
            <arglist>(const QContactId &amp; secondId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRelationshipType</name>
            <anchorfile>qcontactrelationship.html</anchorfile>
            <anchor>setRelationshipType</anchor>
            <arglist>(const QString &amp; relationshipType)</arglist>
        </member>
        <member kind="enum">
            <name>Role</name>
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="First">
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Second">
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Either">
            <anchor>Role-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemManager</name>
        <filename>qorganizeritemmanager.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemManager</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>QOrganizerItemManager</anchor>
            <arglist>(const QString &amp; managerName, const QMap&lt;QString, QString&gt; &amp; parameters, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemManager</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>QOrganizerItemManager-2</anchor>
            <arglist>(const QString &amp; managerName, int implementationVersion, const QMap&lt;QString, QString&gt; &amp; parameters, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemManager</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>QOrganizerItemManager-3</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QOrganizerItemManager *</type>
            <name>fromUri</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>fromUri</anchor>
            <arglist>(const QString &amp; storeUri, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOrganizerItemManager</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>dtor.QOrganizerItemManager</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerName</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;QString, QString&gt;</type>
            <name>managerParameters</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>managerParameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerUri</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>managerUri</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>managerVersion</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>managerVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>parseUri</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>parseUri</anchor>
            <arglist>(const QString &amp; uri, QString * pManagerId, QMap&lt;QString, QString&gt; * pParams)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>buildUri</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>buildUri</anchor>
            <arglist>(const QString &amp; managerName, const QMap&lt;QString, QString&gt; &amp; params, int implementationVersion)</arglist>
        </member>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DoesNotExistError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlreadyExistsError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidDetailError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LockedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DetailAccessError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PermissionsError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutOfMemoryError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotSupportedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BadArgumentError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnspecifiedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VersionMismatchError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LimitReachedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidItemTypeError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidOccurrenceError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemManager::Error</type>
            <name>error</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItem&gt;</type>
            <name>itemInstances</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>itemInstances</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter, const QList&lt;QOrganizerItemSortOrder&gt; &amp; sortOrders, const QOrganizerItemFetchHint &amp; fetchHint) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItem&gt;</type>
            <name>itemInstances</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>itemInstances-2</anchor>
            <arglist>(const QOrganizerItem &amp; generator, const QDateTime &amp; periodStart, const QDateTime &amp; periodEnd, int maxCount) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItemLocalId&gt;</type>
            <name>itemIds</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>itemIds</anchor>
            <arglist>(const QList&lt;QOrganizerItemSortOrder&gt; &amp; sortOrders) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItemLocalId&gt;</type>
            <name>itemIds</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>itemIds-2</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter, const QList&lt;QOrganizerItemSortOrder&gt; &amp; sortOrders) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItem&gt;</type>
            <name>items</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>items</anchor>
            <arglist>(const QList&lt;QOrganizerItemSortOrder&gt; &amp; sortOrders, const QOrganizerItemFetchHint &amp; fetchHint) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItem&gt;</type>
            <name>items</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>items-2</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter, const QList&lt;QOrganizerItemSortOrder&gt; &amp; sortOrders, const QOrganizerItemFetchHint &amp; fetchHint) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItem</type>
            <name>item</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>item</anchor>
            <arglist>(const QOrganizerItemLocalId &amp; organizeritemId, const QOrganizerItemFetchHint &amp; fetchHint) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>saveItem</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>saveItem</anchor>
            <arglist>(QOrganizerItem * organizeritem)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>saveItems</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>saveItems</anchor>
            <arglist>(QList&lt;QOrganizerItem&gt; * organizeritems, QMap&lt;int, QOrganizerItemManager::Error&gt; * errorMap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeItem</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>removeItem</anchor>
            <arglist>(const QOrganizerItemLocalId &amp; organizeritemId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeItems</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>removeItems</anchor>
            <arglist>(const QList&lt;QOrganizerItemLocalId&gt; &amp; organizeritemIds, QMap&lt;int, QOrganizerItemManager::Error&gt; * errorMap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItem</type>
            <name>compatibleItem</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>compatibleItem</anchor>
            <arglist>(const QOrganizerItem &amp; original)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;QString, QOrganizerItemDetailDefinition&gt;</type>
            <name>detailDefinitions</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>detailDefinitions</anchor>
            <arglist>(const QString &amp; organizeritemType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemDetailDefinition</type>
            <name>detailDefinition</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>detailDefinition</anchor>
            <arglist>(const QString &amp; definitionName, const QString &amp; organizeritemType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>saveDetailDefinition</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>saveDetailDefinition</anchor>
            <arglist>(const QOrganizerItemDetailDefinition &amp; def, const QString &amp; organizeritemType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeDetailDefinition</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>removeDetailDefinition</anchor>
            <arglist>(const QString &amp; definitionName, const QString &amp; organizeritemType)</arglist>
        </member>
        <member kind="enum">
            <name>ManagerFeature</name>
            <anchor>ManagerFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MutableDefinitions">
            <anchor>ManagerFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Anonymous">
            <anchor>ManagerFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ChangeLogs">
            <anchor>ManagerFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasFeature</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>hasFeature</anchor>
            <arglist>(QOrganizerItemManager::ManagerFeature feature, const QString &amp; organizeritemType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QVariant::Type&gt;</type>
            <name>supportedDataTypes</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>supportedDataTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFilterSupported</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>isFilterSupported</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>supportedItemTypes</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>supportedItemTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>availableManagers</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>availableManagers</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataChanged</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>dataChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemsAdded</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>itemsAdded</anchor>
            <arglist>(const QList&lt;QOrganizerItemLocalId&gt; &amp; organizeritemIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemsChanged</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>itemsChanged</anchor>
            <arglist>(const QList&lt;QOrganizerItemLocalId&gt; &amp; organizeritemIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemsRemoved</name>
            <anchorfile>qorganizeritemmanager.html</anchorfile>
            <anchor>itemsRemoved</anchor>
            <arglist>(const QList&lt;QOrganizerItemLocalId&gt; &amp; organizeritemIds)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageFolderFilter</name>
        <filename>qmessagefolderfilter.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageFolderFilter</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>QMessageFolderFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageFolderFilter</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>QMessageFolderFilter-2</anchor>
            <arglist>(const QMessageFolderFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMessageFolderFilter</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>dtor.QMessageFolderFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatchFlags</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>setMatchFlags</anchor>
            <arglist>(QMessageDataComparator::MatchFlags matchFlags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageDataComparator::MatchFlags</type>
            <name>matchFlags</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>matchFlags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSupported</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>isSupported</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageFolderFilter</type>
            <name>operator~</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>operator~</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageFolderFilter</type>
            <name>operator&amp;</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>operator&amp;</anchor>
            <arglist>(const QMessageFolderFilter &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageFolderFilter</type>
            <name>operator|</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>operator|</anchor>
            <arglist>(const QMessageFolderFilter &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMessageFolderFilter &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>operator&amp;=</anchor>
            <arglist>(const QMessageFolderFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMessageFolderFilter &amp;</type>
            <name>operator|=</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>operator|=</anchor>
            <arglist>(const QMessageFolderFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFolderFilter</type>
            <name>byId</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>byId</anchor>
            <arglist>(const QMessageFolderId &amp; id, QMessageDataComparator::EqualityComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFolderFilter</type>
            <name>byId</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>byId-2</anchor>
            <arglist>(const QMessageFolderIdList &amp; ids, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFolderFilter</type>
            <name>byId</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>byId-3</anchor>
            <arglist>(const QMessageFolderFilter &amp; filter, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFolderFilter</type>
            <name>byName</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>byName</anchor>
            <arglist>(const QString &amp; value, QMessageDataComparator::EqualityComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFolderFilter</type>
            <name>byName</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>byName-2</anchor>
            <arglist>(const QString &amp; value, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFolderFilter</type>
            <name>byPath</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>byPath</anchor>
            <arglist>(const QString &amp; value, QMessageDataComparator::EqualityComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFolderFilter</type>
            <name>byPath</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>byPath-2</anchor>
            <arglist>(const QString &amp; value, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFolderFilter</type>
            <name>byParentAccountId</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>byParentAccountId</anchor>
            <arglist>(const QMessageAccountId &amp; id, QMessageDataComparator::EqualityComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFolderFilter</type>
            <name>byParentAccountId</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>byParentAccountId-2</anchor>
            <arglist>(const QMessageAccountFilter &amp; filter, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFolderFilter</type>
            <name>byParentFolderId</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>byParentFolderId</anchor>
            <arglist>(const QMessageFolderId &amp; id, QMessageDataComparator::EqualityComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFolderFilter</type>
            <name>byParentFolderId</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>byParentFolderId-2</anchor>
            <arglist>(const QMessageFolderFilter &amp; filter, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFolderFilter</type>
            <name>byAncestorFolderIds</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>byAncestorFolderIds</anchor>
            <arglist>(const QMessageFolderId &amp; id, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFolderFilter</type>
            <name>byAncestorFolderIds</name>
            <anchorfile>qmessagefolderfilter.html</anchorfile>
            <anchor>byAncestorFolderIds-2</anchor>
            <arglist>(const QMessageFolderFilter &amp; filter, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSensorManager</name>
        <filename>qsensormanager.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>registerBackend</name>
            <anchorfile>qsensormanager.html</anchorfile>
            <anchor>registerBackend</anchor>
            <arglist>(const QByteArray &amp; type, const QByteArray &amp; identifier, QSensorBackendFactory * factory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSensorBackend *</type>
            <name>createBackend</name>
            <anchorfile>qsensormanager.html</anchorfile>
            <anchor>createBackend</anchor>
            <arglist>(QSensor * sensor)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSensorBackendFactory</name>
        <filename>qsensorbackendfactory.html</filename>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QSensorBackend *</type>
            <name>createBackend</name>
            <anchorfile>qsensorbackendfactory.html</anchorfile>
            <anchor>createBackend</anchor>
            <arglist>(QSensor * sensor) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkIntersectionFilter</name>
        <filename>qlandmarkintersectionfilter.html</filename>
        <base>QLandmarkFilter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkIntersectionFilter</name>
            <anchorfile>qlandmarkintersectionfilter.html</anchorfile>
            <anchor>QLandmarkIntersectionFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkIntersectionFilter</name>
            <anchorfile>qlandmarkintersectionfilter.html</anchorfile>
            <anchor>QLandmarkIntersectionFilter-2</anchor>
            <arglist>(const QLandmarkFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QLandmarkIntersectionFilter</name>
            <anchorfile>qlandmarkintersectionfilter.html</anchorfile>
            <anchor>dtor.QLandmarkIntersectionFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilters</name>
            <anchorfile>qlandmarkintersectionfilter.html</anchorfile>
            <anchor>setFilters</anchor>
            <arglist>(const QList&lt;QLandmarkFilter&gt; &amp; filters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepend</name>
            <anchorfile>qlandmarkintersectionfilter.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(const QLandmarkFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qlandmarkintersectionfilter.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const QLandmarkFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qlandmarkintersectionfilter.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QLandmarkFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qlandmarkintersectionfilter.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkIntersectionFilter &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qlandmarkintersectionfilter.html</anchorfile>
            <anchor>operator&lt;&lt;</anchor>
            <arglist>(const QLandmarkFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkFilter&gt;</type>
            <name>filters</name>
            <anchorfile>qlandmarkintersectionfilter.html</anchorfile>
            <anchor>filters</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactDetailFilter</name>
        <filename>qcontactdetailfilter.html</filename>
        <base>QContactFilter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactDetailFilter</name>
            <anchorfile>qcontactdetailfilter.html</anchorfile>
            <anchor>QContactDetailFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactDetailFilter</name>
            <anchorfile>qcontactdetailfilter.html</anchorfile>
            <anchor>QContactDetailFilter-2</anchor>
            <arglist>(const QContactFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDetailDefinitionName</name>
            <anchorfile>qcontactdetailfilter.html</anchorfile>
            <anchor>setDetailDefinitionName</anchor>
            <arglist>(const QString &amp; definitionName, const QString &amp; fieldName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatchFlags</name>
            <anchorfile>qcontactdetailfilter.html</anchorfile>
            <anchor>setMatchFlags</anchor>
            <arglist>(QFlags&lt;QContactFilter::MatchFlag&gt; flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qcontactdetailfilter.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const QVariant &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>detailDefinitionName</name>
            <anchorfile>qcontactdetailfilter.html</anchorfile>
            <anchor>detailDefinitionName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>detailFieldName</name>
            <anchorfile>qcontactdetailfilter.html</anchorfile>
            <anchor>detailFieldName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactFilter::MatchFlags</type>
            <name>matchFlags</name>
            <anchorfile>qcontactdetailfilter.html</anchorfile>
            <anchor>matchFlags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qcontactdetailfilter.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaServiceProviderHint</name>
        <filename>qmediaserviceproviderhint.html</filename>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Null">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContentType">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Device">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SupportedFeatures">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Feature</name>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LowLatencyPlayback">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RecordingSupport">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StreamPlayback">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QMediaServiceProviderHint::Feature">
            <name>Features</name>
            <anchorfile>qmediaserviceproviderhint.html</anchorfile>
            <anchor>Features-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaServiceProviderHint</name>
            <anchorfile>qmediaserviceproviderhint.html</anchorfile>
            <anchor>QMediaServiceProviderHint</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaServiceProviderHint</name>
            <anchorfile>qmediaserviceproviderhint.html</anchorfile>
            <anchor>QMediaServiceProviderHint-2</anchor>
            <arglist>(const QString &amp; type, const QStringList &amp; codecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaServiceProviderHint</name>
            <anchorfile>qmediaserviceproviderhint.html</anchorfile>
            <anchor>QMediaServiceProviderHint-3</anchor>
            <arglist>(const QByteArray &amp; device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaServiceProviderHint</name>
            <anchorfile>qmediaserviceproviderhint.html</anchorfile>
            <anchor>QMediaServiceProviderHint-4</anchor>
            <arglist>(QFlags&lt;QMediaServiceProviderHint::Feature&gt; features)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaServiceProviderHint</name>
            <anchorfile>qmediaserviceproviderhint.html</anchorfile>
            <anchor>QMediaServiceProviderHint-5</anchor>
            <arglist>(const QMediaServiceProviderHint &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMediaServiceProviderHint</name>
            <anchorfile>qmediaserviceproviderhint.html</anchorfile>
            <anchor>dtor.QMediaServiceProviderHint</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaServiceProviderHint &amp;</type>
            <name>operator=</name>
            <anchorfile>qmediaserviceproviderhint.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QMediaServiceProviderHint &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmediaserviceproviderhint.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QMediaServiceProviderHint &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmediaserviceproviderhint.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QMediaServiceProviderHint &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qmediaserviceproviderhint.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type</type>
            <name>type</name>
            <anchorfile>qmediaserviceproviderhint.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>mimeType</name>
            <anchorfile>qmediaserviceproviderhint.html</anchorfile>
            <anchor>mimeType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>codecs</name>
            <anchorfile>qmediaserviceproviderhint.html</anchorfile>
            <anchor>codecs</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>device</name>
            <anchorfile>qmediaserviceproviderhint.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Features</type>
            <name>features</name>
            <anchorfile>qmediaserviceproviderhint.html</anchorfile>
            <anchor>features</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaServiceProvider</name>
        <filename>qmediaserviceprovider.html</filename>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QMediaService *</type>
            <name>requestService</name>
            <anchorfile>qmediaserviceprovider.html</anchorfile>
            <anchor>requestService</anchor>
            <arglist>(const QByteArray &amp; type, const QMediaServiceProviderHint &amp; hint) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>releaseService</name>
            <anchorfile>qmediaserviceprovider.html</anchorfile>
            <anchor>releaseService</anchor>
            <arglist>(QMediaService * service) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QtMultimediaKit::SupportEstimate</type>
            <name>hasSupport</name>
            <anchorfile>qmediaserviceprovider.html</anchorfile>
            <anchor>hasSupport</anchor>
            <arglist>(const QByteArray &amp; serviceType, const QString &amp; mimeType, const QStringList &amp; codecs, int flags) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>supportedMimeTypes</name>
            <anchorfile>qmediaserviceprovider.html</anchorfile>
            <anchor>supportedMimeTypes</anchor>
            <arglist>(const QByteArray &amp; serviceType, int flags) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QByteArray&gt;</type>
            <name>devices</name>
            <anchorfile>qmediaserviceprovider.html</anchorfile>
            <anchor>devices</anchor>
            <arglist>(const QByteArray &amp; service) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>deviceDescription</name>
            <anchorfile>qmediaserviceprovider.html</anchorfile>
            <anchor>deviceDescription</anchor>
            <arglist>(const QByteArray &amp; serviceType, const QByteArray &amp; device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMediaServiceProvider *</type>
            <name>defaultServiceProvider</name>
            <anchorfile>qmediaserviceprovider.html</anchorfile>
            <anchor>defaultServiceProvider</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccelerometerReading</name>
        <filename>qaccelerometerreading.html</filename>
        <base>QSensorReading</base>
        <member kind="property" type="qreal">
            <name>x</name>
            <anchorfile>qaccelerometerreading.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>y</name>
            <anchorfile>qaccelerometerreading.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>z</name>
            <anchorfile>qaccelerometerreading.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>x</name>
            <anchorfile>qaccelerometerreading.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qaccelerometerreading.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(qreal x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>y</name>
            <anchorfile>qaccelerometerreading.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qaccelerometerreading.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>z</name>
            <anchorfile>qaccelerometerreading.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZ</name>
            <anchorfile>qaccelerometerreading.html</anchorfile>
            <anchor>setZ</anchor>
            <arglist>(qreal z)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccelerometerFilter</name>
        <filename>qaccelerometerfilter.html</filename>
        <base>QSensorFilter</base>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>filter</name>
            <anchorfile>qaccelerometerfilter.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>(QAccelerometerReading * reading) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAccelerometer</name>
        <filename>qaccelerometer.html</filename>
        <base>QSensor</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAccelerometer</name>
            <anchorfile>qaccelerometer.html</anchorfile>
            <anchor>QAccelerometer</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAccelerometer</name>
            <anchorfile>qaccelerometer.html</anchorfile>
            <anchor>dtor.QAccelerometer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAccelerometerReading *</type>
            <name>reading</name>
            <anchorfile>qaccelerometer.html</anchorfile>
            <anchor>reading</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaRecorderControl</name>
        <filename>qmediarecordercontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMediaRecorderControl</name>
            <anchorfile>qmediarecordercontrol.html</anchorfile>
            <anchor>dtor.QMediaRecorderControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QUrl</type>
            <name>outputLocation</name>
            <anchorfile>qmediarecordercontrol.html</anchorfile>
            <anchor>outputLocation</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>setOutputLocation</name>
            <anchorfile>qmediarecordercontrol.html</anchorfile>
            <anchor>setOutputLocation</anchor>
            <arglist>(const QUrl &amp; location) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QMediaRecorder::State</type>
            <name>state</name>
            <anchorfile>qmediarecordercontrol.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual qint64</type>
            <name>duration</name>
            <anchorfile>qmediarecordercontrol.html</anchorfile>
            <anchor>duration</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isMuted</name>
            <anchorfile>qmediarecordercontrol.html</anchorfile>
            <anchor>isMuted</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>applySettings</name>
            <anchorfile>qmediarecordercontrol.html</anchorfile>
            <anchor>applySettings</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qmediarecordercontrol.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QMediaRecorder::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>durationChanged</name>
            <anchorfile>qmediarecordercontrol.html</anchorfile>
            <anchor>durationChanged</anchor>
            <arglist>(qint64 duration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mutedChanged</name>
            <anchorfile>qmediarecordercontrol.html</anchorfile>
            <anchor>mutedChanged</anchor>
            <arglist>(bool muted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qmediarecordercontrol.html</anchorfile>
            <anchor>error</anchor>
            <arglist>(int error, const QString &amp; errorString)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>record</name>
            <anchorfile>qmediarecordercontrol.html</anchorfile>
            <anchor>record</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>pause</name>
            <anchorfile>qmediarecordercontrol.html</anchorfile>
            <anchor>pause</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>stop</name>
            <anchorfile>qmediarecordercontrol.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setMuted</name>
            <anchorfile>qmediarecordercontrol.html</anchorfile>
            <anchor>setMuted</anchor>
            <arglist>(bool muted) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QMediaRecorderControl</name>
            <anchorfile>qmediarecordercontrol.html</anchorfile>
            <anchor>QMediaRecorderControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVersitWriter</name>
        <filename>qversitwriter.html</filename>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnspecifiedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IOError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutOfMemoryError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotReadyError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InactiveState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActiveState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CanceledState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FinishedState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersitWriter</name>
            <anchorfile>qversitwriter.html</anchorfile>
            <anchor>QVersitWriter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersitWriter</name>
            <anchorfile>qversitwriter.html</anchorfile>
            <anchor>QVersitWriter-2</anchor>
            <arglist>(QIODevice * outputDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersitWriter</name>
            <anchorfile>qversitwriter.html</anchorfile>
            <anchor>QVersitWriter-3</anchor>
            <arglist>(QByteArray * outputBytes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QVersitWriter</name>
            <anchorfile>qversitwriter.html</anchorfile>
            <anchor>dtor.QVersitWriter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qversitwriter.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice * device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qversitwriter.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultCodec</name>
            <anchorfile>qversitwriter.html</anchorfile>
            <anchor>setDefaultCodec</anchor>
            <arglist>(QTextCodec * codec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextCodec *</type>
            <name>defaultCodec</name>
            <anchorfile>qversitwriter.html</anchorfile>
            <anchor>defaultCodec</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>State</type>
            <name>state</name>
            <anchorfile>qversitwriter.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qversitwriter.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startWriting</name>
            <anchorfile>qversitwriter.html</anchorfile>
            <anchor>startWriting</anchor>
            <arglist>(const QList&lt;QVersitDocument&gt; &amp; input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancel</name>
            <anchorfile>qversitwriter.html</anchorfile>
            <anchor>cancel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qversitwriter.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QVersitWriter::State state)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactSortOrder</name>
        <filename>qcontactsortorder.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactSortOrder</name>
            <anchorfile>qcontactsortorder.html</anchorfile>
            <anchor>QContactSortOrder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactSortOrder</name>
            <anchorfile>qcontactsortorder.html</anchorfile>
            <anchor>dtor.QContactSortOrder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactSortOrder</name>
            <anchorfile>qcontactsortorder.html</anchorfile>
            <anchor>QContactSortOrder-2</anchor>
            <arglist>(const QContactSortOrder &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactSortOrder &amp;</type>
            <name>operator=</name>
            <anchorfile>qcontactsortorder.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QContactSortOrder &amp; other)</arglist>
        </member>
        <member kind="enum">
            <name>BlankPolicy</name>
            <anchor>BlankPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlanksFirst">
            <anchor>BlankPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlanksLast">
            <anchor>BlankPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDetailDefinitionName</name>
            <anchorfile>qcontactsortorder.html</anchorfile>
            <anchor>setDetailDefinitionName</anchor>
            <arglist>(const QString &amp; definitionName, const QString &amp; fieldName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlankPolicy</name>
            <anchorfile>qcontactsortorder.html</anchorfile>
            <anchor>setBlankPolicy</anchor>
            <arglist>(BlankPolicy blankPolicy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirection</name>
            <anchorfile>qcontactsortorder.html</anchorfile>
            <anchor>setDirection</anchor>
            <arglist>(Qt::SortOrder direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCaseSensitivity</name>
            <anchorfile>qcontactsortorder.html</anchorfile>
            <anchor>setCaseSensitivity</anchor>
            <arglist>(Qt::CaseSensitivity sensitivity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>detailDefinitionName</name>
            <anchorfile>qcontactsortorder.html</anchorfile>
            <anchor>detailDefinitionName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>detailFieldName</name>
            <anchorfile>qcontactsortorder.html</anchorfile>
            <anchor>detailFieldName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>BlankPolicy</type>
            <name>blankPolicy</name>
            <anchorfile>qcontactsortorder.html</anchorfile>
            <anchor>blankPolicy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::SortOrder</type>
            <name>direction</name>
            <anchorfile>qcontactsortorder.html</anchorfile>
            <anchor>direction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CaseSensitivity</type>
            <name>caseSensitivity</name>
            <anchorfile>qcontactsortorder.html</anchorfile>
            <anchor>caseSensitivity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qcontactsortorder.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcontactsortorder.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QContactSortOrder &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcontactsortorder.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QContactSortOrder &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QList&lt;QContactSortOrder&gt;</name>
            <anchorfile>qcontactsortorder.html</anchorfile>
            <anchor>operator QList&lt;QContactSortOrder&gt;</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageAccountId</name>
        <filename>qmessageaccountid.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageAccountId</name>
            <anchorfile>qmessageaccountid.html</anchorfile>
            <anchor>QMessageAccountId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageAccountId</name>
            <anchorfile>qmessageaccountid.html</anchorfile>
            <anchor>QMessageAccountId-2</anchor>
            <arglist>(const QMessageAccountId &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageAccountId</name>
            <anchorfile>qmessageaccountid.html</anchorfile>
            <anchor>QMessageAccountId-3</anchor>
            <arglist>(const QString &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMessageAccountId</name>
            <anchorfile>qmessageaccountid.html</anchorfile>
            <anchor>dtor.QMessageAccountId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qmessageaccountid.html</anchorfile>
            <anchor>operator&lt;</anchor>
            <arglist>(const QMessageAccountId &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qmessageaccountid.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmessageaccountid.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkCategoryFilter</name>
        <filename>qlandmarkcategoryfilter.html</filename>
        <base>QLandmarkFilter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkCategoryFilter</name>
            <anchorfile>qlandmarkcategoryfilter.html</anchorfile>
            <anchor>QLandmarkCategoryFilter</anchor>
            <arglist>(const QLandmarkCategoryId &amp; categoryId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkCategoryFilter</name>
            <anchorfile>qlandmarkcategoryfilter.html</anchorfile>
            <anchor>QLandmarkCategoryFilter-2</anchor>
            <arglist>(const QLandmarkFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QLandmarkCategoryFilter</name>
            <anchorfile>qlandmarkcategoryfilter.html</anchorfile>
            <anchor>dtor.QLandmarkCategoryFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkCategoryId</type>
            <name>categoryId</name>
            <anchorfile>qlandmarkcategoryfilter.html</anchorfile>
            <anchor>categoryId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCategoryId</name>
            <anchorfile>qlandmarkcategoryfilter.html</anchorfile>
            <anchor>setCategoryId</anchor>
            <arglist>(const QLandmarkCategoryId &amp; categoryId)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMagnetometerReading</name>
        <filename>qmagnetometerreading.html</filename>
        <base>QSensorReading</base>
        <member kind="property" type="qreal">
            <name>x</name>
            <anchorfile>qmagnetometerreading.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>y</name>
            <anchorfile>qmagnetometerreading.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>z</name>
            <anchorfile>qmagnetometerreading.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>calibrationLevel</name>
            <anchorfile>qmagnetometerreading.html</anchorfile>
            <anchor>calibrationLevel-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>x</name>
            <anchorfile>qmagnetometerreading.html</anchorfile>
            <anchor>x-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qmagnetometerreading.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(qreal x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>y</name>
            <anchorfile>qmagnetometerreading.html</anchorfile>
            <anchor>y-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qmagnetometerreading.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>z</name>
            <anchorfile>qmagnetometerreading.html</anchorfile>
            <anchor>z-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZ</name>
            <anchorfile>qmagnetometerreading.html</anchorfile>
            <anchor>setZ</anchor>
            <arglist>(qreal z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>calibrationLevel</name>
            <anchorfile>qmagnetometerreading.html</anchorfile>
            <anchor>calibrationLevel-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCalibrationLevel</name>
            <anchorfile>qmagnetometerreading.html</anchorfile>
            <anchor>setCalibrationLevel</anchor>
            <arglist>(qreal calibrationLevel)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMagnetometerFilter</name>
        <filename>qmagnetometerfilter.html</filename>
        <base>QSensorFilter</base>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>filter</name>
            <anchorfile>qmagnetometerfilter.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>(QMagnetometerReading * reading) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMagnetometer</name>
        <filename>qmagnetometer.html</filename>
        <base>QSensor</base>
        <member kind="property" type="bool">
            <name>returnGeoValues</name>
            <anchorfile>qmagnetometer.html</anchorfile>
            <anchor>returnGeoValues-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMagnetometer</name>
            <anchorfile>qmagnetometer.html</anchorfile>
            <anchor>QMagnetometer</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMagnetometer</name>
            <anchorfile>qmagnetometer.html</anchorfile>
            <anchor>dtor.QMagnetometer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMagnetometerReading *</type>
            <name>reading</name>
            <anchorfile>qmagnetometer.html</anchorfile>
            <anchor>reading</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaResource</name>
        <filename>qmediaresource.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaResource</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>QMediaResource</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaResource</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>QMediaResource-2</anchor>
            <arglist>(const QUrl &amp; url, const QString &amp; mimeType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaResource</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>QMediaResource-3</anchor>
            <arglist>(const QNetworkRequest &amp; request, const QString &amp; mimeType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaResource</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>QMediaResource-4</anchor>
            <arglist>(const QMediaResource &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaResource &amp;</type>
            <name>operator=</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QMediaResource &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMediaResource</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>dtor.QMediaResource</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QMediaResource &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QMediaResource &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>url</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>url</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkRequest</type>
            <name>request</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>request</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>mimeType</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>mimeType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>language</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>language</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLanguage</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>setLanguage</anchor>
            <arglist>(const QString &amp; language)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>audioCodec</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>audioCodec</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAudioCodec</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>setAudioCodec</anchor>
            <arglist>(const QString &amp; codec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>videoCodec</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>videoCodec</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVideoCodec</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>setVideoCodec</anchor>
            <arglist>(const QString &amp; codec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>dataSize</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>dataSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDataSize</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>setDataSize</anchor>
            <arglist>(const qint64 size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>audioBitRate</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>audioBitRate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAudioBitRate</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>setAudioBitRate</anchor>
            <arglist>(int rate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sampleRate</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>sampleRate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSampleRate</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>setSampleRate</anchor>
            <arglist>(int sampleRate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>channelCount</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>channelCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChannelCount</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>setChannelCount</anchor>
            <arglist>(int channels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>videoBitRate</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>videoBitRate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVideoBitRate</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>setVideoBitRate</anchor>
            <arglist>(int rate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>resolution</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>resolution</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResolution</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>setResolution</anchor>
            <arglist>(const QSize &amp; resolution)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResolution</name>
            <anchorfile>qmediaresource.html</anchorfile>
            <anchor>setResolution-2</anchor>
            <arglist>(int width, int height)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMetaDataWriterControl</name>
        <filename>qmetadatawritercontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMetaDataWriterControl</name>
            <anchorfile>qmetadatawritercontrol.html</anchorfile>
            <anchor>dtor.QMetaDataWriterControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isWritable</name>
            <anchorfile>qmetadatawritercontrol.html</anchorfile>
            <anchor>isWritable</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isMetaDataAvailable</name>
            <anchorfile>qmetadatawritercontrol.html</anchorfile>
            <anchor>isMetaDataAvailable</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVariant</type>
            <name>metaData</name>
            <anchorfile>qmetadatawritercontrol.html</anchorfile>
            <anchor>metaData</anchor>
            <arglist>(QtMultimediaKit::MetaData key) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setMetaData</name>
            <anchorfile>qmetadatawritercontrol.html</anchorfile>
            <anchor>setMetaData</anchor>
            <arglist>(QtMultimediaKit::MetaData key, const QVariant &amp; value) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;QtMultimediaKit::MetaData&gt;</type>
            <name>availableMetaData</name>
            <anchorfile>qmetadatawritercontrol.html</anchorfile>
            <anchor>availableMetaData</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVariant</type>
            <name>extendedMetaData</name>
            <anchorfile>qmetadatawritercontrol.html</anchorfile>
            <anchor>extendedMetaData</anchor>
            <arglist>(const QString &amp; key) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setExtendedMetaData</name>
            <anchorfile>qmetadatawritercontrol.html</anchorfile>
            <anchor>setExtendedMetaData</anchor>
            <arglist>(const QString &amp; key, const QVariant &amp; value) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QStringList</type>
            <name>availableExtendedMetaData</name>
            <anchorfile>qmetadatawritercontrol.html</anchorfile>
            <anchor>availableExtendedMetaData</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>metaDataChanged</name>
            <anchorfile>qmetadatawritercontrol.html</anchorfile>
            <anchor>metaDataChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writableChanged</name>
            <anchorfile>qmetadatawritercontrol.html</anchorfile>
            <anchor>writableChanged</anchor>
            <arglist>(bool writable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>metaDataAvailableChanged</name>
            <anchorfile>qmetadatawritercontrol.html</anchorfile>
            <anchor>metaDataAvailableChanged</anchor>
            <arglist>(bool available)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QMetaDataWriterControl</name>
            <anchorfile>qmetadatawritercontrol.html</anchorfile>
            <anchor>QMetaDataWriterControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactDetailDefinitionFetchRequest</name>
        <filename>qcontactdetaildefinitionfetchrequest.html</filename>
        <base>QContactAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactDetailDefinitionFetchRequest</name>
            <anchorfile>qcontactdetaildefinitionfetchrequest.html</anchorfile>
            <anchor>QContactDetailDefinitionFetchRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactDetailDefinitionFetchRequest</name>
            <anchorfile>qcontactdetaildefinitionfetchrequest.html</anchorfile>
            <anchor>dtor.QContactDetailDefinitionFetchRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefinitionName</name>
            <anchorfile>qcontactdetaildefinitionfetchrequest.html</anchorfile>
            <anchor>setDefinitionName</anchor>
            <arglist>(const QString &amp; definitionName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefinitionNames</name>
            <anchorfile>qcontactdetaildefinitionfetchrequest.html</anchorfile>
            <anchor>setDefinitionNames</anchor>
            <arglist>(const QStringList &amp; names)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>definitionNames</name>
            <anchorfile>qcontactdetaildefinitionfetchrequest.html</anchorfile>
            <anchor>definitionNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContactType</name>
            <anchorfile>qcontactdetaildefinitionfetchrequest.html</anchorfile>
            <anchor>setContactType</anchor>
            <arglist>(const QString &amp; contactType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>contactType</name>
            <anchorfile>qcontactdetaildefinitionfetchrequest.html</anchorfile>
            <anchor>contactType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;QString, QContactDetailDefinition&gt;</type>
            <name>definitions</name>
            <anchorfile>qcontactdetaildefinitionfetchrequest.html</anchorfile>
            <anchor>definitions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;int, QContactManager::Error&gt;</type>
            <name>errorMap</name>
            <anchorfile>qcontactdetaildefinitionfetchrequest.html</anchorfile>
            <anchor>errorMap</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QValueSpacePublisher</name>
        <filename>qvaluespacepublisher.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QValueSpacePublisher</name>
            <anchorfile>qvaluespacepublisher.html</anchorfile>
            <anchor>QValueSpacePublisher</anchor>
            <arglist>(const QString &amp; path, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QValueSpacePublisher</name>
            <anchorfile>qvaluespacepublisher.html</anchorfile>
            <anchor>QValueSpacePublisher-2</anchor>
            <arglist>(QValueSpace::LayerOptions filter, const QString &amp; path, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QValueSpacePublisher</name>
            <anchorfile>qvaluespacepublisher.html</anchorfile>
            <anchor>QValueSpacePublisher-3</anchor>
            <arglist>(const QUuid &amp; uuid, const QString &amp; path, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QValueSpacePublisher</name>
            <anchorfile>qvaluespacepublisher.html</anchorfile>
            <anchor>dtor.QValueSpacePublisher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>path</name>
            <anchorfile>qvaluespacepublisher.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isConnected</name>
            <anchorfile>qvaluespacepublisher.html</anchorfile>
            <anchor>isConnected</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sync</name>
            <anchorfile>qvaluespacepublisher.html</anchorfile>
            <anchor>sync</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>interestChanged</name>
            <anchorfile>qvaluespacepublisher.html</anchorfile>
            <anchor>interestChanged</anchor>
            <arglist>(const QString &amp; attribute, bool interested)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qvaluespacepublisher.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const QString &amp; name, const QVariant &amp; data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetValue</name>
            <anchorfile>qvaluespacepublisher.html</anchorfile>
            <anchor>resetValue</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>connectNotify</name>
            <anchorfile>qvaluespacepublisher.html</anchorfile>
            <anchor>connectNotify</anchor>
            <arglist>(const char * member)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCompassReading</name>
        <filename>qcompassreading.html</filename>
        <base>QSensorReading</base>
        <member kind="property" type="qreal">
            <name>azimuth</name>
            <anchorfile>qcompassreading.html</anchorfile>
            <anchor>azimuth-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>calibrationLevel</name>
            <anchorfile>qcompassreading.html</anchorfile>
            <anchor>calibrationLevel-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>azimuth</name>
            <anchorfile>qcompassreading.html</anchorfile>
            <anchor>azimuth-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAzimuth</name>
            <anchorfile>qcompassreading.html</anchorfile>
            <anchor>setAzimuth</anchor>
            <arglist>(qreal azimuth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>calibrationLevel</name>
            <anchorfile>qcompassreading.html</anchorfile>
            <anchor>calibrationLevel-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCalibrationLevel</name>
            <anchorfile>qcompassreading.html</anchorfile>
            <anchor>setCalibrationLevel</anchor>
            <arglist>(qreal calibrationLevel)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCompassFilter</name>
        <filename>qcompassfilter.html</filename>
        <base>QSensorFilter</base>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>filter</name>
            <anchorfile>qcompassfilter.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>(QCompassReading * reading) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCompass</name>
        <filename>qcompass.html</filename>
        <base>QSensor</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCompass</name>
            <anchorfile>qcompass.html</anchorfile>
            <anchor>QCompass</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QCompass</name>
            <anchorfile>qcompass.html</anchorfile>
            <anchor>dtor.QCompass</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCompassReading *</type>
            <name>reading</name>
            <anchorfile>qcompass.html</anchorfile>
            <anchor>reading</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCameraLocksControl</name>
        <filename>qcameralockscontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCameraLocksControl</name>
            <anchorfile>qcameralockscontrol.html</anchorfile>
            <anchor>dtor.QCameraLocksControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QCamera::LockTypes</type>
            <name>supportedLocks</name>
            <anchorfile>qcameralockscontrol.html</anchorfile>
            <anchor>supportedLocks</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QCamera::LockStatus</type>
            <name>lockStatus</name>
            <anchorfile>qcameralockscontrol.html</anchorfile>
            <anchor>lockStatus</anchor>
            <arglist>(QCamera::LockType lock) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>searchAndLock</name>
            <anchorfile>qcameralockscontrol.html</anchorfile>
            <anchor>searchAndLock</anchor>
            <arglist>(QFlags&lt;QCamera::LockType&gt; locks) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>unlock</name>
            <anchorfile>qcameralockscontrol.html</anchorfile>
            <anchor>unlock</anchor>
            <arglist>(QFlags&lt;QCamera::LockType&gt; locks) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lockStatusChanged</name>
            <anchorfile>qcameralockscontrol.html</anchorfile>
            <anchor>lockStatusChanged</anchor>
            <arglist>(QCamera::LockType lock, QCamera::LockStatus status, QCamera::LockChangeReason reason)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QCameraLocksControl</name>
            <anchorfile>qcameralockscontrol.html</anchorfile>
            <anchor>QCameraLocksControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSensor</name>
        <filename>qsensor.html</filename>
        <member kind="property" type="QByteArray">
            <name>sensorid</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>sensorid-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>type</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>connectedToBackend</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>connectedToBackend-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QtMobility::qrangelist">
            <name>availableDataRates</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>availableDataRates-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>dataRate</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>dataRate-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSensorReading *">
            <name>reading</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>reading-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>busy</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>busy-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>active</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QtMobility::qoutputrangelist">
            <name>outputRanges</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>outputRanges-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>outputRange</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>outputRange-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>description</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>description-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>error</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>error-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSensor</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>QSensor</anchor>
            <arglist>(const QByteArray &amp; type, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSensor</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>dtor.QSensor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>identifier</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>sensorid-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIdentifier</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>sensorid-prop</anchor>
            <arglist>(const QByteArray &amp; identifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>type</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>type-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isConnectedToBackend</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>connectedToBackend-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBusy</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>busy-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActive</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist>(bool active)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qrangelist</type>
            <name>availableDataRates</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>availableDataRates-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>dataRate</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>dataRate-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDataRate</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>dataRate-prop</anchor>
            <arglist>(int rate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qoutputrangelist</type>
            <name>outputRanges</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>outputRanges-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>outputRange</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>outputRange-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOutputRange</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>outputRange-prop</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>description</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>description-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>error</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>error-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addFilter</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>addFilter</anchor>
            <arglist>(QSensorFilter * filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeFilter</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>removeFilter</anchor>
            <arglist>(QSensorFilter * filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSensorReading *</type>
            <name>reading</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>reading-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>sensorTypes</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>sensorTypes</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>sensorsForType</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>sensorsForType</anchor>
            <arglist>(const QByteArray &amp; type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>defaultSensorForType</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>defaultSensorForType</anchor>
            <arglist>(const QByteArray &amp; type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>start</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>busyChanged</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>busyChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeChanged</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>activeChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>readingChanged</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>readingChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sensorError</name>
            <anchorfile>qsensor.html</anchorfile>
            <anchor>sensorError</anchor>
            <arglist>(int error)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSensorFilter</name>
        <filename>qsensorfilter.html</filename>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>filter</name>
            <anchorfile>qsensorfilter.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>(QSensorReading * reading) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>~QSensorFilter</name>
            <anchorfile>qsensorfilter.html</anchorfile>
            <anchor>dtor.QSensorFilter</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSensorReading</name>
        <filename>qsensorreading.html</filename>
        <member kind="property" type="QtMobility::qtimestamp">
            <name>timestamp</name>
            <anchorfile>qsensorreading.html</anchorfile>
            <anchor>timestamp-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qtimestamp</type>
            <name>timestamp</name>
            <anchorfile>qsensorreading.html</anchorfile>
            <anchor>timestamp-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimestamp</name>
            <anchorfile>qsensorreading.html</anchorfile>
            <anchor>setTimestamp</anchor>
            <arglist>(qtimestamp timestamp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>valueCount</name>
            <anchorfile>qsensorreading.html</anchorfile>
            <anchor>valueCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qsensorreading.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(int index) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkImportRequest</name>
        <filename>qlandmarkimportrequest.html</filename>
        <base>QLandmarkAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkImportRequest</name>
            <anchorfile>qlandmarkimportrequest.html</anchorfile>
            <anchor>QLandmarkImportRequest</anchor>
            <arglist>(QLandmarkManager * manager, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLandmarkImportRequest</name>
            <anchorfile>qlandmarkimportrequest.html</anchorfile>
            <anchor>dtor.QLandmarkImportRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qlandmarkimportrequest.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qlandmarkimportrequest.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice * device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qlandmarkimportrequest.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qlandmarkimportrequest.html</anchorfile>
            <anchor>setFileName</anchor>
            <arglist>(const QString &amp; fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>format</name>
            <anchorfile>qlandmarkimportrequest.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qlandmarkimportrequest.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(const QByteArray &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkId&gt;</type>
            <name>landmarkIds</name>
            <anchorfile>qlandmarkimportrequest.html</anchorfile>
            <anchor>landmarkIds</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QValueSpaceSubscriber</name>
        <filename>qvaluespacesubscriber.html</filename>
        <member kind="property" type="QString">
            <name>path</name>
            <anchorfile>qvaluespacesubscriber.html</anchorfile>
            <anchor>path-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>value</name>
            <anchorfile>qvaluespacesubscriber.html</anchorfile>
            <anchor>value-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QValueSpaceSubscriber</name>
            <anchorfile>qvaluespacesubscriber.html</anchorfile>
            <anchor>QValueSpaceSubscriber</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QValueSpaceSubscriber</name>
            <anchorfile>qvaluespacesubscriber.html</anchorfile>
            <anchor>QValueSpaceSubscriber-2</anchor>
            <arglist>(const QString &amp; path, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QValueSpaceSubscriber</name>
            <anchorfile>qvaluespacesubscriber.html</anchorfile>
            <anchor>QValueSpaceSubscriber-3</anchor>
            <arglist>(QValueSpace::LayerOptions filter, const QString &amp; path, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QValueSpaceSubscriber</name>
            <anchorfile>qvaluespacesubscriber.html</anchorfile>
            <anchor>QValueSpaceSubscriber-4</anchor>
            <arglist>(const QUuid &amp; uuid, const QString &amp; path, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QValueSpaceSubscriber</name>
            <anchorfile>qvaluespacesubscriber.html</anchorfile>
            <anchor>dtor.QValueSpaceSubscriber</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPath</name>
            <anchorfile>qvaluespacesubscriber.html</anchorfile>
            <anchor>path-prop</anchor>
            <arglist>(const QString &amp; path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPath</name>
            <anchorfile>qvaluespacesubscriber.html</anchorfile>
            <anchor>path-prop</anchor>
            <arglist>(QValueSpaceSubscriber * subscriber)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>path</name>
            <anchorfile>qvaluespacesubscriber.html</anchorfile>
            <anchor>path-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cd</name>
            <anchorfile>qvaluespacesubscriber.html</anchorfile>
            <anchor>cd</anchor>
            <arglist>(const QString &amp; path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cdUp</name>
            <anchorfile>qvaluespacesubscriber.html</anchorfile>
            <anchor>cdUp</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isConnected</name>
            <anchorfile>qvaluespacesubscriber.html</anchorfile>
            <anchor>isConnected</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>subPaths</name>
            <anchorfile>qvaluespacesubscriber.html</anchorfile>
            <anchor>subPaths</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qvaluespacesubscriber.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const QString &amp; subPath, const QVariant &amp; def) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>contentsChanged</name>
            <anchorfile>qvaluespacesubscriber.html</anchorfile>
            <anchor>contentsChanged</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCameraImageCaptureControl</name>
        <filename>qcameraimagecapturecontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCameraImageCaptureControl</name>
            <anchorfile>qcameraimagecapturecontrol.html</anchorfile>
            <anchor>dtor.QCameraImageCaptureControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isReadyForCapture</name>
            <anchorfile>qcameraimagecapturecontrol.html</anchorfile>
            <anchor>isReadyForCapture</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QCameraImageCapture::DriveMode</type>
            <name>driveMode</name>
            <anchorfile>qcameraimagecapturecontrol.html</anchorfile>
            <anchor>driveMode</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setDriveMode</name>
            <anchorfile>qcameraimagecapturecontrol.html</anchorfile>
            <anchor>setDriveMode</anchor>
            <arglist>(QCameraImageCapture::DriveMode mode) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>capture</name>
            <anchorfile>qcameraimagecapturecontrol.html</anchorfile>
            <anchor>capture</anchor>
            <arglist>(const QString &amp; fileName) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>cancelCapture</name>
            <anchorfile>qcameraimagecapturecontrol.html</anchorfile>
            <anchor>cancelCapture</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>readyForCaptureChanged</name>
            <anchorfile>qcameraimagecapturecontrol.html</anchorfile>
            <anchor>readyForCaptureChanged</anchor>
            <arglist>(bool ready)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>imageExposed</name>
            <anchorfile>qcameraimagecapturecontrol.html</anchorfile>
            <anchor>imageExposed</anchor>
            <arglist>(int requestId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>imageCaptured</name>
            <anchorfile>qcameraimagecapturecontrol.html</anchorfile>
            <anchor>imageCaptured</anchor>
            <arglist>(int requestId, const QImage &amp; preview)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>imageSaved</name>
            <anchorfile>qcameraimagecapturecontrol.html</anchorfile>
            <anchor>imageSaved</anchor>
            <arglist>(int requestId, const QString &amp; fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qcameraimagecapturecontrol.html</anchorfile>
            <anchor>error</anchor>
            <arglist>(int error, const QString &amp; errorString)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QCameraImageCaptureControl</name>
            <anchorfile>qcameraimagecapturecontrol.html</anchorfile>
            <anchor>QCameraImageCaptureControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemDetail</name>
        <filename>qorganizeritemdetail.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemDetail</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>QOrganizerItemDetail</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemDetail</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>QOrganizerItemDetail-2</anchor>
            <arglist>(const char * thisDefinitionId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemDetail</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>QOrganizerItemDetail-3</anchor>
            <arglist>(const QString &amp; thisDefinitionId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOrganizerItemDetail</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>dtor.QOrganizerItemDetail</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemDetail</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>QOrganizerItemDetail-4</anchor>
            <arglist>(const QOrganizerItemDetail &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemDetail &amp;</type>
            <name>operator=</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QOrganizerItemDetail &amp; other)</arglist>
        </member>
        <member kind="enum">
            <name>AccessConstraint</name>
            <anchor>AccessConstraint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoConstraint">
            <anchor>AccessConstraint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadOnly">
            <anchor>AccessConstraint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Irremovable">
            <anchor>AccessConstraint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QOrganizerItemDetail::AccessConstraint">
            <name>AccessConstraints</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>AccessConstraints-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>AccessConstraints</type>
            <name>accessConstraints</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>accessConstraints</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QOrganizerItemDetail &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QOrganizerItemDetail &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>definitionName</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>definitionName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>key</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetKey</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>resetKey</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>value</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>value-3</anchor>
            <arglist>(const QString &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setValue</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const QString &amp; key, const QVariant &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeValue</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>removeValue</anchor>
            <arglist>(const QString &amp; key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasValue</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>hasValue</anchor>
            <arglist>(const QString &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantMap</type>
            <name>variantValues</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>variantValues</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>variantValue</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>variantValue</anchor>
            <arglist>(const QString &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const QString &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>value</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>value-6</anchor>
            <arglist>(const QLatin1Constant &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setValue</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>setValue-3</anchor>
            <arglist>(const QLatin1Constant &amp; key, const QVariant &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeValue</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>removeValue-3</anchor>
            <arglist>(const QLatin1Constant &amp; key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasValue</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>hasValue-3</anchor>
            <arglist>(const QLatin1Constant &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>variantValue</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>variantValue-3</anchor>
            <arglist>(const QLatin1Constant &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qorganizeritemdetail.html</anchorfile>
            <anchor>value-2</anchor>
            <arglist>(const QLatin1Constant &amp; key) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactChangeSet</name>
        <filename>qcontactchangeset.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactChangeSet</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>QContactChangeSet</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactChangeSet</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>QContactChangeSet-2</anchor>
            <arglist>(const QContactChangeSet &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactChangeSet</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>dtor.QContactChangeSet</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactChangeSet &amp;</type>
            <name>operator=</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QContactChangeSet &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDataChanged</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>setDataChanged</anchor>
            <arglist>(bool dataChanged)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>dataChanged</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>dataChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;QContactLocalId&gt;</type>
            <name>addedContacts</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>addedContacts</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertAddedContact</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>insertAddedContact</anchor>
            <arglist>(QContactLocalId addedContactId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertAddedContacts</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>insertAddedContacts</anchor>
            <arglist>(const QList&lt;QContactLocalId&gt; &amp; addedContactIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearAddedContacts</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>clearAddedContacts</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;QContactLocalId&gt;</type>
            <name>changedContacts</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>changedContacts</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertChangedContact</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>insertChangedContact</anchor>
            <arglist>(QContactLocalId changedContactId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertChangedContacts</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>insertChangedContacts</anchor>
            <arglist>(const QList&lt;QContactLocalId&gt; &amp; changedContactIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearChangedContacts</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>clearChangedContacts</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;QContactLocalId&gt;</type>
            <name>removedContacts</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>removedContacts</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRemovedContact</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>insertRemovedContact</anchor>
            <arglist>(QContactLocalId removedContactId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRemovedContacts</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>insertRemovedContacts</anchor>
            <arglist>(const QList&lt;QContactLocalId&gt; &amp; removedContactIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearRemovedContacts</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>clearRemovedContacts</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;QContactLocalId&gt;</type>
            <name>addedRelationshipsContacts</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>addedRelationshipsContacts</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertAddedRelationshipsContact</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>insertAddedRelationshipsContact</anchor>
            <arglist>(QContactLocalId affectedContactId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertAddedRelationshipsContacts</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>insertAddedRelationshipsContacts</anchor>
            <arglist>(const QList&lt;QContactLocalId&gt; &amp; affectedContactIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearAddedRelationshipsContacts</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>clearAddedRelationshipsContacts</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;QContactLocalId&gt;</type>
            <name>removedRelationshipsContacts</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>removedRelationshipsContacts</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRemovedRelationshipsContact</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>insertRemovedRelationshipsContact</anchor>
            <arglist>(QContactLocalId affectedContactId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertRemovedRelationshipsContacts</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>insertRemovedRelationshipsContacts</anchor>
            <arglist>(const QList&lt;QContactLocalId&gt; &amp; affectedContactIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearRemovedRelationshipsContacts</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>clearRemovedRelationshipsContacts</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOldAndNewSelfContactId</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>setOldAndNewSelfContactId</anchor>
            <arglist>(const QPair&lt;QContactLocalId, QContactLocalId&gt; &amp; oldAndNewContactId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPair&lt;QContactLocalId, QContactLocalId&gt;</type>
            <name>oldAndNewSelfContactId</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>oldAndNewSelfContactId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearAll</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>clearAll</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>emitSignals</name>
            <anchorfile>qcontactchangeset.html</anchorfile>
            <anchor>emitSignals</anchor>
            <arglist>(QContactManagerEngine * engine)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemAbstractRequest</name>
        <filename>qorganizeritemabstractrequest.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOrganizerItemAbstractRequest</name>
            <anchorfile>qorganizeritemabstractrequest.html</anchorfile>
            <anchor>dtor.QOrganizerItemAbstractRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InactiveState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActiveState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CanceledState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FinishedState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>State</type>
            <name>state</name>
            <anchorfile>qorganizeritemabstractrequest.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInactive</name>
            <anchorfile>qorganizeritemabstractrequest.html</anchorfile>
            <anchor>isInactive</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qorganizeritemabstractrequest.html</anchorfile>
            <anchor>isActive</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qorganizeritemabstractrequest.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCanceled</name>
            <anchorfile>qorganizeritemabstractrequest.html</anchorfile>
            <anchor>isCanceled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemManager::Error</type>
            <name>error</name>
            <anchorfile>qorganizeritemabstractrequest.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>RequestType</name>
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemInstanceFetchRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemFetchRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemLocalIdFetchRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemRemoveRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ItemSaveRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DetailDefinitionFetchRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DetailDefinitionRemoveRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DetailDefinitionSaveRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RequestType</type>
            <name>type</name>
            <anchorfile>qorganizeritemabstractrequest.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemManager *</type>
            <name>manager</name>
            <anchorfile>qorganizeritemabstractrequest.html</anchorfile>
            <anchor>manager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setManager</name>
            <anchorfile>qorganizeritemabstractrequest.html</anchorfile>
            <anchor>setManager</anchor>
            <arglist>(QOrganizerItemManager * manager)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>start</name>
            <anchorfile>qorganizeritemabstractrequest.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>cancel</name>
            <anchorfile>qorganizeritemabstractrequest.html</anchorfile>
            <anchor>cancel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForFinished</name>
            <anchorfile>qorganizeritemabstractrequest.html</anchorfile>
            <anchor>waitForFinished</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qorganizeritemabstractrequest.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QOrganizerItemAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resultsAvailable</name>
            <anchorfile>qorganizeritemabstractrequest.html</anchorfile>
            <anchor>resultsAvailable</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSystemNetworkInfo</name>
        <filename>qsystemnetworkinfo.html</filename>
        <member kind="property" type="int">
            <name>cellId</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>cellId-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>locationAreaCode</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>locationAreaCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>currentMobileCountryCode</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>currentMobileCountryCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>currentMobileNetworkCode</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>currentMobileNetworkCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>homeMobileCountryCode</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>homeMobileCountryCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>homeMobileNetworkCode</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>homeMobileNetworkCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QSystemNetworkInfo::NetworkMode">
            <name>currentMode</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>currentMode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSystemNetworkInfo</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>QSystemNetworkInfo</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSystemNetworkInfo</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>dtor.QSystemNetworkInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>NetworkStatus</name>
            <anchor>NetworkStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UndefinedStatus">
            <anchor>NetworkStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoNetworkAvailable">
            <anchor>NetworkStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EmergencyOnly">
            <anchor>NetworkStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Searching">
            <anchor>NetworkStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Busy">
            <anchor>NetworkStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Connected">
            <anchor>NetworkStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HomeNetwork">
            <anchor>NetworkStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Denied">
            <anchor>NetworkStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Roaming">
            <anchor>NetworkStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>NetworkMode</name>
            <anchor>NetworkMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownMode">
            <anchor>NetworkMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GsmMode">
            <anchor>NetworkMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CdmaMode">
            <anchor>NetworkMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WcdmaMode">
            <anchor>NetworkMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WlanMode">
            <anchor>NetworkMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EthernetMode">
            <anchor>NetworkMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BluetoothMode">
            <anchor>NetworkMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WimaxMode">
            <anchor>NetworkMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>cellId</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>cellId-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>locationAreaCode</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>locationAreaCode-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>currentMobileCountryCode</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>currentMobileCountryCode-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>currentMobileNetworkCode</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>currentMobileNetworkCode-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>homeMobileCountryCode</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>homeMobileCountryCode-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>homeMobileNetworkCode</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>homeMobileNetworkCode-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkInterface</type>
            <name>interfaceForMode</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>interfaceForMode</anchor>
            <arglist>(QSystemNetworkInfo::NetworkMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>networkStatusChanged</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>networkStatusChanged</anchor>
            <arglist>(QSystemNetworkInfo::NetworkMode mode, QSystemNetworkInfo::NetworkStatus status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>networkSignalStrengthChanged</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>networkSignalStrengthChanged</anchor>
            <arglist>(QSystemNetworkInfo::NetworkMode mode, int strength)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentMobileCountryCodeChanged</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>currentMobileCountryCodeChanged</anchor>
            <arglist>(const QString &amp; mcc)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentMobileNetworkCodeChanged</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>currentMobileNetworkCodeChanged</anchor>
            <arglist>(const QString &amp; mnc)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>networkNameChanged</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>networkNameChanged</anchor>
            <arglist>(QSystemNetworkInfo::NetworkMode mode, const QString &amp; netName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>networkModeChanged</name>
            <anchorfile>qsystemnetworkinfo.html</anchorfile>
            <anchor>networkModeChanged</anchor>
            <arglist>(QSystemNetworkInfo::NetworkMode mode)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactActionDescriptor</name>
        <filename>qcontactactiondescriptor.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactActionDescriptor</name>
            <anchorfile>qcontactactiondescriptor.html</anchorfile>
            <anchor>QContactActionDescriptor</anchor>
            <arglist>(const QString &amp; actionName, const QString &amp; vendorName, int vendorVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactActionDescriptor</name>
            <anchorfile>qcontactactiondescriptor.html</anchorfile>
            <anchor>QContactActionDescriptor-2</anchor>
            <arglist>(const QContactActionDescriptor &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactActionDescriptor &amp;</type>
            <name>operator=</name>
            <anchorfile>qcontactactiondescriptor.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QContactActionDescriptor &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactActionDescriptor</name>
            <anchorfile>qcontactactiondescriptor.html</anchorfile>
            <anchor>dtor.QContactActionDescriptor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qcontactactiondescriptor.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcontactactiondescriptor.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QContactActionDescriptor &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcontactactiondescriptor.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QContactActionDescriptor &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActionName</name>
            <anchorfile>qcontactactiondescriptor.html</anchorfile>
            <anchor>setActionName</anchor>
            <arglist>(const QString &amp; actionName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVendorName</name>
            <anchorfile>qcontactactiondescriptor.html</anchorfile>
            <anchor>setVendorName</anchor>
            <arglist>(const QString &amp; vendorName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setImplementationVersion</name>
            <anchorfile>qcontactactiondescriptor.html</anchorfile>
            <anchor>setImplementationVersion</anchor>
            <arglist>(int implementationVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>actionName</name>
            <anchorfile>qcontactactiondescriptor.html</anchorfile>
            <anchor>actionName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>vendorName</name>
            <anchorfile>qcontactactiondescriptor.html</anchorfile>
            <anchor>vendorName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>implementationVersion</name>
            <anchorfile>qcontactactiondescriptor.html</anchorfile>
            <anchor>implementationVersion</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCameraImageProcessing</name>
        <filename>qcameraimageprocessing.html</filename>
        <member kind="enum">
            <name>WhiteBalanceMode</name>
            <anchor>WhiteBalanceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhiteBalanceManual">
            <anchor>WhiteBalanceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhiteBalanceAuto">
            <anchor>WhiteBalanceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhiteBalanceSunlight">
            <anchor>WhiteBalanceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhiteBalanceCloudy">
            <anchor>WhiteBalanceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhiteBalanceShade">
            <anchor>WhiteBalanceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhiteBalanceTungsten">
            <anchor>WhiteBalanceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhiteBalanceFluorescent">
            <anchor>WhiteBalanceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhiteBalanceIncandescent">
            <anchor>WhiteBalanceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhiteBalanceFlash">
            <anchor>WhiteBalanceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhiteBalanceSunset">
            <anchor>WhiteBalanceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WhiteBalanceVendor">
            <anchor>WhiteBalanceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAvailable</name>
            <anchorfile>qcameraimageprocessing.html</anchorfile>
            <anchor>isAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>WhiteBalanceMode</type>
            <name>whiteBalanceMode</name>
            <anchorfile>qcameraimageprocessing.html</anchorfile>
            <anchor>whiteBalanceMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWhiteBalanceMode</name>
            <anchorfile>qcameraimageprocessing.html</anchorfile>
            <anchor>setWhiteBalanceMode</anchor>
            <arglist>(WhiteBalanceMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWhiteBalanceModeSupported</name>
            <anchorfile>qcameraimageprocessing.html</anchorfile>
            <anchor>isWhiteBalanceModeSupported</anchor>
            <arglist>(WhiteBalanceMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>manualWhiteBalance</name>
            <anchorfile>qcameraimageprocessing.html</anchorfile>
            <anchor>manualWhiteBalance</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setManualWhiteBalance</name>
            <anchorfile>qcameraimageprocessing.html</anchorfile>
            <anchor>setManualWhiteBalance</anchor>
            <arglist>(int colorTemperature)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>contrast</name>
            <anchorfile>qcameraimageprocessing.html</anchorfile>
            <anchor>contrast</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContrast</name>
            <anchorfile>qcameraimageprocessing.html</anchorfile>
            <anchor>setContrast</anchor>
            <arglist>(int value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>saturation</name>
            <anchorfile>qcameraimageprocessing.html</anchorfile>
            <anchor>saturation</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSaturation</name>
            <anchorfile>qcameraimageprocessing.html</anchorfile>
            <anchor>setSaturation</anchor>
            <arglist>(int value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSharpeningSupported</name>
            <anchorfile>qcameraimageprocessing.html</anchorfile>
            <anchor>isSharpeningSupported</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sharpeningLevel</name>
            <anchorfile>qcameraimageprocessing.html</anchorfile>
            <anchor>sharpeningLevel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSharpeningLevel</name>
            <anchorfile>qcameraimageprocessing.html</anchorfile>
            <anchor>setSharpeningLevel</anchor>
            <arglist>(int level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDenoisingSupported</name>
            <anchorfile>qcameraimageprocessing.html</anchorfile>
            <anchor>isDenoisingSupported</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>denoisingLevel</name>
            <anchorfile>qcameraimageprocessing.html</anchorfile>
            <anchor>denoisingLevel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDenoisingLevel</name>
            <anchorfile>qcameraimageprocessing.html</anchorfile>
            <anchor>setDenoisingLevel</anchor>
            <arglist>(int level)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemSortOrder</name>
        <filename>qorganizeritemsortorder.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemSortOrder</name>
            <anchorfile>qorganizeritemsortorder.html</anchorfile>
            <anchor>QOrganizerItemSortOrder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOrganizerItemSortOrder</name>
            <anchorfile>qorganizeritemsortorder.html</anchorfile>
            <anchor>dtor.QOrganizerItemSortOrder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemSortOrder</name>
            <anchorfile>qorganizeritemsortorder.html</anchorfile>
            <anchor>QOrganizerItemSortOrder-2</anchor>
            <arglist>(const QOrganizerItemSortOrder &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemSortOrder &amp;</type>
            <name>operator=</name>
            <anchorfile>qorganizeritemsortorder.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QOrganizerItemSortOrder &amp; other)</arglist>
        </member>
        <member kind="enum">
            <name>BlankPolicy</name>
            <anchor>BlankPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlanksFirst">
            <anchor>BlankPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BlanksLast">
            <anchor>BlankPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDetailDefinitionName</name>
            <anchorfile>qorganizeritemsortorder.html</anchorfile>
            <anchor>setDetailDefinitionName</anchor>
            <arglist>(const QString &amp; definitionName, const QString &amp; fieldName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlankPolicy</name>
            <anchorfile>qorganizeritemsortorder.html</anchorfile>
            <anchor>setBlankPolicy</anchor>
            <arglist>(BlankPolicy blankPolicy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirection</name>
            <anchorfile>qorganizeritemsortorder.html</anchorfile>
            <anchor>setDirection</anchor>
            <arglist>(Qt::SortOrder direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCaseSensitivity</name>
            <anchorfile>qorganizeritemsortorder.html</anchorfile>
            <anchor>setCaseSensitivity</anchor>
            <arglist>(Qt::CaseSensitivity sensitivity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>detailDefinitionName</name>
            <anchorfile>qorganizeritemsortorder.html</anchorfile>
            <anchor>detailDefinitionName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>detailFieldName</name>
            <anchorfile>qorganizeritemsortorder.html</anchorfile>
            <anchor>detailFieldName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>BlankPolicy</type>
            <name>blankPolicy</name>
            <anchorfile>qorganizeritemsortorder.html</anchorfile>
            <anchor>blankPolicy</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::SortOrder</type>
            <name>direction</name>
            <anchorfile>qorganizeritemsortorder.html</anchorfile>
            <anchor>direction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CaseSensitivity</type>
            <name>caseSensitivity</name>
            <anchorfile>qorganizeritemsortorder.html</anchorfile>
            <anchor>caseSensitivity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qorganizeritemsortorder.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qorganizeritemsortorder.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QOrganizerItemSortOrder &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qorganizeritemsortorder.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QOrganizerItemSortOrder &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>operator QList&lt;QOrganizerItemSortOrder&gt;</name>
            <anchorfile>qorganizeritemsortorder.html</anchorfile>
            <anchor>operator QList&lt;QOrganizerItemSortOrder&gt;</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaRecorder</name>
        <filename>qmediarecorder.html</filename>
        <base>QMediaBindableInterface</base>
        <member kind="property" type="qint64">
            <name>duration</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QUrl">
            <name>outputLocation</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>outputLocation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>muted</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>muted-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>metaDataAvailable</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>metaDataAvailable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>metaDataWritable</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>metaDataWritable-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StoppedState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RecordingState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PausedState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ResourceError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FormatError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaRecorder</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>QMediaRecorder</anchor>
            <arglist>(QMediaObject * mediaObject, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMediaRecorder</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>dtor.QMediaRecorder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMediaObject *</type>
            <name>mediaObject</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>mediaObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAvailable</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>isAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QtMultimediaKit::AvailabilityError</type>
            <name>availabilityError</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>availabilityError</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>outputLocation</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>outputLocation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setOutputLocation</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>outputLocation-prop</anchor>
            <arglist>(const QUrl &amp; location)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>State</type>
            <name>state</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>duration</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMuted</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>muted-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>supportedContainers</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>supportedContainers</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>containerDescription</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>containerDescription</anchor>
            <arglist>(const QString &amp; mimeType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>supportedAudioCodecs</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>supportedAudioCodecs</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>audioCodecDescription</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>audioCodecDescription</anchor>
            <arglist>(const QString &amp; codec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;int&gt;</type>
            <name>supportedAudioSampleRates</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>supportedAudioSampleRates</anchor>
            <arglist>(const QAudioEncoderSettings &amp; settings, bool * continuous) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>supportedVideoCodecs</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>supportedVideoCodecs</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>videoCodecDescription</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>videoCodecDescription</anchor>
            <arglist>(const QString &amp; codec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSize&gt;</type>
            <name>supportedResolutions</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>supportedResolutions</anchor>
            <arglist>(const QVideoEncoderSettings &amp; settings, bool * continuous) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;qreal&gt;</type>
            <name>supportedFrameRates</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>supportedFrameRates</anchor>
            <arglist>(const QVideoEncoderSettings &amp; settings, bool * continuous) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAudioEncoderSettings</type>
            <name>audioSettings</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>audioSettings</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVideoEncoderSettings</type>
            <name>videoSettings</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>videoSettings</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>containerMimeType</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>containerMimeType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEncodingSettings</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>setEncodingSettings</anchor>
            <arglist>(const QAudioEncoderSettings &amp; audio, const QVideoEncoderSettings &amp; video, const QString &amp; container)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMetaDataAvailable</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>metaDataAvailable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMetaDataWritable</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>metaDataWritable-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>metaData</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>metaData</anchor>
            <arglist>(QtMultimediaKit::MetaData key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMetaData</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>setMetaData</anchor>
            <arglist>(QtMultimediaKit::MetaData key, const QVariant &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QtMultimediaKit::MetaData&gt;</type>
            <name>availableMetaData</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>availableMetaData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>extendedMetaData</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>extendedMetaData</anchor>
            <arglist>(const QString &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExtendedMetaData</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>setExtendedMetaData</anchor>
            <arglist>(const QString &amp; key, const QVariant &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>availableExtendedMetaData</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>availableExtendedMetaData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>record</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>record</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pause</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>pause</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMuted</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>muted-prop</anchor>
            <arglist>(bool muted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QMediaRecorder::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>durationChanged</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>durationChanged</anchor>
            <arglist>(qint64 duration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mutedChanged</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>mutedChanged</anchor>
            <arglist>(bool muted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>error-2</anchor>
            <arglist>(QMediaRecorder::Error error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>metaDataAvailableChanged</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>metaDataAvailableChanged</anchor>
            <arglist>(bool available)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>metaDataWritableChanged</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>metaDataWritableChanged</anchor>
            <arglist>(bool writable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>metaDataChanged</name>
            <anchorfile>qmediarecorder.html</anchorfile>
            <anchor>metaDataChanged</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoMapData</name>
        <filename>qgeomapdata.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoMapData</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>QGeoMapData</anchor>
            <arglist>(QGeoMappingManagerEngine * engine, QGeoMapWidget * widget)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeoMapData</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>dtor.QGeoMapData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setViewportSize</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>setViewportSize</anchor>
            <arglist>(const QSizeF &amp; size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSizeF</type>
            <name>viewportSize</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>viewportSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setZoomLevel</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>setZoomLevel</anchor>
            <arglist>(qreal zoomLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qreal</type>
            <name>zoomLevel</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>zoomLevel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>pan</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>pan</anchor>
            <arglist>(int dx, int dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setCenter</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>setCenter</anchor>
            <arglist>(const QGeoCoordinate &amp; center)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QGeoCoordinate</type>
            <name>center</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>center</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMapType</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>setMapType</anchor>
            <arglist>(QGeoMapWidget::MapType mapType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoMapWidget::MapType</type>
            <name>mapType</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>mapType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>addMapObject</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>addMapObject</anchor>
            <arglist>(QGeoMapObject * mapObject)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>removeMapObject</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>removeMapObject</anchor>
            <arglist>(QGeoMapObject * mapObject)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QGeoMapObject *&gt;</type>
            <name>mapObjects</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>mapObjects</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QGeoMapObject *&gt;</type>
            <name>visibleMapObjects</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>visibleMapObjects</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QGeoMapObject *&gt;</type>
            <name>mapObjectsAtScreenPosition</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>mapObjectsAtScreenPosition</anchor>
            <arglist>(const QPointF &amp; screenPosition)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QGeoMapObject *&gt;</type>
            <name>mapObjectsInScreenRect</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>mapObjectsInScreenRect</anchor>
            <arglist>(const QRectF &amp; screenRect)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QPixmap</type>
            <name>mapObjectsOverlay</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>mapObjectsOverlay</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QPointF</type>
            <name>coordinateToScreenPosition</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>coordinateToScreenPosition</anchor>
            <arglist>(const QGeoCoordinate &amp; coordinate) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QGeoCoordinate</type>
            <name>screenPositionToCoordinate</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>screenPositionToCoordinate</anchor>
            <arglist>(const QPointF &amp; screenPosition) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setImageChangesTriggerUpdates</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>setImageChangesTriggerUpdates</anchor>
            <arglist>(bool trigger)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>imageChangesTriggerUpdates</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>imageChangesTriggerUpdates</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMapImage</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>setMapImage</anchor>
            <arglist>(const QPixmap &amp; mapImage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPixmap</type>
            <name>mapImage</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>mapImage</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QGeoMapWidget *</type>
            <name>widget</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>widget</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QGeoMappingManagerEngine *</type>
            <name>engine</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>engine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QGeoMapObject *</type>
            <name>containerObject</name>
            <anchorfile>qgeomapdata.html</anchorfile>
            <anchor>containerObject</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactManagerEngineFactory</name>
        <filename>qcontactmanagerenginefactory.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;int&gt;</type>
            <name>supportedImplementationVersions</name>
            <anchorfile>qcontactmanagerenginefactory.html</anchorfile>
            <anchor>supportedImplementationVersions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QContactManagerEngineFactory</name>
            <anchorfile>qcontactmanagerenginefactory.html</anchorfile>
            <anchor>dtor.QContactManagerEngineFactory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QContactManagerEngine *</type>
            <name>engine</name>
            <anchorfile>qcontactmanagerenginefactory.html</anchorfile>
            <anchor>engine</anchor>
            <arglist>(const QMap&lt;QString, QString&gt; &amp; parameters, QContactManager::Error * error) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>managerName</name>
            <anchorfile>qcontactmanagerenginefactory.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactLocalIdFilter</name>
        <filename>qcontactlocalidfilter.html</filename>
        <base>QContactFilter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactLocalIdFilter</name>
            <anchorfile>qcontactlocalidfilter.html</anchorfile>
            <anchor>QContactLocalIdFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactLocalIdFilter</name>
            <anchorfile>qcontactlocalidfilter.html</anchorfile>
            <anchor>QContactLocalIdFilter-2</anchor>
            <arglist>(const QContactFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIds</name>
            <anchorfile>qcontactlocalidfilter.html</anchorfile>
            <anchor>setIds</anchor>
            <arglist>(const QList&lt;QContactLocalId&gt; &amp; ids)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactLocalId&gt;</type>
            <name>ids</name>
            <anchorfile>qcontactlocalidfilter.html</anchorfile>
            <anchor>ids</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoRouteSegment</name>
        <filename>qgeoroutesegment.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRouteSegment</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>QGeoRouteSegment</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRouteSegment</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>QGeoRouteSegment-2</anchor>
            <arglist>(const QGeoRouteSegment &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoRouteSegment</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>dtor.QGeoRouteSegment</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteSegment &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QGeoRouteSegment &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTravelTime</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>setTravelTime</anchor>
            <arglist>(int secs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>travelTime</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>travelTime</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDistance</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>setDistance</anchor>
            <arglist>(qreal distance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>distance</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>distance</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPath</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>setPath</anchor>
            <arglist>(const QList&lt;QGeoCoordinate&gt; &amp; path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGeoCoordinate&gt;</type>
            <name>path</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInstruction</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>setInstruction</anchor>
            <arglist>(const QGeoNavigationInstruction &amp; instruction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoNavigationInstruction</type>
            <name>instruction</name>
            <anchorfile>qgeoroutesegment.html</anchorfile>
            <anchor>instruction</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVideoWidgetControl</name>
        <filename>qvideowidgetcontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QVideoWidgetControl</name>
            <anchorfile>qvideowidgetcontrol.html</anchorfile>
            <anchor>dtor.QVideoWidgetControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QWidget *</type>
            <name>videoWidget</name>
            <anchorfile>qvideowidgetcontrol.html</anchorfile>
            <anchor>videoWidget</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual Qt::AspectRatioMode</type>
            <name>aspectRatioMode</name>
            <anchorfile>qvideowidgetcontrol.html</anchorfile>
            <anchor>aspectRatioMode</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setAspectRatioMode</name>
            <anchorfile>qvideowidgetcontrol.html</anchorfile>
            <anchor>setAspectRatioMode</anchor>
            <arglist>(Qt::AspectRatioMode mode) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isFullScreen</name>
            <anchorfile>qvideowidgetcontrol.html</anchorfile>
            <anchor>isFullScreen</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setFullScreen</name>
            <anchorfile>qvideowidgetcontrol.html</anchorfile>
            <anchor>setFullScreen</anchor>
            <arglist>(bool fullScreen) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>brightness</name>
            <anchorfile>qvideowidgetcontrol.html</anchorfile>
            <anchor>brightness</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setBrightness</name>
            <anchorfile>qvideowidgetcontrol.html</anchorfile>
            <anchor>setBrightness</anchor>
            <arglist>(int brightness) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>contrast</name>
            <anchorfile>qvideowidgetcontrol.html</anchorfile>
            <anchor>contrast</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setContrast</name>
            <anchorfile>qvideowidgetcontrol.html</anchorfile>
            <anchor>setContrast</anchor>
            <arglist>(int contrast) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>hue</name>
            <anchorfile>qvideowidgetcontrol.html</anchorfile>
            <anchor>hue</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setHue</name>
            <anchorfile>qvideowidgetcontrol.html</anchorfile>
            <anchor>setHue</anchor>
            <arglist>(int hue) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>saturation</name>
            <anchorfile>qvideowidgetcontrol.html</anchorfile>
            <anchor>saturation</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setSaturation</name>
            <anchorfile>qvideowidgetcontrol.html</anchorfile>
            <anchor>setSaturation</anchor>
            <arglist>(int saturation) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fullScreenChanged</name>
            <anchorfile>qvideowidgetcontrol.html</anchorfile>
            <anchor>fullScreenChanged</anchor>
            <arglist>(bool fullScreen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>brightnessChanged</name>
            <anchorfile>qvideowidgetcontrol.html</anchorfile>
            <anchor>brightnessChanged</anchor>
            <arglist>(int brightness)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>contrastChanged</name>
            <anchorfile>qvideowidgetcontrol.html</anchorfile>
            <anchor>contrastChanged</anchor>
            <arglist>(int contrast)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hueChanged</name>
            <anchorfile>qvideowidgetcontrol.html</anchorfile>
            <anchor>hueChanged</anchor>
            <arglist>(int hue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>saturationChanged</name>
            <anchorfile>qvideowidgetcontrol.html</anchorfile>
            <anchor>saturationChanged</anchor>
            <arglist>(int saturation)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QVideoWidgetControl</name>
            <anchorfile>qvideowidgetcontrol.html</anchorfile>
            <anchor>QVideoWidgetControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaPlaylistControl</name>
        <filename>qmediaplaylistcontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMediaPlaylistControl</name>
            <anchorfile>qmediaplaylistcontrol.html</anchorfile>
            <anchor>dtor.QMediaPlaylistControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QMediaPlaylistProvider *</type>
            <name>playlistProvider</name>
            <anchorfile>qmediaplaylistcontrol.html</anchorfile>
            <anchor>playlistProvider</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>setPlaylistProvider</name>
            <anchorfile>qmediaplaylistcontrol.html</anchorfile>
            <anchor>setPlaylistProvider</anchor>
            <arglist>(QMediaPlaylistProvider * playlist) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>currentIndex</name>
            <anchorfile>qmediaplaylistcontrol.html</anchorfile>
            <anchor>currentIndex</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setCurrentIndex</name>
            <anchorfile>qmediaplaylistcontrol.html</anchorfile>
            <anchor>setCurrentIndex</anchor>
            <arglist>(int position) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>nextIndex</name>
            <anchorfile>qmediaplaylistcontrol.html</anchorfile>
            <anchor>nextIndex</anchor>
            <arglist>(int step) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>previousIndex</name>
            <anchorfile>qmediaplaylistcontrol.html</anchorfile>
            <anchor>previousIndex</anchor>
            <arglist>(int step) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>next</name>
            <anchorfile>qmediaplaylistcontrol.html</anchorfile>
            <anchor>next</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>previous</name>
            <anchorfile>qmediaplaylistcontrol.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QMediaPlaylist::PlaybackMode</type>
            <name>playbackMode</name>
            <anchorfile>qmediaplaylistcontrol.html</anchorfile>
            <anchor>playbackMode</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setPlaybackMode</name>
            <anchorfile>qmediaplaylistcontrol.html</anchorfile>
            <anchor>setPlaybackMode</anchor>
            <arglist>(QMediaPlaylist::PlaybackMode mode) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>playlistProviderChanged</name>
            <anchorfile>qmediaplaylistcontrol.html</anchorfile>
            <anchor>playlistProviderChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentIndexChanged</name>
            <anchorfile>qmediaplaylistcontrol.html</anchorfile>
            <anchor>currentIndexChanged</anchor>
            <arglist>(int position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentMediaChanged</name>
            <anchorfile>qmediaplaylistcontrol.html</anchorfile>
            <anchor>currentMediaChanged</anchor>
            <arglist>(const QMediaContent &amp; content)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>playbackModeChanged</name>
            <anchorfile>qmediaplaylistcontrol.html</anchorfile>
            <anchor>playbackModeChanged</anchor>
            <arglist>(QMediaPlaylist::PlaybackMode mode)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QMediaPlaylistControl</name>
            <anchorfile>qmediaplaylistcontrol.html</anchorfile>
            <anchor>QMediaPlaylistControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoSatelliteInfoSource</name>
        <filename>qgeosatelliteinfosource.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoSatelliteInfoSource</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>QGeoSatelliteInfoSource</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QGeoSatelliteInfoSource *</type>
            <name>createDefaultSource</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>createDefaultSource</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>startUpdates</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>startUpdates</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>stopUpdates</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>stopUpdates</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>requestUpdate</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>requestUpdate</anchor>
            <arglist>(int timeout) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>satellitesInViewUpdated</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>satellitesInViewUpdated</anchor>
            <arglist>(const QList&lt;QGeoSatelliteInfo&gt; &amp; satellites)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>satellitesInUseUpdated</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>satellitesInUseUpdated</anchor>
            <arglist>(const QList&lt;QGeoSatelliteInfo&gt; &amp; satellites)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>requestTimeout</name>
            <anchorfile>qgeosatelliteinfosource.html</anchorfile>
            <anchor>requestTimeout</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVideoFrame</name>
        <filename>qvideoframe.html</filename>
        <member kind="enum">
            <name>FieldType</name>
            <anchor>FieldType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ProgressiveFrame">
            <anchor>FieldType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TopField">
            <anchor>FieldType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BottomField">
            <anchor>FieldType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InterlacedFrame">
            <anchor>FieldType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>PixelFormat</name>
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_Invalid">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_ARGB32">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_ARGB32_Premultiplied">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_RGB32">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_RGB24">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_RGB565">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_RGB555">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_ARGB8565_Premultiplied">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_BGRA32">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_BGRA32_Premultiplied">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_BGR32">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_BGR24">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_BGR565">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_BGR555">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_BGRA5658_Premultiplied">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_AYUV444">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_AYUV444_Premultiplied">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_YUV444">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_YUV420P">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_YV12">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_UYVY">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_YUYV">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_NV12">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_NV21">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_IMC1">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_IMC2">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_IMC3">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_IMC4">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_Y8">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_Y16">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Format_User">
            <anchor>PixelFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVideoFrame</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>QVideoFrame</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVideoFrame</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>QVideoFrame-2</anchor>
            <arglist>(QAbstractVideoBuffer * buffer, const QSize &amp; size, PixelFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVideoFrame</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>QVideoFrame-3</anchor>
            <arglist>(int bytes, const QSize &amp; size, int bytesPerLine, PixelFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVideoFrame</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>QVideoFrame-4</anchor>
            <arglist>(const QImage &amp; image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVideoFrame</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>QVideoFrame-5</anchor>
            <arglist>(const QVideoFrame &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QVideoFrame</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>dtor.QVideoFrame</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVideoFrame &amp;</type>
            <name>operator=</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QVideoFrame &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PixelFormat</type>
            <name>pixelFormat</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>pixelFormat</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractVideoBuffer::HandleType</type>
            <name>handleType</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>handleType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FieldType</type>
            <name>fieldType</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>fieldType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFieldType</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>setFieldType</anchor>
            <arglist>(FieldType field)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMapped</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>isMapped</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadable</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>isReadable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWritable</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>isWritable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractVideoBuffer::MapMode</type>
            <name>mapMode</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>mapMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>map</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>map</anchor>
            <arglist>(QAbstractVideoBuffer::MapMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unmap</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>unmap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bytesPerLine</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>bytesPerLine</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar *</type>
            <name>bits</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>bits</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const uchar *</type>
            <name>bits</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>bits-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mappedBytes</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>mappedBytes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>handle</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>startTime</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>startTime</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStartTime</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>setStartTime</anchor>
            <arglist>(qint64 time)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>endTime</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>endTime</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEndTime</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>setEndTime</anchor>
            <arglist>(qint64 time)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>PixelFormat</type>
            <name>pixelFormatFromImageFormat</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>pixelFormatFromImageFormat</anchor>
            <arglist>(QImage::Format format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QImage::Format</type>
            <name>imageFormatFromPixelFormat</name>
            <anchorfile>qvideoframe.html</anchorfile>
            <anchor>imageFormatFromPixelFormat</anchor>
            <arglist>(PixelFormat format)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCameraControl</name>
        <filename>qcameracontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCameraControl</name>
            <anchorfile>qcameracontrol.html</anchorfile>
            <anchor>dtor.QCameraControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QCamera::State</type>
            <name>state</name>
            <anchorfile>qcameracontrol.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setState</name>
            <anchorfile>qcameracontrol.html</anchorfile>
            <anchor>setState</anchor>
            <arglist>(QCamera::State state) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QCamera::CaptureMode</type>
            <name>captureMode</name>
            <anchorfile>qcameracontrol.html</anchorfile>
            <anchor>captureMode</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setCaptureMode</name>
            <anchorfile>qcameracontrol.html</anchorfile>
            <anchor>setCaptureMode</anchor>
            <arglist>(QCamera::CaptureMode mode) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isCaptureModeSupported</name>
            <anchorfile>qcameracontrol.html</anchorfile>
            <anchor>isCaptureModeSupported</anchor>
            <arglist>(QCamera::CaptureMode mode) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qcameracontrol.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QCamera::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qcameracontrol.html</anchorfile>
            <anchor>error</anchor>
            <arglist>(int error, const QString &amp; errorString)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>captureModeChanged</name>
            <anchorfile>qcameracontrol.html</anchorfile>
            <anchor>captureModeChanged</anchor>
            <arglist>(QCamera::CaptureMode mode)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QCameraControl</name>
            <anchorfile>qcameracontrol.html</anchorfile>
            <anchor>QCameraControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGalleryFilter</name>
        <filename>qgalleryfilter.html</filename>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Invalid">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Intersection">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Union">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MetaData">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Comparator</name>
            <anchor>Comparator-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Equals">
            <anchor>Comparator-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LessThan">
            <anchor>Comparator-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GreaterThan">
            <anchor>Comparator-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LessThanEquals">
            <anchor>Comparator-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GreaterThanEquals">
            <anchor>Comparator-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Contains">
            <anchor>Comparator-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StartsWith">
            <anchor>Comparator-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EndsWith">
            <anchor>Comparator-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Wildcard">
            <anchor>Comparator-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RegExp">
            <anchor>Comparator-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryFilter</name>
            <anchorfile>qgalleryfilter.html</anchorfile>
            <anchor>QGalleryFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryFilter</name>
            <anchorfile>qgalleryfilter.html</anchorfile>
            <anchor>QGalleryFilter-2</anchor>
            <arglist>(const QGalleryFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryFilter</name>
            <anchorfile>qgalleryfilter.html</anchorfile>
            <anchor>QGalleryFilter-3</anchor>
            <arglist>(const QGalleryIntersectionFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryFilter</name>
            <anchorfile>qgalleryfilter.html</anchorfile>
            <anchor>QGalleryFilter-4</anchor>
            <arglist>(const QGalleryUnionFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryFilter</name>
            <anchorfile>qgalleryfilter.html</anchorfile>
            <anchor>QGalleryFilter-5</anchor>
            <arglist>(const QGalleryMetaDataFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGalleryFilter</name>
            <anchorfile>qgalleryfilter.html</anchorfile>
            <anchor>dtor.QGalleryFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGalleryFilter &amp;</type>
            <name>operator=</name>
            <anchorfile>qgalleryfilter.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QGalleryFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type</type>
            <name>type</name>
            <anchorfile>qgalleryfilter.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qgalleryfilter.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGalleryIntersectionFilter</type>
            <name>toIntersectionFilter</name>
            <anchorfile>qgalleryfilter.html</anchorfile>
            <anchor>toIntersectionFilter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGalleryUnionFilter</type>
            <name>toUnionFilter</name>
            <anchorfile>qgalleryfilter.html</anchorfile>
            <anchor>toUnionFilter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGalleryMetaDataFilter</type>
            <name>toMetaDataFilter</name>
            <anchorfile>qgalleryfilter.html</anchorfile>
            <anchor>toMetaDataFilter</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGalleryIntersectionFilter</name>
        <filename>qgalleryintersectionfilter.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryIntersectionFilter</name>
            <anchorfile>qgalleryintersectionfilter.html</anchorfile>
            <anchor>QGalleryIntersectionFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryIntersectionFilter</name>
            <anchorfile>qgalleryintersectionfilter.html</anchorfile>
            <anchor>QGalleryIntersectionFilter-2</anchor>
            <arglist>(const QGalleryMetaDataFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryIntersectionFilter</name>
            <anchorfile>qgalleryintersectionfilter.html</anchorfile>
            <anchor>QGalleryIntersectionFilter-3</anchor>
            <arglist>(const QGalleryUnionFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryIntersectionFilter</name>
            <anchorfile>qgalleryintersectionfilter.html</anchorfile>
            <anchor>QGalleryIntersectionFilter-4</anchor>
            <arglist>(const QGalleryIntersectionFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGalleryIntersectionFilter</name>
            <anchorfile>qgalleryintersectionfilter.html</anchorfile>
            <anchor>dtor.QGalleryIntersectionFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGalleryIntersectionFilter &amp;</type>
            <name>operator=</name>
            <anchorfile>qgalleryintersectionfilter.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QGalleryIntersectionFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qgalleryintersectionfilter.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>filterCount</name>
            <anchorfile>qgalleryintersectionfilter.html</anchorfile>
            <anchor>filterCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qgalleryintersectionfilter.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGalleryFilter&gt;</type>
            <name>filters</name>
            <anchorfile>qgalleryintersectionfilter.html</anchorfile>
            <anchor>filters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qgalleryintersectionfilter.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const QGalleryMetaDataFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qgalleryintersectionfilter.html</anchorfile>
            <anchor>append-2</anchor>
            <arglist>(const QGalleryUnionFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qgalleryintersectionfilter.html</anchorfile>
            <anchor>append-3</anchor>
            <arglist>(const QGalleryIntersectionFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qgalleryintersectionfilter.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(int index, const QGalleryMetaDataFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qgalleryintersectionfilter.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(int index, const QGalleryUnionFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qgalleryintersectionfilter.html</anchorfile>
            <anchor>insert-3</anchor>
            <arglist>(int index, const QGalleryIntersectionFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>replace</name>
            <anchorfile>qgalleryintersectionfilter.html</anchorfile>
            <anchor>replace</anchor>
            <arglist>(int index, const QGalleryMetaDataFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>replace</name>
            <anchorfile>qgalleryintersectionfilter.html</anchorfile>
            <anchor>replace-2</anchor>
            <arglist>(int index, const QGalleryUnionFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAt</name>
            <anchorfile>qgalleryintersectionfilter.html</anchorfile>
            <anchor>removeAt</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qgalleryintersectionfilter.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGalleryUnionFilter</name>
        <filename>qgalleryunionfilter.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryUnionFilter</name>
            <anchorfile>qgalleryunionfilter.html</anchorfile>
            <anchor>QGalleryUnionFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryUnionFilter</name>
            <anchorfile>qgalleryunionfilter.html</anchorfile>
            <anchor>QGalleryUnionFilter-2</anchor>
            <arglist>(const QGalleryMetaDataFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryUnionFilter</name>
            <anchorfile>qgalleryunionfilter.html</anchorfile>
            <anchor>QGalleryUnionFilter-3</anchor>
            <arglist>(const QGalleryIntersectionFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryUnionFilter</name>
            <anchorfile>qgalleryunionfilter.html</anchorfile>
            <anchor>QGalleryUnionFilter-4</anchor>
            <arglist>(const QGalleryUnionFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGalleryUnionFilter</name>
            <anchorfile>qgalleryunionfilter.html</anchorfile>
            <anchor>dtor.QGalleryUnionFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGalleryUnionFilter &amp;</type>
            <name>operator=</name>
            <anchorfile>qgalleryunionfilter.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QGalleryUnionFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qgalleryunionfilter.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>filterCount</name>
            <anchorfile>qgalleryunionfilter.html</anchorfile>
            <anchor>filterCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qgalleryunionfilter.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGalleryFilter&gt;</type>
            <name>filters</name>
            <anchorfile>qgalleryunionfilter.html</anchorfile>
            <anchor>filters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qgalleryunionfilter.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const QGalleryMetaDataFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qgalleryunionfilter.html</anchorfile>
            <anchor>append-2</anchor>
            <arglist>(const QGalleryIntersectionFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qgalleryunionfilter.html</anchorfile>
            <anchor>append-3</anchor>
            <arglist>(const QGalleryUnionFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qgalleryunionfilter.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(int index, const QGalleryMetaDataFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qgalleryunionfilter.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(int index, const QGalleryIntersectionFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qgalleryunionfilter.html</anchorfile>
            <anchor>insert-3</anchor>
            <arglist>(int index, const QGalleryUnionFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>replace</name>
            <anchorfile>qgalleryunionfilter.html</anchorfile>
            <anchor>replace</anchor>
            <arglist>(int index, const QGalleryMetaDataFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>replace</name>
            <anchorfile>qgalleryunionfilter.html</anchorfile>
            <anchor>replace-2</anchor>
            <arglist>(int index, const QGalleryIntersectionFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAt</name>
            <anchorfile>qgalleryunionfilter.html</anchorfile>
            <anchor>removeAt</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qgalleryunionfilter.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGalleryMetaDataFilter</name>
        <filename>qgallerymetadatafilter.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryMetaDataFilter</name>
            <anchorfile>qgallerymetadatafilter.html</anchorfile>
            <anchor>QGalleryMetaDataFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryMetaDataFilter</name>
            <anchorfile>qgallerymetadatafilter.html</anchorfile>
            <anchor>QGalleryMetaDataFilter-2</anchor>
            <arglist>(const QString &amp; property, const QVariant &amp; value, QGalleryFilter::Comparator comparison, Qt::CaseSensitivity caseSensitivity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryMetaDataFilter</name>
            <anchorfile>qgallerymetadatafilter.html</anchorfile>
            <anchor>QGalleryMetaDataFilter-3</anchor>
            <arglist>(const QGalleryMetaDataFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGalleryMetaDataFilter</name>
            <anchorfile>qgallerymetadatafilter.html</anchorfile>
            <anchor>dtor.QGalleryMetaDataFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGalleryMetaDataFilter &amp;</type>
            <name>operator=</name>
            <anchorfile>qgallerymetadatafilter.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QGalleryMetaDataFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qgallerymetadatafilter.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>propertyName</name>
            <anchorfile>qgallerymetadatafilter.html</anchorfile>
            <anchor>propertyName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPropertyName</name>
            <anchorfile>qgallerymetadatafilter.html</anchorfile>
            <anchor>setPropertyName</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qgallerymetadatafilter.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qgallerymetadatafilter.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const QVariant &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGalleryFilter::Comparator</type>
            <name>comparator</name>
            <anchorfile>qgallerymetadatafilter.html</anchorfile>
            <anchor>comparator</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComparator</name>
            <anchorfile>qgallerymetadatafilter.html</anchorfile>
            <anchor>setComparator</anchor>
            <arglist>(QGalleryFilter::Comparator comparator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CaseSensitivity</type>
            <name>caseSensitivity</name>
            <anchorfile>qgallerymetadatafilter.html</anchorfile>
            <anchor>caseSensitivity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCaseSensitivity</name>
            <anchorfile>qgallerymetadatafilter.html</anchorfile>
            <anchor>setCaseSensitivity</anchor>
            <arglist>(Qt::CaseSensitivity sensitivity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInverted</name>
            <anchorfile>qgallerymetadatafilter.html</anchorfile>
            <anchor>isInverted</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInverted</name>
            <anchorfile>qgallerymetadatafilter.html</anchorfile>
            <anchor>setInverted</anchor>
            <arglist>(bool inverted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGalleryMetaDataFilter</type>
            <name>operator!</name>
            <anchorfile>qgallerymetadatafilter.html</anchorfile>
            <anchor>operator!</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QImageEncoderControl</name>
        <filename>qimageencodercontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QImageEncoderControl</name>
            <anchorfile>qimageencodercontrol.html</anchorfile>
            <anchor>dtor.QImageEncoderControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QStringList</type>
            <name>supportedImageCodecs</name>
            <anchorfile>qimageencodercontrol.html</anchorfile>
            <anchor>supportedImageCodecs</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>imageCodecDescription</name>
            <anchorfile>qimageencodercontrol.html</anchorfile>
            <anchor>imageCodecDescription</anchor>
            <arglist>(const QString &amp; codec) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;QSize&gt;</type>
            <name>supportedResolutions</name>
            <anchorfile>qimageencodercontrol.html</anchorfile>
            <anchor>supportedResolutions</anchor>
            <arglist>(const QImageEncoderSettings &amp; settings, bool * continuous) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QImageEncoderSettings</type>
            <name>imageSettings</name>
            <anchorfile>qimageencodercontrol.html</anchorfile>
            <anchor>imageSettings</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setImageSettings</name>
            <anchorfile>qimageencodercontrol.html</anchorfile>
            <anchor>setImageSettings</anchor>
            <arglist>(const QImageEncoderSettings &amp; settings) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QImageEncoderControl</name>
            <anchorfile>qimageencodercontrol.html</anchorfile>
            <anchor>QImageEncoderControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoPositionInfo</name>
        <filename>qgeopositioninfo.html</filename>
        <member kind="enum">
            <name>Attribute</name>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Direction">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GroundSpeed">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VerticalSpeed">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MagneticVariation">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HorizontalAccuracy">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VerticalAccuracy">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoPositionInfo</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>QGeoPositionInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoPositionInfo</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>QGeoPositionInfo-2</anchor>
            <arglist>(const QGeoCoordinate &amp; coordinate, const QDateTime &amp; timestamp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoPositionInfo</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>QGeoPositionInfo-3</anchor>
            <arglist>(const QGeoPositionInfo &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoPositionInfo</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>dtor.QGeoPositionInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoPositionInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QGeoPositionInfo &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QGeoPositionInfo &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QGeoPositionInfo &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimestamp</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>setTimestamp</anchor>
            <arglist>(const QDateTime &amp; timestamp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>timestamp</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>timestamp</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCoordinate</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>setCoordinate</anchor>
            <arglist>(const QGeoCoordinate &amp; coordinate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>coordinate</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>coordinate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttribute</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>setAttribute</anchor>
            <arglist>(Attribute attribute, qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>attribute</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>attribute</anchor>
            <arglist>(Attribute attribute) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAttribute</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>removeAttribute</anchor>
            <arglist>(Attribute attribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasAttribute</name>
            <anchorfile>qgeopositioninfo.html</anchorfile>
            <anchor>hasAttribute</anchor>
            <arglist>(Attribute attribute) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactAction</name>
        <filename>qcontactaction.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>availableActions</name>
            <anchorfile>qcontactaction.html</anchorfile>
            <anchor>availableActions</anchor>
            <arglist>(const QString &amp; vendor, int implementationVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QContactActionDescriptor&gt;</type>
            <name>actionDescriptors</name>
            <anchorfile>qcontactaction.html</anchorfile>
            <anchor>actionDescriptors</anchor>
            <arglist>(const QString &amp; actionName, const QString &amp; vendorName, int implementationVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QContactAction *</type>
            <name>action</name>
            <anchorfile>qcontactaction.html</anchorfile>
            <anchor>action</anchor>
            <arglist>(const QContactActionDescriptor &amp; descriptor)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual </type>
            <name>~QContactAction</name>
            <anchorfile>qcontactaction.html</anchorfile>
            <anchor>dtor.QContactAction</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QContactActionDescriptor</type>
            <name>actionDescriptor</name>
            <anchorfile>qcontactaction.html</anchorfile>
            <anchor>actionDescriptor</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVariantMap</type>
            <name>metaData</name>
            <anchorfile>qcontactaction.html</anchorfile>
            <anchor>metaData</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QContactFilter</type>
            <name>contactFilter</name>
            <anchorfile>qcontactaction.html</anchorfile>
            <anchor>contactFilter</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isDetailSupported</name>
            <anchorfile>qcontactaction.html</anchorfile>
            <anchor>isDetailSupported</anchor>
            <arglist>(const QContactDetail &amp; detail, const QContact &amp; contact) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;QContactDetail&gt;</type>
            <name>supportedDetails</name>
            <anchorfile>qcontactaction.html</anchorfile>
            <anchor>supportedDetails</anchor>
            <arglist>(const QContact &amp; contact) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>invokeAction</name>
            <anchorfile>qcontactaction.html</anchorfile>
            <anchor>invokeAction</anchor>
            <arglist>(const QContact &amp; contact, const QContactDetail &amp; detail, const QVariantMap &amp; parameters) = 0</arglist>
        </member>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InactiveState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActiveState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FinishedState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FinishedDetachedState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FinishedWithErrorState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual State</type>
            <name>state</name>
            <anchorfile>qcontactaction.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVariantMap</type>
            <name>results</name>
            <anchorfile>qcontactaction.html</anchorfile>
            <anchor>results</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qcontactaction.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QContactAction::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resultsAvailable</name>
            <anchorfile>qcontactaction.html</anchorfile>
            <anchor>resultsAvailable</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRadioTunerControl</name>
        <filename>qradiotunercontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRadioTunerControl</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>dtor.QRadioTunerControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isAvailable</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>isAvailable</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QtMultimediaKit::AvailabilityError</type>
            <name>availabilityError</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>availabilityError</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QRadioTuner::State</type>
            <name>state</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QRadioTuner::Band</type>
            <name>band</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>band</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setBand</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>setBand</anchor>
            <arglist>(QRadioTuner::Band band) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isBandSupported</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>isBandSupported</anchor>
            <arglist>(QRadioTuner::Band band) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>frequency</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>frequency</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>frequencyStep</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>frequencyStep</anchor>
            <arglist>(QRadioTuner::Band band) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QPair&lt;int, int&gt;</type>
            <name>frequencyRange</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>frequencyRange</anchor>
            <arglist>(QRadioTuner::Band band) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setFrequency</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>setFrequency</anchor>
            <arglist>(int frequency) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isStereo</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>isStereo</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QRadioTuner::StereoMode</type>
            <name>stereoMode</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>stereoMode</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setStereoMode</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>setStereoMode</anchor>
            <arglist>(QRadioTuner::StereoMode mode) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>signalStrength</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>signalStrength</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>volume</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>volume</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setVolume</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>setVolume</anchor>
            <arglist>(int volume) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isMuted</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>isMuted</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setMuted</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>setMuted</anchor>
            <arglist>(bool muted) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isSearching</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>isSearching</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>searchForward</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>searchForward</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>searchBackward</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>searchBackward</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>cancelSearch</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>cancelSearch</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>start</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>start</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>stop</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QRadioTuner::Error</type>
            <name>error</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>errorString</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QRadioTuner::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bandChanged</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>bandChanged</anchor>
            <arglist>(QRadioTuner::Band band)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>frequencyChanged</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>frequencyChanged</anchor>
            <arglist>(int frequency)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stereoStatusChanged</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>stereoStatusChanged</anchor>
            <arglist>(bool stereo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>searchingChanged</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>searchingChanged</anchor>
            <arglist>(bool searching)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>signalStrengthChanged</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>signalStrengthChanged</anchor>
            <arglist>(int strength)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>volumeChanged</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>volumeChanged</anchor>
            <arglist>(int volume)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mutedChanged</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>mutedChanged</anchor>
            <arglist>(bool muted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>error-2</anchor>
            <arglist>(QRadioTuner::Error error)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QRadioTunerControl</name>
            <anchorfile>qradiotunercontrol.html</anchorfile>
            <anchor>QRadioTunerControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCameraImageCapture</name>
        <filename>qcameraimagecapture.html</filename>
        <base>QMediaBindableInterface</base>
        <member kind="property" type="bool">
            <name>readyForCapture</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>readyForCapture-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotReadyError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ResourceError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutOfSpaceError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotSupportedFeatureError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FormatError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>DriveMode</name>
            <anchor>DriveMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SingleImageCapture">
            <anchor>DriveMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCameraImageCapture</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>QCameraImageCapture</anchor>
            <arglist>(QMediaObject * mediaObject, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCameraImageCapture</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>dtor.QCameraImageCapture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAvailable</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>isAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QtMultimediaKit::AvailabilityError</type>
            <name>availabilityError</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>availabilityError</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMediaObject *</type>
            <name>mediaObject</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>mediaObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadyForCapture</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>readyForCapture-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>supportedImageCodecs</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>supportedImageCodecs</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>imageCodecDescription</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>imageCodecDescription</anchor>
            <arglist>(const QString &amp; codec) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QSize&gt;</type>
            <name>supportedResolutions</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>supportedResolutions</anchor>
            <arglist>(const QImageEncoderSettings &amp; settings, bool * continuous) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImageEncoderSettings</type>
            <name>encodingSettings</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>encodingSettings</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEncodingSettings</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>setEncodingSettings</anchor>
            <arglist>(const QImageEncoderSettings &amp; settings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>capture</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>capture</anchor>
            <arglist>(const QString &amp; file)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancelCapture</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>cancelCapture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>error-2</anchor>
            <arglist>(QCameraImageCapture::Error error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>readyForCaptureChanged</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>readyForCaptureChanged</anchor>
            <arglist>(bool ready)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>imageExposed</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>imageExposed</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>imageCaptured</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>imageCaptured</anchor>
            <arglist>(int id, const QImage &amp; preview)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>imageSaved</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>imageSaved</anchor>
            <arglist>(int id, const QString &amp; fileName)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setMediaObject</name>
            <anchorfile>qcameraimagecapture.html</anchorfile>
            <anchor>setMediaObject</anchor>
            <arglist>(QMediaObject * mediaObject)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemRemoveRequest</name>
        <filename>qorganizeritemremoverequest.html</filename>
        <base>QOrganizerItemAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemRemoveRequest</name>
            <anchorfile>qorganizeritemremoverequest.html</anchorfile>
            <anchor>QOrganizerItemRemoveRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemId</name>
            <anchorfile>qorganizeritemremoverequest.html</anchorfile>
            <anchor>setItemId</anchor>
            <arglist>(const QOrganizerItemLocalId &amp; organizeritemId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemIds</name>
            <anchorfile>qorganizeritemremoverequest.html</anchorfile>
            <anchor>setItemIds</anchor>
            <arglist>(const QList&lt;QOrganizerItemLocalId&gt; &amp; organizeritemIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItemLocalId&gt;</type>
            <name>itemIds</name>
            <anchorfile>qorganizeritemremoverequest.html</anchorfile>
            <anchor>itemIds</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;int, QOrganizerItemManager::Error&gt;</type>
            <name>errorMap</name>
            <anchorfile>qorganizeritemremoverequest.html</anchorfile>
            <anchor>errorMap</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoPositionInfoSource</name>
        <filename>qgeopositioninfosource.html</filename>
        <member kind="property" type="int">
            <name>updateInterval</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>updateInterval-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>minimumUpdateInterval</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>minimumUpdateInterval-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>PositioningMethod</name>
            <anchor>PositioningMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SatellitePositioningMethods">
            <anchor>PositioningMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NonSatellitePositioningMethods">
            <anchor>PositioningMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AllPositioningMethods">
            <anchor>PositioningMethod-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGeoPositionInfoSource::PositioningMethod">
            <name>PositioningMethods</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>PositioningMethods-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoPositionInfoSource</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>QGeoPositionInfoSource</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeoPositionInfoSource</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>dtor.QGeoPositionInfoSource</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setUpdateInterval</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>updateInterval-prop</anchor>
            <arglist>(int msec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>updateInterval</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>updateInterval-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setPreferredPositioningMethods</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>setPreferredPositioningMethods</anchor>
            <arglist>(QFlags&lt;QGeoPositionInfoSource::PositioningMethod&gt; methods)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>PositioningMethods</type>
            <name>preferredPositioningMethods</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>preferredPositioningMethods</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QGeoPositionInfo</type>
            <name>lastKnownPosition</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>lastKnownPosition</anchor>
            <arglist>(bool fromSatellitePositioningMethodsOnly) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual PositioningMethods</type>
            <name>supportedPositioningMethods</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>supportedPositioningMethods</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>minimumUpdateInterval</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>minimumUpdateInterval-prop</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QGeoPositionInfoSource *</type>
            <name>createDefaultSource</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>createDefaultSource</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>startUpdates</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>startUpdates</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>stopUpdates</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>stopUpdates</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>requestUpdate</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>requestUpdate</anchor>
            <arglist>(int timeout) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>positionUpdated</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>positionUpdated</anchor>
            <arglist>(const QGeoPositionInfo &amp; update)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateTimeout</name>
            <anchorfile>qgeopositioninfosource.html</anchorfile>
            <anchor>updateTimeout</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageAccount</name>
        <filename>qmessageaccount.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageAccount</name>
            <anchorfile>qmessageaccount.html</anchorfile>
            <anchor>QMessageAccount</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageAccount</name>
            <anchorfile>qmessageaccount.html</anchorfile>
            <anchor>QMessageAccount-2</anchor>
            <arglist>(const QMessageAccountId &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageAccount</name>
            <anchorfile>qmessageaccount.html</anchorfile>
            <anchor>QMessageAccount-3</anchor>
            <arglist>(const QMessageAccount &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMessageAccount</name>
            <anchorfile>qmessageaccount.html</anchorfile>
            <anchor>dtor.QMessageAccount</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageAccountId</type>
            <name>id</name>
            <anchorfile>qmessageaccount.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qmessageaccount.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessage::TypeFlags</type>
            <name>messageTypes</name>
            <anchorfile>qmessageaccount.html</anchorfile>
            <anchor>messageTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageAccountId</type>
            <name>defaultAccount</name>
            <anchorfile>qmessageaccount.html</anchorfile>
            <anchor>defaultAccount</anchor>
            <arglist>(QMessage::Type type)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageContentContainer</name>
        <filename>qmessagecontentcontainer.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageContentContainer</name>
            <anchorfile>qmessagecontentcontainer.html</anchorfile>
            <anchor>QMessageContentContainer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageContentContainer</name>
            <anchorfile>qmessagecontentcontainer.html</anchorfile>
            <anchor>QMessageContentContainer-2</anchor>
            <arglist>(const QMessageContentContainer &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMessageContentContainer</name>
            <anchorfile>qmessagecontentcontainer.html</anchorfile>
            <anchor>dtor.QMessageContentContainer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>contentType</name>
            <anchorfile>qmessagecontentcontainer.html</anchorfile>
            <anchor>contentType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>contentSubType</name>
            <anchorfile>qmessagecontentcontainer.html</anchorfile>
            <anchor>contentSubType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>contentCharset</name>
            <anchorfile>qmessagecontentcontainer.html</anchorfile>
            <anchor>contentCharset</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>suggestedFileName</name>
            <anchorfile>qmessagecontentcontainer.html</anchorfile>
            <anchor>suggestedFileName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isContentAvailable</name>
            <anchorfile>qmessagecontentcontainer.html</anchorfile>
            <anchor>isContentAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qmessagecontentcontainer.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>textContent</name>
            <anchorfile>qmessagecontentcontainer.html</anchorfile>
            <anchor>textContent</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>content</name>
            <anchorfile>qmessagecontentcontainer.html</anchorfile>
            <anchor>content</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeTextContent</name>
            <anchorfile>qmessagecontentcontainer.html</anchorfile>
            <anchor>writeTextContent</anchor>
            <arglist>(QTextStream &amp; out) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeContent</name>
            <anchorfile>qmessagecontentcontainer.html</anchorfile>
            <anchor>writeContent</anchor>
            <arglist>(QDataStream &amp; out) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageContentContainerIdList</type>
            <name>contentIds</name>
            <anchorfile>qmessagecontentcontainer.html</anchorfile>
            <anchor>contentIds</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageContentContainer</type>
            <name>find</name>
            <anchorfile>qmessagecontentcontainer.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(const QMessageContentContainerId &amp; id) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qmessagecontentcontainer.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QMessageContentContainerId &amp; id) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>headerFieldValue</name>
            <anchorfile>qmessagecontentcontainer.html</anchorfile>
            <anchor>headerFieldValue</anchor>
            <arglist>(const QByteArray &amp; name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>headerFieldValues</name>
            <anchorfile>qmessagecontentcontainer.html</anchorfile>
            <anchor>headerFieldValues</anchor>
            <arglist>(const QByteArray &amp; name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>headerFields</name>
            <anchorfile>qmessagecontentcontainer.html</anchorfile>
            <anchor>headerFields</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemInvalidFilter</name>
        <filename>qorganizeriteminvalidfilter.html</filename>
        <base>QOrganizerItemFilter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemInvalidFilter</name>
            <anchorfile>qorganizeriteminvalidfilter.html</anchorfile>
            <anchor>QOrganizerItemInvalidFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemInvalidFilter</name>
            <anchorfile>qorganizeriteminvalidfilter.html</anchorfile>
            <anchor>QOrganizerItemInvalidFilter-2</anchor>
            <arglist>(const QOrganizerItemFilter &amp; other)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkAbstractRequest</name>
        <filename>qlandmarkabstractrequest.html</filename>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InactiveState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActiveState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CanceledState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FinishedState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>RequestType</name>
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LandmarkIdFetchRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CategoryIdFetchRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LandmarkFetchRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CategoryFetchRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LandmarkSaveRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LandmarkRemoveRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CategorySaveRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CategoryRemoveRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImportRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExportRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkAbstractRequest</name>
            <anchorfile>qlandmarkabstractrequest.html</anchorfile>
            <anchor>QLandmarkAbstractRequest</anchor>
            <arglist>(QLandmarkManager * manager, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QLandmarkAbstractRequest</name>
            <anchorfile>qlandmarkabstractrequest.html</anchorfile>
            <anchor>dtor.QLandmarkAbstractRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RequestType</type>
            <name>type</name>
            <anchorfile>qlandmarkabstractrequest.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>State</type>
            <name>state</name>
            <anchorfile>qlandmarkabstractrequest.html</anchorfile>
            <anchor>state</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInactive</name>
            <anchorfile>qlandmarkabstractrequest.html</anchorfile>
            <anchor>isInactive</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qlandmarkabstractrequest.html</anchorfile>
            <anchor>isActive</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qlandmarkabstractrequest.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCanceled</name>
            <anchorfile>qlandmarkabstractrequest.html</anchorfile>
            <anchor>isCanceled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkManager::Error</type>
            <name>error</name>
            <anchorfile>qlandmarkabstractrequest.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qlandmarkabstractrequest.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkManager *</type>
            <name>manager</name>
            <anchorfile>qlandmarkabstractrequest.html</anchorfile>
            <anchor>manager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setManager</name>
            <anchorfile>qlandmarkabstractrequest.html</anchorfile>
            <anchor>setManager</anchor>
            <arglist>(QLandmarkManager * manager)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>start</name>
            <anchorfile>qlandmarkabstractrequest.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>cancel</name>
            <anchorfile>qlandmarkabstractrequest.html</anchorfile>
            <anchor>cancel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForFinished</name>
            <anchorfile>qlandmarkabstractrequest.html</anchorfile>
            <anchor>waitForFinished</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resultsAvailable</name>
            <anchorfile>qlandmarkabstractrequest.html</anchorfile>
            <anchor>resultsAvailable</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qlandmarkabstractrequest.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QLandmarkAbstractRequest::State newState)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoNavigationInstruction</name>
        <filename>qgeonavigationinstruction.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoNavigationInstruction</name>
            <anchorfile>qgeonavigationinstruction.html</anchorfile>
            <anchor>QGeoNavigationInstruction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoNavigationInstruction</name>
            <anchorfile>qgeonavigationinstruction.html</anchorfile>
            <anchor>QGeoNavigationInstruction-2</anchor>
            <arglist>(const QGeoNavigationInstruction &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoNavigationInstruction</name>
            <anchorfile>qgeonavigationinstruction.html</anchorfile>
            <anchor>dtor.QGeoNavigationInstruction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoNavigationInstruction &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeonavigationinstruction.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QGeoNavigationInstruction &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeonavigationinstruction.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QGeoNavigationInstruction &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeonavigationinstruction.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QGeoNavigationInstruction &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qgeonavigationinstruction.html</anchorfile>
            <anchor>setPosition</anchor>
            <arglist>(const QGeoCoordinate &amp; position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>position</name>
            <anchorfile>qgeonavigationinstruction.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInstructionText</name>
            <anchorfile>qgeonavigationinstruction.html</anchorfile>
            <anchor>setInstructionText</anchor>
            <arglist>(const QString &amp; instructionText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>instructionText</name>
            <anchorfile>qgeonavigationinstruction.html</anchorfile>
            <anchor>instructionText</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimeToNextInstruction</name>
            <anchorfile>qgeonavigationinstruction.html</anchorfile>
            <anchor>setTimeToNextInstruction</anchor>
            <arglist>(int secs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>timeToNextInstruction</name>
            <anchorfile>qgeonavigationinstruction.html</anchorfile>
            <anchor>timeToNextInstruction</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDistanceToNextInstruction</name>
            <anchorfile>qgeonavigationinstruction.html</anchorfile>
            <anchor>setDistanceToNextInstruction</anchor>
            <arglist>(qreal distance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>distanceToNextInstruction</name>
            <anchorfile>qgeonavigationinstruction.html</anchorfile>
            <anchor>distanceToNextInstruction</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCameraExposure</name>
        <filename>qcameraexposure.html</filename>
        <member kind="property" type="qreal">
            <name>aperture</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>aperture-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>shutterSpeed</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>shutterSpeed-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>isoSensitivity</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>isoSensitivity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="qreal">
            <name>exposureCompensation</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>exposureCompensation-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FlashMode</name>
            <anchor>FlashMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FlashOff">
            <anchor>FlashMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FlashOn">
            <anchor>FlashMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FlashAuto">
            <anchor>FlashMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FlashRedEyeReduction">
            <anchor>FlashMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FlashFill">
            <anchor>FlashMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FlashTorch">
            <anchor>FlashMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FlashSlowSyncFrontCurtain">
            <anchor>FlashMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FlashSlowSyncRearCurtain">
            <anchor>FlashMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FlashManual">
            <anchor>FlashMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QCameraExposure::FlashMode">
            <name>FlashModes</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>FlashModes-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ExposureMode</name>
            <anchor>ExposureMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExposureManual">
            <anchor>ExposureMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExposureAuto">
            <anchor>ExposureMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExposureNight">
            <anchor>ExposureMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExposureBacklight">
            <anchor>ExposureMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExposureSpotlight">
            <anchor>ExposureMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExposureSports">
            <anchor>ExposureMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExposureSnow">
            <anchor>ExposureMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExposureBeach">
            <anchor>ExposureMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExposureLargeAperture">
            <anchor>ExposureMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExposureSmallAperture">
            <anchor>ExposureMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExposurePortrait">
            <anchor>ExposureMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>MeteringMode</name>
            <anchor>MeteringMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MeteringMatrix">
            <anchor>MeteringMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MeteringAverage">
            <anchor>MeteringMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MeteringSpot">
            <anchor>MeteringMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAvailable</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>isAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FlashModes</type>
            <name>flashMode</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>flashMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFlashModeSupported</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>isFlashModeSupported</anchor>
            <arglist>(QFlags&lt;QCameraExposure::FlashMode&gt; mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFlashReady</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>isFlashReady</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ExposureMode</type>
            <name>exposureMode</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>exposureMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isExposureModeSupported</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>isExposureModeSupported</anchor>
            <arglist>(ExposureMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>exposureCompensation</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>exposureCompensation-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>MeteringMode</type>
            <name>meteringMode</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>meteringMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMeteringModeSupported</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>isMeteringModeSupported</anchor>
            <arglist>(MeteringMode mode) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>isoSensitivity</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>isoSensitivity-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;int&gt;</type>
            <name>supportedIsoSensitivities</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>supportedIsoSensitivities</anchor>
            <arglist>(bool * continuous) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>aperture</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>aperture-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;qreal&gt;</type>
            <name>supportedApertures</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>supportedApertures</anchor>
            <arglist>(bool * continuous) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>shutterSpeed</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>shutterSpeed-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;qreal&gt;</type>
            <name>supportedShutterSpeeds</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>supportedShutterSpeeds</anchor>
            <arglist>(bool * continuous) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlashMode</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>setFlashMode</anchor>
            <arglist>(QFlags&lt;QCameraExposure::FlashMode&gt; mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExposureMode</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>setExposureMode</anchor>
            <arglist>(ExposureMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExposureCompensation</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>exposureCompensation-prop</anchor>
            <arglist>(qreal ev)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMeteringMode</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>setMeteringMode</anchor>
            <arglist>(MeteringMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setManualIsoSensitivity</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>isoSensitivity-prop</anchor>
            <arglist>(int iso)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoIsoSensitivity</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>setAutoIsoSensitivity</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setManualAperture</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>aperture-prop</anchor>
            <arglist>(qreal aperture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoAperture</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>setAutoAperture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setManualShutterSpeed</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>shutterSpeed-prop</anchor>
            <arglist>(qreal seconds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoShutterSpeed</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>setAutoShutterSpeed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>flashReady</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>flashReady</anchor>
            <arglist>(bool ready)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>apertureChanged</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>apertureChanged</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>apertureRangeChanged</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>apertureRangeChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shutterSpeedChanged</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>shutterSpeedChanged</anchor>
            <arglist>(qreal speed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shutterSpeedRangeChanged</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>shutterSpeedRangeChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>isoSensitivityChanged</name>
            <anchorfile>qcameraexposure.html</anchorfile>
            <anchor>isoSensitivityChanged</anchor>
            <arglist>(int value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAudioFormat</name>
        <filename>qaudioformat.html</filename>
        <member kind="enum">
            <name>SampleType</name>
            <anchor>SampleType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unknown">
            <anchor>SampleType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SignedInt">
            <anchor>SampleType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnSignedInt">
            <anchor>SampleType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Float">
            <anchor>SampleType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Endian</name>
            <anchor>Endian-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BigEndian">
            <anchor>Endian-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LittleEndian">
            <anchor>Endian-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAudioFormat</name>
            <anchorfile>qaudioformat.html</anchorfile>
            <anchor>QAudioFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAudioFormat</name>
            <anchorfile>qaudioformat.html</anchorfile>
            <anchor>QAudioFormat-2</anchor>
            <arglist>(const QAudioFormat &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAudioFormat</name>
            <anchorfile>qaudioformat.html</anchorfile>
            <anchor>dtor.QAudioFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAudioFormat &amp;</type>
            <name>operator=</name>
            <anchorfile>qaudioformat.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QAudioFormat &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qaudioformat.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QAudioFormat &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qaudioformat.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QAudioFormat &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qaudioformat.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrequency</name>
            <anchorfile>qaudioformat-obsolete.html</anchorfile>
            <anchor>setFrequency</anchor>
            <arglist>(int frequency)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>frequency</name>
            <anchorfile>qaudioformat-obsolete.html</anchorfile>
            <anchor>frequency</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSampleRate</name>
            <anchorfile>qaudioformat.html</anchorfile>
            <anchor>setSampleRate</anchor>
            <arglist>(int samplerate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sampleRate</name>
            <anchorfile>qaudioformat.html</anchorfile>
            <anchor>sampleRate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChannels</name>
            <anchorfile>qaudioformat-obsolete.html</anchorfile>
            <anchor>setChannels</anchor>
            <arglist>(int channels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>channels</name>
            <anchorfile>qaudioformat-obsolete.html</anchorfile>
            <anchor>channels</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChannelCount</name>
            <anchorfile>qaudioformat.html</anchorfile>
            <anchor>setChannelCount</anchor>
            <arglist>(int channels)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>channelCount</name>
            <anchorfile>qaudioformat.html</anchorfile>
            <anchor>channelCount</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSampleSize</name>
            <anchorfile>qaudioformat.html</anchorfile>
            <anchor>setSampleSize</anchor>
            <arglist>(int sampleSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sampleSize</name>
            <anchorfile>qaudioformat.html</anchorfile>
            <anchor>sampleSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCodec</name>
            <anchorfile>qaudioformat.html</anchorfile>
            <anchor>setCodec</anchor>
            <arglist>(const QString &amp; codec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>codec</name>
            <anchorfile>qaudioformat.html</anchorfile>
            <anchor>codec</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setByteOrder</name>
            <anchorfile>qaudioformat.html</anchorfile>
            <anchor>setByteOrder</anchor>
            <arglist>(QAudioFormat::Endian byteOrder)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAudioFormat::Endian</type>
            <name>byteOrder</name>
            <anchorfile>qaudioformat.html</anchorfile>
            <anchor>byteOrder</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSampleType</name>
            <anchorfile>qaudioformat.html</anchorfile>
            <anchor>setSampleType</anchor>
            <arglist>(QAudioFormat::SampleType sampleType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAudioFormat::SampleType</type>
            <name>sampleType</name>
            <anchorfile>qaudioformat.html</anchorfile>
            <anchor>sampleType</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoAddress</name>
        <filename>qgeoaddress.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoAddress</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>QGeoAddress</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoAddress</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>QGeoAddress-2</anchor>
            <arglist>(const QGeoAddress &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoAddress</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>dtor.QGeoAddress</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoAddress &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QGeoAddress &amp; address)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QGeoAddress &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QGeoAddress &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>country</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>country</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCountry</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>setCountry</anchor>
            <arglist>(const QString &amp; country)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>countryCode</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>countryCode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCountryCode</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>setCountryCode</anchor>
            <arglist>(const QString &amp; countryCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>state</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setState</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>setState</anchor>
            <arglist>(const QString &amp; state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>county</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>county</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCounty</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>setCounty</anchor>
            <arglist>(const QString &amp; county)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>city</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>city</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCity</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>setCity</anchor>
            <arglist>(const QString &amp; city)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>district</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>district</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDistrict</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>setDistrict</anchor>
            <arglist>(const QString &amp; district)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>thoroughfareName</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>thoroughfareName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setThoroughfareName</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>setThoroughfareName</anchor>
            <arglist>(const QString &amp; thoroughfareName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>thoroughfareNumber</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>thoroughfareNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setThoroughfareNumber</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>setThoroughfareNumber</anchor>
            <arglist>(const QString &amp; thoroughfareNumber)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>postCode</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>postCode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPostCode</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>setPostCode</anchor>
            <arglist>(const QString &amp; postCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>postOfficeBox</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>postOfficeBox</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPostOfficeBox</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>setPostOfficeBox</anchor>
            <arglist>(const QString &amp; postOfficeBox)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qgeoaddress.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTapReading</name>
        <filename>qtapreading.html</filename>
        <base>QSensorReading</base>
        <member kind="property" type="TapDirection">
            <name>tapDirection</name>
            <anchorfile>qtapreading.html</anchorfile>
            <anchor>tapDirection-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>doubleTap</name>
            <anchorfile>qtapreading.html</anchorfile>
            <anchor>doubleTap-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>TapDirection</name>
            <anchor>TapDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Undefined">
            <anchor>TapDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="X">
            <anchor>TapDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Y">
            <anchor>TapDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Z">
            <anchor>TapDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="X_Pos">
            <anchor>TapDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Y_Pos">
            <anchor>TapDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Z_Pos">
            <anchor>TapDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="X_Neg">
            <anchor>TapDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Y_Neg">
            <anchor>TapDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Z_Neg">
            <anchor>TapDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>TapDirection</type>
            <name>tapDirection</name>
            <anchorfile>qtapreading.html</anchorfile>
            <anchor>tapDirection-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTapDirection</name>
            <anchorfile>qtapreading.html</anchorfile>
            <anchor>setTapDirection</anchor>
            <arglist>(TapDirection tapDirection)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDoubleTap</name>
            <anchorfile>qtapreading.html</anchorfile>
            <anchor>doubleTap-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDoubleTap</name>
            <anchorfile>qtapreading.html</anchorfile>
            <anchor>setDoubleTap</anchor>
            <arglist>(bool doubleTap)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTapFilter</name>
        <filename>qtapfilter.html</filename>
        <base>QSensorFilter</base>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>filter</name>
            <anchorfile>qtapfilter.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>(QTapReading * reading) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTapSensor</name>
        <filename>qtapsensor.html</filename>
        <base>QSensor</base>
        <member kind="property" type="bool">
            <name>returnDoubleTapEvents</name>
            <anchorfile>qtapsensor.html</anchorfile>
            <anchor>returnDoubleTapEvents-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTapSensor</name>
            <anchorfile>qtapsensor.html</anchorfile>
            <anchor>QTapSensor</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTapSensor</name>
            <anchorfile>qtapsensor.html</anchorfile>
            <anchor>dtor.QTapSensor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTapReading *</type>
            <name>reading</name>
            <anchorfile>qtapsensor.html</anchorfile>
            <anchor>reading</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactManager</name>
        <filename>qcontactmanager.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactManager</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>QContactManager</anchor>
            <arglist>(const QString &amp; managerName, const QMap&lt;QString, QString&gt; &amp; parameters, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactManager</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>QContactManager-2</anchor>
            <arglist>(const QString &amp; managerName, int implementationVersion, const QMap&lt;QString, QString&gt; &amp; parameters, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactManager</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>QContactManager-3</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QContactManager *</type>
            <name>fromUri</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>fromUri</anchor>
            <arglist>(const QString &amp; managerUri, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactManager</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>dtor.QContactManager</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerName</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;QString, QString&gt;</type>
            <name>managerParameters</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>managerParameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerUri</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>managerUri</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>managerVersion</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>managerVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>parseUri</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>parseUri</anchor>
            <arglist>(const QString &amp; uri, QString * pManagerId, QMap&lt;QString, QString&gt; * pParams)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>buildUri</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>buildUri</anchor>
            <arglist>(const QString &amp; managerName, const QMap&lt;QString, QString&gt; &amp; params, int implementationVersion)</arglist>
        </member>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DoesNotExistError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlreadyExistsError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidDetailError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidRelationshipError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LockedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DetailAccessError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PermissionsError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutOfMemoryError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotSupportedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BadArgumentError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnspecifiedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VersionMismatchError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LimitReachedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidContactTypeError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactManager::Error</type>
            <name>error</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactLocalId&gt;</type>
            <name>contactIds</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>contactIds</anchor>
            <arglist>(const QList&lt;QContactSortOrder&gt; &amp; sortOrders) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactLocalId&gt;</type>
            <name>contactIds</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>contactIds-2</anchor>
            <arglist>(const QContactFilter &amp; filter, const QList&lt;QContactSortOrder&gt; &amp; sortOrders) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContact&gt;</type>
            <name>contacts</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>contacts</anchor>
            <arglist>(const QList&lt;QContactSortOrder&gt; &amp; sortOrders, const QContactFetchHint &amp; fetchHint) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContact&gt;</type>
            <name>contacts</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>contacts-2</anchor>
            <arglist>(const QContactFilter &amp; filter, const QList&lt;QContactSortOrder&gt; &amp; sortOrders, const QContactFetchHint &amp; fetchHint) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContact</type>
            <name>contact</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>contact</anchor>
            <arglist>(const QContactLocalId &amp; contactId, const QContactFetchHint &amp; fetchHint) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>saveContact</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>saveContact</anchor>
            <arglist>(QContact * contact)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeContact</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>removeContact</anchor>
            <arglist>(const QContactLocalId &amp; contactId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>saveContacts</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>saveContacts</anchor>
            <arglist>(QList&lt;QContact&gt; * contacts, QMap&lt;int, QContactManager::Error&gt; * errorMap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeContacts</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>removeContacts</anchor>
            <arglist>(const QList&lt;QContactLocalId&gt; &amp; contactIds, QMap&lt;int, QContactManager::Error&gt; * errorMap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContact</type>
            <name>compatibleContact</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>compatibleContact</anchor>
            <arglist>(const QContact &amp; original)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>synthesizedContactDisplayLabel</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>synthesizedContactDisplayLabel</anchor>
            <arglist>(const QContact &amp; contact) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>synthesizeContactDisplayLabel</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>synthesizeContactDisplayLabel</anchor>
            <arglist>(QContact * contact) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setSelfContactId</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>setSelfContactId</anchor>
            <arglist>(const QContactLocalId &amp; contactId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactLocalId</type>
            <name>selfContactId</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>selfContactId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactRelationship&gt;</type>
            <name>relationships</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>relationships</anchor>
            <arglist>(const QContactId &amp; participantId, QContactRelationship::Role role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactRelationship&gt;</type>
            <name>relationships</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>relationships-2</anchor>
            <arglist>(const QString &amp; relationshipType, const QContactId &amp; participantId, QContactRelationship::Role role) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>saveRelationship</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>saveRelationship</anchor>
            <arglist>(QContactRelationship * relationship)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>saveRelationships</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>saveRelationships</anchor>
            <arglist>(QList&lt;QContactRelationship&gt; * relationships, QMap&lt;int, QContactManager::Error&gt; * errorMap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeRelationship</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>removeRelationship</anchor>
            <arglist>(const QContactRelationship &amp; relationship)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeRelationships</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>removeRelationships</anchor>
            <arglist>(const QList&lt;QContactRelationship&gt; &amp; relationships, QMap&lt;int, QContactManager::Error&gt; * errorMap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;QString, QContactDetailDefinition&gt;</type>
            <name>detailDefinitions</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>detailDefinitions</anchor>
            <arglist>(const QString &amp; contactType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactDetailDefinition</type>
            <name>detailDefinition</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>detailDefinition</anchor>
            <arglist>(const QString &amp; definitionName, const QString &amp; contactType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>saveDetailDefinition</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>saveDetailDefinition</anchor>
            <arglist>(const QContactDetailDefinition &amp; def, const QString &amp; contactType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeDetailDefinition</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>removeDetailDefinition</anchor>
            <arglist>(const QString &amp; definitionName, const QString &amp; contactType)</arglist>
        </member>
        <member kind="enum">
            <name>ManagerFeature</name>
            <anchor>ManagerFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Groups">
            <anchor>ManagerFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActionPreferences">
            <anchor>ManagerFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MutableDefinitions">
            <anchor>ManagerFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Relationships">
            <anchor>ManagerFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ArbitraryRelationshipTypes">
            <anchor>ManagerFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DetailOrdering">
            <anchor>ManagerFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelfContact">
            <anchor>ManagerFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Anonymous">
            <anchor>ManagerFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ChangeLogs">
            <anchor>ManagerFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasFeature</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>hasFeature</anchor>
            <arglist>(QContactManager::ManagerFeature feature, const QString &amp; contactType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRelationshipTypeSupported</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>isRelationshipTypeSupported</anchor>
            <arglist>(const QString &amp; relationshipType, const QString &amp; contactType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QVariant::Type&gt;</type>
            <name>supportedDataTypes</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>supportedDataTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFilterSupported</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>isFilterSupported</anchor>
            <arglist>(const QContactFilter &amp; filter) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>supportedContactTypes</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>supportedContactTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>availableManagers</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>availableManagers</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataChanged</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>dataChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>contactsAdded</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>contactsAdded</anchor>
            <arglist>(const QList&lt;QContactLocalId&gt; &amp; contactIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>contactsChanged</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>contactsChanged</anchor>
            <arglist>(const QList&lt;QContactLocalId&gt; &amp; contactIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>contactsRemoved</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>contactsRemoved</anchor>
            <arglist>(const QList&lt;QContactLocalId&gt; &amp; contactIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>relationshipsAdded</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>relationshipsAdded</anchor>
            <arglist>(const QList&lt;QContactLocalId&gt; &amp; affectedContactIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>relationshipsRemoved</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>relationshipsRemoved</anchor>
            <arglist>(const QList&lt;QContactLocalId&gt; &amp; affectedContactIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selfContactIdChanged</name>
            <anchorfile>qcontactmanager.html</anchorfile>
            <anchor>selfContactIdChanged</anchor>
            <arglist>(const QContactLocalId &amp; oldId, const QContactLocalId &amp; newId)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkCategoryIdFetchRequest</name>
        <filename>qlandmarkcategoryidfetchrequest.html</filename>
        <base>QLandmarkAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkCategoryIdFetchRequest</name>
            <anchorfile>qlandmarkcategoryidfetchrequest.html</anchorfile>
            <anchor>QLandmarkCategoryIdFetchRequest</anchor>
            <arglist>(QLandmarkManager * manager, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLandmarkCategoryIdFetchRequest</name>
            <anchorfile>qlandmarkcategoryidfetchrequest.html</anchorfile>
            <anchor>dtor.QLandmarkCategoryIdFetchRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkCategoryId&gt;</type>
            <name>categoryIds</name>
            <anchorfile>qlandmarkcategoryidfetchrequest.html</anchorfile>
            <anchor>categoryIds</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSorting</name>
            <anchorfile>qlandmarkcategoryidfetchrequest.html</anchorfile>
            <anchor>setSorting</anchor>
            <arglist>(const QLandmarkNameSort &amp; nameSort)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkNameSort</type>
            <name>sorting</name>
            <anchorfile>qlandmarkcategoryidfetchrequest.html</anchorfile>
            <anchor>sorting</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemFilter</name>
        <filename>qorganizeritemfilter.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemFilter</name>
            <anchorfile>qorganizeritemfilter.html</anchorfile>
            <anchor>QOrganizerItemFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOrganizerItemFilter</name>
            <anchorfile>qorganizeritemfilter.html</anchorfile>
            <anchor>dtor.QOrganizerItemFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemFilter</name>
            <anchorfile>qorganizeritemfilter.html</anchorfile>
            <anchor>QOrganizerItemFilter-2</anchor>
            <arglist>(const QOrganizerItemFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemFilter &amp;</type>
            <name>operator=</name>
            <anchorfile>qorganizeritemfilter.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QOrganizerItemFilter &amp; other)</arglist>
        </member>
        <member kind="enum">
            <name>FilterType</name>
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OrganizerItemDetailFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OrganizerItemDetailRangeFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OrganizerItemDateTimePeriodFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ChangeLogFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActionFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IntersectionFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnionFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LocalIdFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DefaultFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FilterType</type>
            <name>type</name>
            <anchorfile>qorganizeritemfilter.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>MatchFlag</name>
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchExactly">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchContains">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchStartsWith">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchEndsWith">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchFixedString">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchCaseSensitive">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QOrganizerItemFilter::MatchFlag">
            <name>MatchFlags</name>
            <anchorfile>qorganizeritemfilter.html</anchorfile>
            <anchor>MatchFlags-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qorganizeritemfilter.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QOrganizerItemFilter &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qorganizeritemfilter.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QOrganizerItemFilter &amp; other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkCategoryId</name>
        <filename>qlandmarkcategoryid.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkCategoryId</name>
            <anchorfile>qlandmarkcategoryid.html</anchorfile>
            <anchor>QLandmarkCategoryId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkCategoryId</name>
            <anchorfile>qlandmarkcategoryid.html</anchorfile>
            <anchor>QLandmarkCategoryId-2</anchor>
            <arglist>(const QLandmarkCategoryId &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLandmarkCategoryId</name>
            <anchorfile>qlandmarkcategoryid.html</anchorfile>
            <anchor>dtor.QLandmarkCategoryId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qlandmarkcategoryid.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>localId</name>
            <anchorfile>qlandmarkcategoryid.html</anchorfile>
            <anchor>localId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalId</name>
            <anchorfile>qlandmarkcategoryid.html</anchorfile>
            <anchor>setLocalId</anchor>
            <arglist>(const QString &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerUri</name>
            <anchorfile>qlandmarkcategoryid.html</anchorfile>
            <anchor>managerUri</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setManagerUri</name>
            <anchorfile>qlandmarkcategoryid.html</anchorfile>
            <anchor>setManagerUri</anchor>
            <arglist>(const QString &amp; uri)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkCategoryId &amp;</type>
            <name>operator=</name>
            <anchorfile>qlandmarkcategoryid.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QLandmarkCategoryId &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlandmarkcategoryid.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QLandmarkCategoryId &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlandmarkcategoryid.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QLandmarkCategoryId &amp; other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaServiceSupportedFormatsInterface</name>
        <filename>qmediaservicesupportedformatsinterface.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMediaServiceSupportedFormatsInterface</name>
            <anchorfile>qmediaservicesupportedformatsinterface.html</anchorfile>
            <anchor>dtor.QMediaServiceSupportedFormatsInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QtMultimediaKit::SupportEstimate</type>
            <name>hasSupport</name>
            <anchorfile>qmediaservicesupportedformatsinterface.html</anchorfile>
            <anchor>hasSupport</anchor>
            <arglist>(const QString &amp; mimeType, const QStringList &amp; codecs) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QStringList</type>
            <name>supportedMimeTypes</name>
            <anchorfile>qmediaservicesupportedformatsinterface.html</anchorfile>
            <anchor>supportedMimeTypes</anchor>
            <arglist>() const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaServiceSupportedDevicesInterface</name>
        <filename>qmediaservicesupporteddevicesinterface.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMediaServiceSupportedDevicesInterface</name>
            <anchorfile>qmediaservicesupporteddevicesinterface.html</anchorfile>
            <anchor>dtor.QMediaServiceSupportedDevicesInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;QByteArray&gt;</type>
            <name>devices</name>
            <anchorfile>qmediaservicesupporteddevicesinterface.html</anchorfile>
            <anchor>devices</anchor>
            <arglist>(const QByteArray &amp; service) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>deviceDescription</name>
            <anchorfile>qmediaservicesupporteddevicesinterface.html</anchorfile>
            <anchor>deviceDescription</anchor>
            <arglist>(const QByteArray &amp; service, const QByteArray &amp; device) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaServiceFeaturesInterface</name>
        <filename>qmediaservicefeaturesinterface.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMediaServiceFeaturesInterface</name>
            <anchorfile>qmediaservicefeaturesinterface.html</anchorfile>
            <anchor>dtor.QMediaServiceFeaturesInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QMediaServiceProviderHint::Features</type>
            <name>supportedFeatures</name>
            <anchorfile>qmediaservicefeaturesinterface.html</anchorfile>
            <anchor>supportedFeatures</anchor>
            <arglist>(const QByteArray &amp; service) const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaServiceProviderPlugin</name>
        <filename>qmediaserviceproviderplugin.html</filename>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QStringList</type>
            <name>keys</name>
            <anchorfile>qmediaserviceproviderplugin.html</anchorfile>
            <anchor>keys</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QMediaService *</type>
            <name>create</name>
            <anchorfile>qmediaserviceproviderplugin.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(const QString &amp; key) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>release</name>
            <anchorfile>qmediaserviceproviderplugin.html</anchorfile>
            <anchor>release</anchor>
            <arglist>(QMediaService * service) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFeedbackActuator</name>
        <filename>qfeedbackactuator.html</filename>
        <member kind="enum">
            <name>Capability</name>
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Envelope">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Period">
            <anchor>Capability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Busy">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Ready">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unknown">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFeedbackActuator</name>
            <anchorfile>qfeedbackactuator.html</anchorfile>
            <anchor>QFeedbackActuator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>id</name>
            <anchorfile>qfeedbackactuator.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qfeedbackactuator.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qfeedbackactuator.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>State</type>
            <name>state</name>
            <anchorfile>qfeedbackactuator.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCapabilitySupported</name>
            <anchorfile>qfeedbackactuator.html</anchorfile>
            <anchor>isCapabilitySupported</anchor>
            <arglist>(Capability capability) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qfeedbackactuator.html</anchorfile>
            <anchor>isEnabled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qfeedbackactuator.html</anchorfile>
            <anchor>setEnabled</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QFeedbackActuator&gt;</type>
            <name>actuators</name>
            <anchorfile>qfeedbackactuator.html</anchorfile>
            <anchor>actuators</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactDetailDefinition</name>
        <filename>qcontactdetaildefinition.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactDetailDefinition</name>
            <anchorfile>qcontactdetaildefinition.html</anchorfile>
            <anchor>QContactDetailDefinition</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactDetailDefinition</name>
            <anchorfile>qcontactdetaildefinition.html</anchorfile>
            <anchor>dtor.QContactDetailDefinition</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactDetailDefinition</name>
            <anchorfile>qcontactdetaildefinition.html</anchorfile>
            <anchor>QContactDetailDefinition-2</anchor>
            <arglist>(const QContactDetailDefinition &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactDetailDefinition &amp;</type>
            <name>operator=</name>
            <anchorfile>qcontactdetaildefinition.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QContactDetailDefinition &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcontactdetaildefinition.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QContactDetailDefinition &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcontactdetaildefinition.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QContactDetailDefinition &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qcontactdetaildefinition.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qcontactdetaildefinition.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QString &amp; definitionName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qcontactdetaildefinition.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUnique</name>
            <anchorfile>qcontactdetaildefinition.html</anchorfile>
            <anchor>setUnique</anchor>
            <arglist>(bool unique)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUnique</name>
            <anchorfile>qcontactdetaildefinition.html</anchorfile>
            <anchor>isUnique</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFields</name>
            <anchorfile>qcontactdetaildefinition.html</anchorfile>
            <anchor>setFields</anchor>
            <arglist>(const QMap&lt;QString, QContactDetailFieldDefinition&gt; &amp; fields)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;QString, QContactDetailFieldDefinition&gt;</type>
            <name>fields</name>
            <anchorfile>qcontactdetaildefinition.html</anchorfile>
            <anchor>fields</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertField</name>
            <anchorfile>qcontactdetaildefinition.html</anchorfile>
            <anchor>insertField</anchor>
            <arglist>(const QString &amp; key, const QContactDetailFieldDefinition &amp; field)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeField</name>
            <anchorfile>qcontactdetaildefinition.html</anchorfile>
            <anchor>removeField</anchor>
            <arglist>(const QString &amp; key)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaObject</name>
        <filename>qmediaobject.html</filename>
        <member kind="property" type="int">
            <name>notifyInterval</name>
            <anchorfile>qmediaobject.html</anchorfile>
            <anchor>notifyInterval-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMediaObject</name>
            <anchorfile>qmediaobject.html</anchorfile>
            <anchor>dtor.QMediaObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isAvailable</name>
            <anchorfile>qmediaobject.html</anchorfile>
            <anchor>isAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QtMultimediaKit::AvailabilityError</type>
            <name>availabilityError</name>
            <anchorfile>qmediaobject.html</anchorfile>
            <anchor>availabilityError</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMediaService *</type>
            <name>service</name>
            <anchorfile>qmediaobject.html</anchorfile>
            <anchor>service</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>notifyInterval</name>
            <anchorfile>qmediaobject.html</anchorfile>
            <anchor>notifyInterval-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNotifyInterval</name>
            <anchorfile>qmediaobject.html</anchorfile>
            <anchor>notifyInterval-prop</anchor>
            <arglist>(int milliSeconds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>bind</name>
            <anchorfile>qmediaobject.html</anchorfile>
            <anchor>bind</anchor>
            <arglist>(QObject * object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>unbind</name>
            <anchorfile>qmediaobject.html</anchorfile>
            <anchor>unbind</anchor>
            <arglist>(QObject * object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMetaDataAvailable</name>
            <anchorfile>qmediaobject.html</anchorfile>
            <anchor>isMetaDataAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>metaData</name>
            <anchorfile>qmediaobject.html</anchorfile>
            <anchor>metaData</anchor>
            <arglist>(QtMultimediaKit::MetaData key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QtMultimediaKit::MetaData&gt;</type>
            <name>availableMetaData</name>
            <anchorfile>qmediaobject.html</anchorfile>
            <anchor>availableMetaData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>extendedMetaData</name>
            <anchorfile>qmediaobject.html</anchorfile>
            <anchor>extendedMetaData</anchor>
            <arglist>(const QString &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>availableExtendedMetaData</name>
            <anchorfile>qmediaobject.html</anchorfile>
            <anchor>availableExtendedMetaData</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>notifyIntervalChanged</name>
            <anchorfile>qmediaobject.html</anchorfile>
            <anchor>notifyIntervalChanged</anchor>
            <arglist>(int milliseconds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>metaDataAvailableChanged</name>
            <anchorfile>qmediaobject.html</anchorfile>
            <anchor>metaDataAvailableChanged</anchor>
            <arglist>(bool available)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>metaDataChanged</name>
            <anchorfile>qmediaobject.html</anchorfile>
            <anchor>metaDataChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>availabilityChanged</name>
            <anchorfile>qmediaobject.html</anchorfile>
            <anchor>availabilityChanged</anchor>
            <arglist>(bool available)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QMediaObject</name>
            <anchorfile>qmediaobject.html</anchorfile>
            <anchor>QMediaObject</anchor>
            <arglist>(QObject * parent, QMediaService * service)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>addPropertyWatch</name>
            <anchorfile>qmediaobject.html</anchorfile>
            <anchor>addPropertyWatch</anchor>
            <arglist>(QByteArray const &amp; name)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>removePropertyWatch</name>
            <anchorfile>qmediaobject.html</anchorfile>
            <anchor>removePropertyWatch</anchor>
            <arglist>(QByteArray const &amp; name)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractGallery</name>
        <filename>qabstractgallery.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractGallery</name>
            <anchorfile>qabstractgallery.html</anchorfile>
            <anchor>QAbstractGallery</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAbstractGallery</name>
            <anchorfile>qabstractgallery.html</anchorfile>
            <anchor>dtor.QAbstractGallery</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isRequestSupported</name>
            <anchorfile>qabstractgallery.html</anchorfile>
            <anchor>isRequestSupported</anchor>
            <arglist>(QGalleryAbstractRequest::Type type) const = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtual="pure" static="no">
            <type>virtual QGalleryAbstractResponse *</type>
            <name>createResponse</name>
            <anchorfile>qabstractgallery.html</anchorfile>
            <anchor>createResponse</anchor>
            <arglist>(QGalleryAbstractRequest * request) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageAddress</name>
        <filename>qmessageaddress.html</filename>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="System">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Phone">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Email">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InstantMessage">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageAddress</name>
            <anchorfile>qmessageaddress.html</anchorfile>
            <anchor>QMessageAddress</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageAddress</name>
            <anchorfile>qmessageaddress.html</anchorfile>
            <anchor>QMessageAddress-2</anchor>
            <arglist>(Type type, const QString &amp; addressee)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageAddress</name>
            <anchorfile>qmessageaddress.html</anchorfile>
            <anchor>QMessageAddress-3</anchor>
            <arglist>(const QMessageAddress &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMessageAddress</name>
            <anchorfile>qmessageaddress.html</anchorfile>
            <anchor>dtor.QMessageAddress</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type</type>
            <name>type</name>
            <anchorfile>qmessageaddress.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qmessageaddress.html</anchorfile>
            <anchor>setType</anchor>
            <arglist>(Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>addressee</name>
            <anchorfile>qmessageaddress.html</anchorfile>
            <anchor>addressee</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddressee</name>
            <anchorfile>qmessageaddress.html</anchorfile>
            <anchor>setAddressee</anchor>
            <arglist>(const QString &amp; addressee)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>parseEmailAddress</name>
            <anchorfile>qmessageaddress.html</anchorfile>
            <anchor>parseEmailAddress</anchor>
            <arglist>(const QString &amp; emailAddress, QString * name, QString * address, QString * suffix, bool * startDelimeterFound, bool * endDelimeterFound)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoRouteRequest</name>
        <filename>qgeorouterequest.html</filename>
        <member kind="enum">
            <name>TravelMode</name>
            <anchor>TravelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CarTravel">
            <anchor>TravelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PedestrianTravel">
            <anchor>TravelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BicycleTravel">
            <anchor>TravelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PublicTransitTravel">
            <anchor>TravelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TruckTravel">
            <anchor>TravelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGeoRouteRequest::TravelMode">
            <name>TravelModes</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>TravelModes-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>AvoidFeatureType</name>
            <anchor>AvoidFeatureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AvoidNothing">
            <anchor>AvoidFeatureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AvoidTolls">
            <anchor>AvoidFeatureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AvoidHighways">
            <anchor>AvoidFeatureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AvoidPublicTransit">
            <anchor>AvoidFeatureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AvoidFerries">
            <anchor>AvoidFeatureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AvoidTunnels">
            <anchor>AvoidFeatureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AvoidDirtRoads">
            <anchor>AvoidFeatureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AvoidPark">
            <anchor>AvoidFeatureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AvoidMotorPoolLanes">
            <anchor>AvoidFeatureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGeoRouteRequest::AvoidFeatureType">
            <name>AvoidFeatureTypes</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>AvoidFeatureTypes-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>RouteOptimization</name>
            <anchor>RouteOptimization-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShortestRoute">
            <anchor>RouteOptimization-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FastestRoute">
            <anchor>RouteOptimization-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MostEconomicRoute">
            <anchor>RouteOptimization-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MostScenicRoute">
            <anchor>RouteOptimization-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGeoRouteRequest::RouteOptimization">
            <name>RouteOptimizations</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>RouteOptimizations-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>SegmentDetail</name>
            <anchor>SegmentDetail-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoSegmentData">
            <anchor>SegmentDetail-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BasicSegmentData">
            <anchor>SegmentDetail-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGeoRouteRequest::SegmentDetail">
            <name>SegmentDetails</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>SegmentDetails-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>InstructionDetail</name>
            <anchor>InstructionDetail-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoInstructions">
            <anchor>InstructionDetail-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BasicInstructions">
            <anchor>InstructionDetail-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGeoRouteRequest::InstructionDetail">
            <name>InstructionDetails</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>InstructionDetails-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRouteRequest</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>QGeoRouteRequest</anchor>
            <arglist>(const QList&lt;QGeoCoordinate&gt; &amp; waypoints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRouteRequest</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>QGeoRouteRequest-2</anchor>
            <arglist>(const QGeoCoordinate &amp; origin, const QGeoCoordinate &amp; destination)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRouteRequest</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>QGeoRouteRequest-3</anchor>
            <arglist>(const QGeoRouteRequest &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoRouteRequest</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>dtor.QGeoRouteRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QGeoRouteRequest &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWaypoints</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>setWaypoints</anchor>
            <arglist>(const QList&lt;QGeoCoordinate&gt; &amp; waypoints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGeoCoordinate&gt;</type>
            <name>waypoints</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>waypoints</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExcludeAreas</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>setExcludeAreas</anchor>
            <arglist>(const QList&lt;QGeoBoundingBox&gt; &amp; areas)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGeoBoundingBox&gt;</type>
            <name>excludeAreas</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>excludeAreas</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNumberAlternativeRoutes</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>setNumberAlternativeRoutes</anchor>
            <arglist>(int alternatives)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>numberAlternativeRoutes</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>numberAlternativeRoutes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTravelModes</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>setTravelModes</anchor>
            <arglist>(QFlags&lt;QGeoRouteRequest::TravelMode&gt; travelModes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>TravelModes</type>
            <name>travelModes</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>travelModes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAvoidFeatureTypes</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>setAvoidFeatureTypes</anchor>
            <arglist>(QFlags&lt;QGeoRouteRequest::AvoidFeatureType&gt; avoidFeatureTypes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>AvoidFeatureTypes</type>
            <name>avoidFeatureTypes</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>avoidFeatureTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRouteOptimization</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>setRouteOptimization</anchor>
            <arglist>(QFlags&lt;QGeoRouteRequest::RouteOptimization&gt; optimization)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RouteOptimizations</type>
            <name>routeOptimization</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>routeOptimization</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSegmentDetail</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>setSegmentDetail</anchor>
            <arglist>(SegmentDetail segmentDetail)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SegmentDetail</type>
            <name>segmentDetail</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>segmentDetail</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInstructionDetail</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>setInstructionDetail</anchor>
            <arglist>(InstructionDetail instructionDetail)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>InstructionDetail</type>
            <name>instructionDetail</name>
            <anchorfile>qgeorouterequest.html</anchorfile>
            <anchor>instructionDetail</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVersitProperty</name>
        <filename>qversitproperty.html</filename>
        <member kind="enum">
            <name>ValueType</name>
            <anchor>ValueType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PlainType">
            <anchor>ValueType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CompoundType">
            <anchor>ValueType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ListType">
            <anchor>ValueType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BinaryType">
            <anchor>ValueType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VersitDocumentType">
            <anchor>ValueType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersitProperty</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>QVersitProperty</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersitProperty</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>QVersitProperty-2</anchor>
            <arglist>(const QVersitProperty &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QVersitProperty</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>dtor.QVersitProperty</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVersitProperty &amp;</type>
            <name>operator=</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QVersitProperty &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QVersitProperty &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QVersitProperty &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGroups</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>setGroups</anchor>
            <arglist>(const QStringList &amp; groups)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>groups</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>groups</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertParameter</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>insertParameter</anchor>
            <arglist>(const QString &amp; name, const QString &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeParameter</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>removeParameter</anchor>
            <arglist>(const QString &amp; name, const QString &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeParameters</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>removeParameters</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setParameters</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>setParameters</anchor>
            <arglist>(const QMultiHash&lt;QString, QString&gt; &amp; parameters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;QString, QString&gt;</type>
            <name>parameters</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>parameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const QVariant &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>variantValue</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>variantValue</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>value-2</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>value</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValueType</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>setValueType</anchor>
            <arglist>(ValueType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ValueType</type>
            <name>valueType</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>valueType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qversitproperty.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTelephonyCallList</name>
        <filename>qtelephonycalllist.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTelephonyCallList</name>
            <anchorfile>qtelephonycalllist.html</anchorfile>
            <anchor>QTelephonyCallList</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTelephonyCallList</name>
            <anchorfile>qtelephonycalllist.html</anchorfile>
            <anchor>dtor.QTelephonyCallList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeCallStatusChanged</name>
            <anchorfile>qtelephonycalllist.html</anchorfile>
            <anchor>activeCallStatusChanged</anchor>
            <arglist>(const QTelephonyCallInfo &amp; call)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeCallRemoved</name>
            <anchorfile>qtelephonycalllist.html</anchorfile>
            <anchor>activeCallRemoved</anchor>
            <arglist>(const QTelephonyCallInfo &amp; call)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeCallAdded</name>
            <anchorfile>qtelephonycalllist.html</anchorfile>
            <anchor>activeCallAdded</anchor>
            <arglist>(const QTelephonyCallInfo &amp; call)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QTelephonyCallInfo&gt;</type>
            <name>activeCalls</name>
            <anchorfile>qtelephonycalllist.html</anchorfile>
            <anchor>activeCalls</anchor>
            <arglist>(const QTelephonyCallInfo::CallType &amp; calltype) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSystemDisplayInfo</name>
        <filename>qsystemdisplayinfo.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSystemDisplayInfo</name>
            <anchorfile>qsystemdisplayinfo.html</anchorfile>
            <anchor>QSystemDisplayInfo</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSystemDisplayInfo</name>
            <anchorfile>qsystemdisplayinfo.html</anchorfile>
            <anchor>dtor.QSystemDisplayInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>DisplayOrientation</name>
            <anchor>DisplayOrientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unknown">
            <anchor>DisplayOrientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Landscape">
            <anchor>DisplayOrientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Portrait">
            <anchor>DisplayOrientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvertedLandscape">
            <anchor>DisplayOrientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvertedPortrait">
            <anchor>DisplayOrientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>displayBrightness</name>
            <anchorfile>qsystemdisplayinfo.html</anchorfile>
            <anchor>displayBrightness</anchor>
            <arglist>(int screenNumber)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>colorDepth</name>
            <anchorfile>qsystemdisplayinfo.html</anchorfile>
            <anchor>colorDepth</anchor>
            <arglist>(int screenNumber)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSystemDisplayInfo::DisplayOrientation</type>
            <name>getOrientation</name>
            <anchorfile>qsystemdisplayinfo.html</anchorfile>
            <anchor>getOrientation</anchor>
            <arglist>(int screen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>contrast</name>
            <anchorfile>qsystemdisplayinfo.html</anchorfile>
            <anchor>contrast</anchor>
            <arglist>(int screen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>getDPIWidth</name>
            <anchorfile>qsystemdisplayinfo.html</anchorfile>
            <anchor>getDPIWidth</anchor>
            <arglist>(int screen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>getDPIHeight</name>
            <anchorfile>qsystemdisplayinfo.html</anchorfile>
            <anchor>getDPIHeight</anchor>
            <arglist>(int screen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>physicalHeight</name>
            <anchorfile>qsystemdisplayinfo.html</anchorfile>
            <anchor>physicalHeight</anchor>
            <arglist>(int screen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>physicalWidth</name>
            <anchorfile>qsystemdisplayinfo.html</anchorfile>
            <anchor>physicalWidth</anchor>
            <arglist>(int screen)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactSaveRequest</name>
        <filename>qcontactsaverequest.html</filename>
        <base>QContactAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactSaveRequest</name>
            <anchorfile>qcontactsaverequest.html</anchorfile>
            <anchor>QContactSaveRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactSaveRequest</name>
            <anchorfile>qcontactsaverequest.html</anchorfile>
            <anchor>dtor.QContactSaveRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContact</name>
            <anchorfile>qcontactsaverequest.html</anchorfile>
            <anchor>setContact</anchor>
            <arglist>(const QContact &amp; contact)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContacts</name>
            <anchorfile>qcontactsaverequest.html</anchorfile>
            <anchor>setContacts</anchor>
            <arglist>(const QList&lt;QContact&gt; &amp; contacts)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContact&gt;</type>
            <name>contacts</name>
            <anchorfile>qcontactsaverequest.html</anchorfile>
            <anchor>contacts</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;int, QContactManager::Error&gt;</type>
            <name>errorMap</name>
            <anchorfile>qcontactsaverequest.html</anchorfile>
            <anchor>errorMap</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemId</name>
        <filename>qorganizeritemid.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemId</name>
            <anchorfile>qorganizeritemid.html</anchorfile>
            <anchor>QOrganizerItemId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOrganizerItemId</name>
            <anchorfile>qorganizeritemid.html</anchorfile>
            <anchor>dtor.QOrganizerItemId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemId</name>
            <anchorfile>qorganizeritemid.html</anchorfile>
            <anchor>QOrganizerItemId-2</anchor>
            <arglist>(const QOrganizerItemId &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemId &amp;</type>
            <name>operator=</name>
            <anchorfile>qorganizeritemid.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QOrganizerItemId &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qorganizeritemid.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QOrganizerItemId &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qorganizeritemid.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QOrganizerItemId &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qorganizeritemid.html</anchorfile>
            <anchor>operator&lt;</anchor>
            <arglist>(const QOrganizerItemId &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerUri</name>
            <anchorfile>qorganizeritemid.html</anchorfile>
            <anchor>managerUri</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemLocalId</type>
            <name>localId</name>
            <anchorfile>qorganizeritemid.html</anchorfile>
            <anchor>localId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setManagerUri</name>
            <anchorfile>qorganizeritemid.html</anchorfile>
            <anchor>setManagerUri</anchor>
            <arglist>(const QString &amp; uri)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalId</name>
            <anchorfile>qorganizeritemid.html</anchorfile>
            <anchor>setLocalId</anchor>
            <arglist>(const QOrganizerItemLocalId &amp; id)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkManager</name>
        <filename>qlandmarkmanager.html</filename>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DoesNotExistError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AlreadyExistsError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LockedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PermissionsError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OutOfMemoryError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VersionMismatchError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotSupportedError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BadArgumentError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidManagerError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FilterSupportLevel</name>
            <anchor>FilterSupportLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Native">
            <anchor>FilterSupportLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Emulated">
            <anchor>FilterSupportLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="None">
            <anchor>FilterSupportLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>LandmarkFeature</name>
            <anchor>LandmarkFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GenericAttributes">
            <anchor>LandmarkFeature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkManager</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>QLandmarkManager</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkManager</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>QLandmarkManager-2</anchor>
            <arglist>(const QString &amp; managerName, const QMap&lt;QString, QString&gt; &amp; parameters, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkManager</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>QLandmarkManager-3</anchor>
            <arglist>(const QString &amp; managerName, int implementationVersion, const QMap&lt;QString, QString&gt; &amp; parameters, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QLandmarkManager</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>dtor.QLandmarkManager</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>saveLandmark</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>saveLandmark</anchor>
            <arglist>(QLandmark * landmark)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>saveLandmarks</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>saveLandmarks</anchor>
            <arglist>(QList&lt;QLandmark&gt; * landmarks, QMap&lt;int, QLandmarkManager::Error&gt; * errorMap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeLandmark</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>removeLandmark</anchor>
            <arglist>(const QLandmarkId &amp; landmarkId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeLandmarks</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>removeLandmarks</anchor>
            <arglist>(const QList&lt;QLandmarkId&gt; &amp; landmarkIds, QMap&lt;int, QLandmarkManager::Error&gt; * errorMap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>saveCategory</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>saveCategory</anchor>
            <arglist>(QLandmarkCategory * category)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeCategory</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>removeCategory</anchor>
            <arglist>(const QLandmarkCategoryId &amp; categoryId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkCategory</type>
            <name>category</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>category</anchor>
            <arglist>(const QLandmarkCategoryId &amp; categoryId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkCategory&gt;</type>
            <name>categories</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>categories</anchor>
            <arglist>(const QList&lt;QLandmarkCategoryId&gt; &amp; categoryIds) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkCategory&gt;</type>
            <name>categories</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>categories-2</anchor>
            <arglist>(const QLandmarkNameSort &amp; nameSort) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkCategoryId&gt;</type>
            <name>categoryIds</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>categoryIds</anchor>
            <arglist>(const QLandmarkNameSort &amp; nameSort) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmark</type>
            <name>landmark</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>landmark</anchor>
            <arglist>(const QLandmarkId &amp; landmarkId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmark&gt;</type>
            <name>landmarks</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>landmarks</anchor>
            <arglist>(const QLandmarkFilter &amp; filter, const QList&lt;QLandmarkSortOrder&gt; &amp; sortOrders, const QLandmarkFetchHint &amp; fetchHint) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmark&gt;</type>
            <name>landmarks</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>landmarks-2</anchor>
            <arglist>(const QLandmarkFilter &amp; filter, const QLandmarkSortOrder &amp; sortOrder, const QLandmarkFetchHint &amp; fetchHint) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmark&gt;</type>
            <name>landmarks</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>landmarks-3</anchor>
            <arglist>(const QList&lt;QLandmarkId&gt; &amp; landmarkIds) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkId&gt;</type>
            <name>landmarkIds</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>landmarkIds</anchor>
            <arglist>(const QLandmarkFilter &amp; filter, const QList&lt;QLandmarkSortOrder&gt; &amp; sortOrders, const QLandmarkFetchHint &amp; fetchHint) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkId&gt;</type>
            <name>landmarkIds</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>landmarkIds-2</anchor>
            <arglist>(const QLandmarkFilter &amp; filter, const QLandmarkSortOrder &amp; sortOrder, const QLandmarkFetchHint &amp; fetchHint) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>importLandmarks</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>importLandmarks</anchor>
            <arglist>(QIODevice * device, const QByteArray &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>importLandmarks</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>importLandmarks-2</anchor>
            <arglist>(const QString &amp; fileName, const QByteArray &amp; format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exportLandmarks</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>exportLandmarks</anchor>
            <arglist>(QIODevice * device, const QByteArray &amp; format, QList&lt;QLandmarkId&gt; landmarkIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exportLandmarks</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>exportLandmarks-2</anchor>
            <arglist>(const QString &amp; fileName, const QByteArray &amp; format, QList&lt;QLandmarkId&gt; landmarkIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FilterSupportLevel</type>
            <name>filterSupportLevel</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>filterSupportLevel</anchor>
            <arglist>(const QLandmarkFilter &amp; filter) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFeatureSupported</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>isFeatureSupported</anchor>
            <arglist>(LandmarkFeature feature) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadOnly</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>isReadOnly</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadOnly</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>isReadOnly-2</anchor>
            <arglist>(const QLandmarkId &amp; landmarkId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadOnly</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>isReadOnly-3</anchor>
            <arglist>(const QLandmarkCategoryId &amp; categoryId) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerName</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;QString, QString&gt;</type>
            <name>managerParameters</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>managerParameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerUri</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>managerUri</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>managerVersion</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>managerVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>availableManagers</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>availableManagers</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>buildUri</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>buildUri</anchor>
            <arglist>(const QString &amp; managerName, const QMap&lt;QString, QString&gt; &amp; params, int implementationVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QLandmarkManager *</type>
            <name>fromUri</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>fromUri</anchor>
            <arglist>(const QString &amp; storeUri, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>parseUri</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>parseUri</anchor>
            <arglist>(const QString &amp; uri, QString * pManagerId, QMap&lt;QString, QString&gt; * pParams)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>landmarksAdded</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>landmarksAdded</anchor>
            <arglist>(const QList&lt;QLandmarkId&gt; &amp; landmarkIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>landmarksChanged</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>landmarksChanged</anchor>
            <arglist>(const QList&lt;QLandmarkId&gt; &amp; landmarkIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>landmarksRemoved</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>landmarksRemoved</anchor>
            <arglist>(const QList&lt;QLandmarkId&gt; &amp; landmarkIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>categoriesAdded</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>categoriesAdded</anchor>
            <arglist>(const QList&lt;QLandmarkCategoryId&gt; &amp; categoryIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>categoriesChanged</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>categoriesChanged</anchor>
            <arglist>(const QList&lt;QLandmarkCategoryId&gt; &amp; categoryIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>categoriesRemoved</name>
            <anchorfile>qlandmarkmanager.html</anchorfile>
            <anchor>categoriesRemoved</anchor>
            <arglist>(const QList&lt;QLandmarkCategoryId&gt; &amp; categoryIds)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoMapObject</name>
        <filename>qgeomapobject.html</filename>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContainerType">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RectangleType">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CircleType">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PolylineType">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PolygonType">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MarkerType">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoMapObject</name>
            <anchorfile>qgeomapobject.html</anchorfile>
            <anchor>QGeoMapObject</anchor>
            <arglist>(QGeoMapObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeoMapObject</name>
            <anchorfile>qgeomapobject.html</anchorfile>
            <anchor>dtor.QGeoMapObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type</type>
            <name>type</name>
            <anchorfile>qgeomapobject.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZValue</name>
            <anchorfile>qgeomapobject.html</anchorfile>
            <anchor>setZValue</anchor>
            <arglist>(int zValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>zValue</name>
            <anchorfile>qgeomapobject.html</anchorfile>
            <anchor>zValue</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVisible</name>
            <anchorfile>qgeomapobject.html</anchorfile>
            <anchor>setVisible</anchor>
            <arglist>(bool visible)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isVisible</name>
            <anchorfile>qgeomapobject.html</anchorfile>
            <anchor>isVisible</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QGeoBoundingBox</type>
            <name>boundingBox</name>
            <anchorfile>qgeomapobject.html</anchorfile>
            <anchor>boundingBox</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>contains</name>
            <anchorfile>qgeomapobject.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QGeoCoordinate &amp; coordinate) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoMapObject *</type>
            <name>parentObject</name>
            <anchorfile>qgeomapobject.html</anchorfile>
            <anchor>parentObject</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addChildObject</name>
            <anchorfile>qgeomapobject.html</anchorfile>
            <anchor>addChildObject</anchor>
            <arglist>(QGeoMapObject * childObject)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeChildObject</name>
            <anchorfile>qgeomapobject.html</anchorfile>
            <anchor>removeChildObject</anchor>
            <arglist>(QGeoMapObject * childObject)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGeoMapObject *&gt;</type>
            <name>childObjects</name>
            <anchorfile>qgeomapobject.html</anchorfile>
            <anchor>childObjects</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoSearchReply</name>
        <filename>qgeosearchreply.html</filename>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EngineNotSetError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CommunicationError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ParseError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnsupportedOptionError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoSearchReply</name>
            <anchorfile>qgeosearchreply.html</anchorfile>
            <anchor>QGeoSearchReply</anchor>
            <arglist>(Error error, const QString &amp; errorString, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeoSearchReply</name>
            <anchorfile>qgeosearchreply.html</anchorfile>
            <anchor>dtor.QGeoSearchReply</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qgeosearchreply.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qgeosearchreply.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qgeosearchreply.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoBoundingBox</type>
            <name>bounds</name>
            <anchorfile>qgeosearchreply.html</anchorfile>
            <anchor>bounds</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGeoPlace&gt;</type>
            <name>places</name>
            <anchorfile>qgeosearchreply.html</anchorfile>
            <anchor>places</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>abort</name>
            <anchorfile>qgeosearchreply.html</anchorfile>
            <anchor>abort</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qgeosearchreply.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qgeosearchreply.html</anchorfile>
            <anchor>error-2</anchor>
            <arglist>(QGeoSearchReply::Error error, const QString &amp; errorString)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QGeoSearchReply</name>
            <anchorfile>qgeosearchreply.html</anchorfile>
            <anchor>QGeoSearchReply-2</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setError</name>
            <anchorfile>qgeosearchreply.html</anchorfile>
            <anchor>setError</anchor>
            <arglist>(Error error, const QString &amp; errorString)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setFinished</name>
            <anchorfile>qgeosearchreply.html</anchorfile>
            <anchor>setFinished</anchor>
            <arglist>(bool finished)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setBounds</name>
            <anchorfile>qgeosearchreply.html</anchorfile>
            <anchor>setBounds</anchor>
            <arglist>(const QGeoBoundingBox &amp; bounds)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>addPlace</name>
            <anchorfile>qgeosearchreply.html</anchorfile>
            <anchor>addPlace</anchor>
            <arglist>(const QGeoPlace &amp; place)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setPlaces</name>
            <anchorfile>qgeosearchreply.html</anchorfile>
            <anchor>setPlaces</anchor>
            <arglist>(const QList&lt;QGeoPlace&gt; &amp; places)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactRelationshipFilter</name>
        <filename>qcontactrelationshipfilter.html</filename>
        <base>QContactFilter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactRelationshipFilter</name>
            <anchorfile>qcontactrelationshipfilter.html</anchorfile>
            <anchor>QContactRelationshipFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactRelationshipFilter</name>
            <anchorfile>qcontactrelationshipfilter.html</anchorfile>
            <anchor>QContactRelationshipFilter-2</anchor>
            <arglist>(const QContactFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRelationshipType</name>
            <anchorfile>qcontactrelationshipfilter.html</anchorfile>
            <anchor>setRelationshipType</anchor>
            <arglist>(const QString &amp; relationshipType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRelatedContactId</name>
            <anchorfile>qcontactrelationshipfilter.html</anchorfile>
            <anchor>setRelatedContactId</anchor>
            <arglist>(const QContactId &amp; relatedContactId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRelatedContactRole</name>
            <anchorfile>qcontactrelationshipfilter.html</anchorfile>
            <anchor>setRelatedContactRole</anchor>
            <arglist>(QContactRelationship::Role relatedContactRole)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>relationshipType</name>
            <anchorfile>qcontactrelationshipfilter.html</anchorfile>
            <anchor>relationshipType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactId</type>
            <name>relatedContactId</name>
            <anchorfile>qcontactrelationshipfilter.html</anchorfile>
            <anchor>relatedContactId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactRelationship::Role</type>
            <name>relatedContactRole</name>
            <anchorfile>qcontactrelationshipfilter.html</anchorfile>
            <anchor>relatedContactRole</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkFetchRequest</name>
        <filename>qlandmarkfetchrequest.html</filename>
        <base>QLandmarkAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkFetchRequest</name>
            <anchorfile>qlandmarkfetchrequest.html</anchorfile>
            <anchor>QLandmarkFetchRequest</anchor>
            <arglist>(QLandmarkManager * manager, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLandmarkFetchRequest</name>
            <anchorfile>qlandmarkfetchrequest.html</anchorfile>
            <anchor>dtor.QLandmarkFetchRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkFilter</type>
            <name>filter</name>
            <anchorfile>qlandmarkfetchrequest.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilter</name>
            <anchorfile>qlandmarkfetchrequest.html</anchorfile>
            <anchor>setFilter</anchor>
            <arglist>(const QLandmarkFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLandmarkIds</name>
            <anchorfile>qlandmarkfetchrequest.html</anchorfile>
            <anchor>setLandmarkIds</anchor>
            <arglist>(const QList&lt;QLandmarkId&gt; &amp; ids)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkSortOrder&gt;</type>
            <name>sorting</name>
            <anchorfile>qlandmarkfetchrequest.html</anchorfile>
            <anchor>sorting</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSorting</name>
            <anchorfile>qlandmarkfetchrequest.html</anchorfile>
            <anchor>setSorting</anchor>
            <arglist>(const QList&lt;QLandmarkSortOrder&gt; &amp; sorting)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSorting</name>
            <anchorfile>qlandmarkfetchrequest.html</anchorfile>
            <anchor>setSorting-2</anchor>
            <arglist>(const QLandmarkSortOrder &amp; sorting)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkFetchHint</type>
            <name>fetchHint</name>
            <anchorfile>qlandmarkfetchrequest.html</anchorfile>
            <anchor>fetchHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFetchHint</name>
            <anchorfile>qlandmarkfetchrequest.html</anchorfile>
            <anchor>setFetchHint</anchor>
            <arglist>(const QLandmarkFetchHint &amp; fetchHint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmark&gt;</type>
            <name>landmarks</name>
            <anchorfile>qlandmarkfetchrequest.html</anchorfile>
            <anchor>landmarks</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactActionFilter</name>
        <filename>qcontactactionfilter.html</filename>
        <base>QContactFilter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactActionFilter</name>
            <anchorfile>qcontactactionfilter.html</anchorfile>
            <anchor>QContactActionFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactActionFilter</name>
            <anchorfile>qcontactactionfilter.html</anchorfile>
            <anchor>QContactActionFilter-2</anchor>
            <arglist>(const QContactFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setActionName</name>
            <anchorfile>qcontactactionfilter.html</anchorfile>
            <anchor>setActionName</anchor>
            <arglist>(const QString &amp; action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVendor</name>
            <anchorfile>qcontactactionfilter.html</anchorfile>
            <anchor>setVendor</anchor>
            <arglist>(const QString &amp; vendorName, int implementationVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>actionName</name>
            <anchorfile>qcontactactionfilter.html</anchorfile>
            <anchor>actionName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>vendorName</name>
            <anchorfile>qcontactactionfilter.html</anchorfile>
            <anchor>vendorName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>implementationVersion</name>
            <anchorfile>qcontactactionfilter.html</anchorfile>
            <anchor>implementationVersion</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoSearchManager</name>
        <filename>qgeosearchmanager.html</filename>
        <member kind="enum">
            <name>SearchType</name>
            <anchor>SearchType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SearchNone">
            <anchor>SearchType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SearchGeocode">
            <anchor>SearchType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SearchLandmarks">
            <anchor>SearchType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SearchAll">
            <anchor>SearchType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QGeoSearchManager::SearchType">
            <name>SearchTypes</name>
            <anchorfile>qgeosearchmanager.html</anchorfile>
            <anchor>SearchTypes-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoSearchManager</name>
            <anchorfile>qgeosearchmanager.html</anchorfile>
            <anchor>dtor.QGeoSearchManager</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerName</name>
            <anchorfile>qgeosearchmanager.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;QString, QString&gt;</type>
            <name>managerParameters</name>
            <anchorfile>qgeosearchmanager.html</anchorfile>
            <anchor>managerParameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>managerVersion</name>
            <anchorfile>qgeosearchmanager.html</anchorfile>
            <anchor>managerVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoSearchReply *</type>
            <name>geocode</name>
            <anchorfile>qgeosearchmanager.html</anchorfile>
            <anchor>geocode</anchor>
            <arglist>(const QGeoAddress &amp; address, const QGeoBoundingBox &amp; bounds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoSearchReply *</type>
            <name>geocode</name>
            <anchorfile>qgeosearchmanager.html</anchorfile>
            <anchor>geocode-2</anchor>
            <arglist>(const QGeoCoordinate &amp; coordinate, const QGeoBoundingBox &amp; bounds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoSearchReply *</type>
            <name>placeSearch</name>
            <anchorfile>qgeosearchmanager.html</anchorfile>
            <anchor>placeSearch</anchor>
            <arglist>(const QString &amp; searchString, QFlags&lt;QGeoSearchManager::SearchType&gt; searchTypes, const QGeoBoundingBox &amp; bounds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsGeocoding</name>
            <anchorfile>qgeosearchmanager.html</anchorfile>
            <anchor>supportsGeocoding</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>SearchTypes</type>
            <name>supportedSearchTypes</name>
            <anchorfile>qgeosearchmanager.html</anchorfile>
            <anchor>supportedSearchTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkManager *</type>
            <name>defaultLandmarkManager</name>
            <anchorfile>qgeosearchmanager.html</anchorfile>
            <anchor>defaultLandmarkManager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAdditionalLandmarkManagers</name>
            <anchorfile>qgeosearchmanager.html</anchorfile>
            <anchor>setAdditionalLandmarkManagers</anchor>
            <arglist>(const QList&lt;QLandmarkManager *&gt; &amp; landmarkManagers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkManager *&gt;</type>
            <name>additionalLandmarkManagers</name>
            <anchorfile>qgeosearchmanager.html</anchorfile>
            <anchor>additionalLandmarkManagers</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAdditionalLandmarkManager</name>
            <anchorfile>qgeosearchmanager.html</anchorfile>
            <anchor>addAdditionalLandmarkManager</anchor>
            <arglist>(QLandmarkManager * landmarkManager)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qgeosearchmanager.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>(QGeoSearchReply * reply)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qgeosearchmanager.html</anchorfile>
            <anchor>error</anchor>
            <arglist>(QGeoSearchReply * reply, QGeoSearchReply::Error error, QString errorString)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageAccountSortOrder</name>
        <filename>qmessageaccountsortorder.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageAccountSortOrder</name>
            <anchorfile>qmessageaccountsortorder.html</anchorfile>
            <anchor>QMessageAccountSortOrder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageAccountSortOrder</name>
            <anchorfile>qmessageaccountsortorder.html</anchorfile>
            <anchor>QMessageAccountSortOrder-2</anchor>
            <arglist>(const QMessageAccountSortOrder &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMessageAccountSortOrder</name>
            <anchorfile>qmessageaccountsortorder.html</anchorfile>
            <anchor>dtor.QMessageAccountSortOrder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qmessageaccountsortorder.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSupported</name>
            <anchorfile>qmessageaccountsortorder.html</anchorfile>
            <anchor>isSupported</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageAccountSortOrder</type>
            <name>byName</name>
            <anchorfile>qmessageaccountsortorder.html</anchorfile>
            <anchor>byName</anchor>
            <arglist>(Qt::SortOrder order)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactActionFactory</name>
        <filename>qcontactactionfactory.html</filename>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual </type>
            <name>~QContactActionFactory</name>
            <anchorfile>qcontactactionfactory.html</anchorfile>
            <anchor>dtor.QContactActionFactory</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>name</name>
            <anchorfile>qcontactactionfactory.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;QContactActionDescriptor&gt;</type>
            <name>actionDescriptors</name>
            <anchorfile>qcontactactionfactory.html</anchorfile>
            <anchor>actionDescriptors</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QContactAction *</type>
            <name>instance</name>
            <anchorfile>qcontactactionfactory.html</anchorfile>
            <anchor>instance</anchor>
            <arglist>(const QContactActionDescriptor &amp; descriptor) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVariantMap</type>
            <name>actionMetadata</name>
            <anchorfile>qcontactactionfactory.html</anchorfile>
            <anchor>actionMetadata</anchor>
            <arglist>(const QContactActionDescriptor &amp; descriptor) const = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactRelationshipSaveRequest</name>
        <filename>qcontactrelationshipsaverequest.html</filename>
        <base>QContactAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactRelationshipSaveRequest</name>
            <anchorfile>qcontactrelationshipsaverequest.html</anchorfile>
            <anchor>QContactRelationshipSaveRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactRelationshipSaveRequest</name>
            <anchorfile>qcontactrelationshipsaverequest.html</anchorfile>
            <anchor>dtor.QContactRelationshipSaveRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRelationship</name>
            <anchorfile>qcontactrelationshipsaverequest.html</anchorfile>
            <anchor>setRelationship</anchor>
            <arglist>(const QContactRelationship &amp; contactRelationship)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRelationships</name>
            <anchorfile>qcontactrelationshipsaverequest.html</anchorfile>
            <anchor>setRelationships</anchor>
            <arglist>(const QList&lt;QContactRelationship&gt; &amp; contactRelationships)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactRelationship&gt;</type>
            <name>relationships</name>
            <anchorfile>qcontactrelationshipsaverequest.html</anchorfile>
            <anchor>relationships</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;int, QContactManager::Error&gt;</type>
            <name>errorMap</name>
            <anchorfile>qcontactrelationshipsaverequest.html</anchorfile>
            <anchor>errorMap</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVideoWindowControl</name>
        <filename>qvideowindowcontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QVideoWindowControl</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>dtor.QVideoWindowControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual WId</type>
            <name>winId</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>winId</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setWinId</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>setWinId</anchor>
            <arglist>(WId id) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QRect</type>
            <name>displayRect</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>displayRect</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setDisplayRect</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>setDisplayRect</anchor>
            <arglist>(const QRect &amp; rect) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isFullScreen</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>isFullScreen</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setFullScreen</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>setFullScreen</anchor>
            <arglist>(bool fullScreen) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>repaint</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>repaint</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QSize</type>
            <name>nativeSize</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>nativeSize</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual Qt::AspectRatioMode</type>
            <name>aspectRatioMode</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>aspectRatioMode</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setAspectRatioMode</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>setAspectRatioMode</anchor>
            <arglist>(Qt::AspectRatioMode mode) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>brightness</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>brightness</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setBrightness</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>setBrightness</anchor>
            <arglist>(int brightness) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>contrast</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>contrast</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setContrast</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>setContrast</anchor>
            <arglist>(int contrast) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>hue</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>hue</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setHue</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>setHue</anchor>
            <arglist>(int hue) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>saturation</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>saturation</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setSaturation</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>setSaturation</anchor>
            <arglist>(int saturation) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fullScreenChanged</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>fullScreenChanged</anchor>
            <arglist>(bool fullScreen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>brightnessChanged</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>brightnessChanged</anchor>
            <arglist>(int brightness)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>contrastChanged</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>contrastChanged</anchor>
            <arglist>(int contrast)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>hueChanged</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>hueChanged</anchor>
            <arglist>(int hue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>saturationChanged</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>saturationChanged</anchor>
            <arglist>(int saturation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>nativeSizeChanged</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>nativeSizeChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QVideoWindowControl</name>
            <anchorfile>qvideowindowcontrol.html</anchorfile>
            <anchor>QVideoWindowControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemManagerEngine</name>
        <filename>qorganizeritemmanagerengine.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemManagerEngine</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>QOrganizerItemManagerEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>managerName</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMap&lt;QString, QString&gt;</type>
            <name>managerParameters</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>managerParameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>managerVersion</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>managerVersion</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerUri</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>managerUri</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QOrganizerItem&gt;</type>
            <name>itemInstances</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>itemInstances</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter, const QList&lt;QOrganizerItemSortOrder&gt; &amp; sortOrders, const QOrganizerItemFetchHint &amp; fetchHint, QOrganizerItemManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QOrganizerItem&gt;</type>
            <name>itemInstances</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>itemInstances-2</anchor>
            <arglist>(const QOrganizerItem &amp; generator, const QDateTime &amp; periodStart, const QDateTime &amp; periodEnd, int maxCount, QOrganizerItemManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QOrganizerItemLocalId&gt;</type>
            <name>itemIds</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>itemIds</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter, const QList&lt;QOrganizerItemSortOrder&gt; &amp; sortOrders, QOrganizerItemManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QOrganizerItem&gt;</type>
            <name>items</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>items</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter, const QList&lt;QOrganizerItemSortOrder&gt; &amp; sortOrders, const QOrganizerItemFetchHint &amp; fetchHint, QOrganizerItemManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QOrganizerItem</type>
            <name>item</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>item</anchor>
            <arglist>(const QOrganizerItemLocalId &amp; organizeritemId, const QOrganizerItemFetchHint &amp; fetchHint, QOrganizerItemManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>saveItem</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>saveItem</anchor>
            <arglist>(QOrganizerItem * organizeritem, QOrganizerItemManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeItem</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>removeItem</anchor>
            <arglist>(const QOrganizerItemLocalId &amp; organizeritemId, QOrganizerItemManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>saveItems</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>saveItems</anchor>
            <arglist>(QList&lt;QOrganizerItem&gt; * organizeritems, QMap&lt;int, QOrganizerItemManager::Error&gt; * errorMap, QOrganizerItemManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeItems</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>removeItems</anchor>
            <arglist>(const QList&lt;QOrganizerItemLocalId&gt; &amp; organizeritemIds, QMap&lt;int, QOrganizerItemManager::Error&gt; * errorMap, QOrganizerItemManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QOrganizerItem</type>
            <name>compatibleItem</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>compatibleItem</anchor>
            <arglist>(const QOrganizerItem &amp; original, QOrganizerItemManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>validateItem</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>validateItem</anchor>
            <arglist>(const QOrganizerItem &amp; organizeritem, QOrganizerItemManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>validateDefinition</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>validateDefinition</anchor>
            <arglist>(const QOrganizerItemDetailDefinition &amp; definition, QOrganizerItemManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMap&lt;QString, QOrganizerItemDetailDefinition&gt;</type>
            <name>detailDefinitions</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>detailDefinitions</anchor>
            <arglist>(const QString &amp; organizeritemType, QOrganizerItemManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QOrganizerItemDetailDefinition</type>
            <name>detailDefinition</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>detailDefinition</anchor>
            <arglist>(const QString &amp; definitionName, const QString &amp; organizeritemType, QOrganizerItemManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>saveDetailDefinition</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>saveDetailDefinition</anchor>
            <arglist>(const QOrganizerItemDetailDefinition &amp; def, const QString &amp; organizeritemType, QOrganizerItemManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeDetailDefinition</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>removeDetailDefinition</anchor>
            <arglist>(const QString &amp; definitionName, const QString &amp; organizeritemType, QOrganizerItemManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>requestDestroyed</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>requestDestroyed</anchor>
            <arglist>(QOrganizerItemAbstractRequest * req)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>startRequest</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>startRequest</anchor>
            <arglist>(QOrganizerItemAbstractRequest * req)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>cancelRequest</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>cancelRequest</anchor>
            <arglist>(QOrganizerItemAbstractRequest * req)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForRequestFinished</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>waitForRequestFinished</anchor>
            <arglist>(QOrganizerItemAbstractRequest * req, int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasFeature</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>hasFeature</anchor>
            <arglist>(QOrganizerItemManager::ManagerFeature feature, const QString &amp; organizeritemType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isFilterSupported</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>isFilterSupported</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QVariant::Type&gt;</type>
            <name>supportedDataTypes</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>supportedDataTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>supportedItemTypes</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>supportedItemTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMap&lt;QString, QMap&lt;QString, QOrganizerItemDetailDefinition&gt; &gt;</type>
            <name>schemaDefinitions</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>schemaDefinitions</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataChanged</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>dataChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemsAdded</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>itemsAdded</anchor>
            <arglist>(const QList&lt;QOrganizerItemLocalId&gt; &amp; organizeritemIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemsChanged</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>itemsChanged</anchor>
            <arglist>(const QList&lt;QOrganizerItemLocalId&gt; &amp; organizeritemIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemsRemoved</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>itemsRemoved</anchor>
            <arglist>(const QList&lt;QOrganizerItemLocalId&gt; &amp; organizeritemIds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateRequestState</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>updateRequestState</anchor>
            <arglist>(QOrganizerItemAbstractRequest * req, QOrganizerItemAbstractRequest::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateItemInstanceFetchRequest</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>updateItemInstanceFetchRequest</anchor>
            <arglist>(QOrganizerItemInstanceFetchRequest * req, const QList&lt;QOrganizerItem&gt; &amp; result, QOrganizerItemManager::Error error, QOrganizerItemAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateItemLocalIdFetchRequest</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>updateItemLocalIdFetchRequest</anchor>
            <arglist>(QOrganizerItemLocalIdFetchRequest * req, const QList&lt;QOrganizerItemLocalId&gt; &amp; result, QOrganizerItemManager::Error error, QOrganizerItemAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateItemFetchRequest</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>updateItemFetchRequest</anchor>
            <arglist>(QOrganizerItemFetchRequest * req, const QList&lt;QOrganizerItem&gt; &amp; result, QOrganizerItemManager::Error error, QOrganizerItemAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateItemRemoveRequest</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>updateItemRemoveRequest</anchor>
            <arglist>(QOrganizerItemRemoveRequest * req, QOrganizerItemManager::Error error, const QMap&lt;int, QOrganizerItemManager::Error&gt; &amp; errorMap, QOrganizerItemAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateItemSaveRequest</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>updateItemSaveRequest</anchor>
            <arglist>(QOrganizerItemSaveRequest * req, const QList&lt;QOrganizerItem&gt; &amp; result, QOrganizerItemManager::Error error, const QMap&lt;int, QOrganizerItemManager::Error&gt; &amp; errorMap, QOrganizerItemAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateDefinitionSaveRequest</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>updateDefinitionSaveRequest</anchor>
            <arglist>(QOrganizerItemDetailDefinitionSaveRequest * req, const QList&lt;QOrganizerItemDetailDefinition&gt; &amp; result, QOrganizerItemManager::Error error, const QMap&lt;int, QOrganizerItemManager::Error&gt; &amp; errorMap, QOrganizerItemAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateDefinitionRemoveRequest</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>updateDefinitionRemoveRequest</anchor>
            <arglist>(QOrganizerItemDetailDefinitionRemoveRequest * req, QOrganizerItemManager::Error error, const QMap&lt;int, QOrganizerItemManager::Error&gt; &amp; errorMap, QOrganizerItemAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>updateDefinitionFetchRequest</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>updateDefinitionFetchRequest</anchor>
            <arglist>(QOrganizerItemDetailDefinitionFetchRequest * req, const QMap&lt;QString, QOrganizerItemDetailDefinition&gt; &amp; result, QOrganizerItemManager::Error error, const QMap&lt;int, QOrganizerItemManager::Error&gt; &amp; errorMap, QOrganizerItemAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDetailAccessConstraints</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>setDetailAccessConstraints</anchor>
            <arglist>(QOrganizerItemDetail * detail, QFlags&lt;QOrganizerItemDetail::AccessConstraint&gt; constraints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>compareItem</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>compareItem</anchor>
            <arglist>(const QOrganizerItem &amp; a, const QOrganizerItem &amp; b, const QList&lt;QOrganizerItemSortOrder&gt; &amp; sortOrders)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>addSorted</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>addSorted</anchor>
            <arglist>(QList&lt;QOrganizerItem&gt; * sorted, const QOrganizerItem &amp; toAdd, const QList&lt;QOrganizerItemSortOrder&gt; &amp; sortOrders)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>compareVariant</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>compareVariant</anchor>
            <arglist>(const QVariant &amp; first, const QVariant &amp; second, Qt::CaseSensitivity sensitivity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>testFilter</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>testFilter</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter, const QOrganizerItem &amp; organizeritem)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QOrganizerItemLocalId&gt;</type>
            <name>sortItems</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>sortItems</anchor>
            <arglist>(const QList&lt;QOrganizerItem&gt; &amp; cs, const QList&lt;QOrganizerItemSortOrder&gt; &amp; sortOrders)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QOrganizerItemFilter</type>
            <name>canonicalizedFilter</name>
            <anchorfile>qorganizeritemmanagerengine.html</anchorfile>
            <anchor>canonicalizedFilter</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAudioOutput</name>
        <filename>qaudiooutput.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAudioOutput</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>QAudioOutput</anchor>
            <arglist>(const QAudioFormat &amp; format, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAudioOutput</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>QAudioOutput-2</anchor>
            <arglist>(const QAudioDeviceInfo &amp; audioDevice, const QAudioFormat &amp; format, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAudioOutput</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>dtor.QAudioOutput</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAudioFormat</type>
            <name>format</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>start</anchor>
            <arglist>(QIODevice * device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>start</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>start-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>suspend</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>suspend</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resume</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>resume</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBufferSize</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>setBufferSize</anchor>
            <arglist>(int value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bufferSize</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>bufferSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bytesFree</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>bytesFree</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>periodSize</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>periodSize</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNotifyInterval</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>setNotifyInterval</anchor>
            <arglist>(int ms)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>notifyInterval</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>notifyInterval</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>processedUSecs</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>processedUSecs</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>elapsedUSecs</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>elapsedUSecs</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAudio::Error</type>
            <name>error</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAudio::State</type>
            <name>state</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QAudio::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>notify</name>
            <anchorfile>qaudiooutput.html</anchorfile>
            <anchor>notify</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoMapCircleObject</name>
        <filename>qgeomapcircleobject.html</filename>
        <base>QGeoMapObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoMapCircleObject</name>
            <anchorfile>qgeomapcircleobject.html</anchorfile>
            <anchor>QGeoMapCircleObject</anchor>
            <arglist>(QGeoMapObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoMapCircleObject</name>
            <anchorfile>qgeomapcircleobject.html</anchorfile>
            <anchor>dtor.QGeoMapCircleObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCenter</name>
            <anchorfile>qgeomapcircleobject.html</anchorfile>
            <anchor>setCenter</anchor>
            <arglist>(const QGeoCoordinate &amp; center)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>center</name>
            <anchorfile>qgeomapcircleobject.html</anchorfile>
            <anchor>center</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qgeomapcircleobject.html</anchorfile>
            <anchor>setRadius</anchor>
            <arglist>(qreal radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>radius</name>
            <anchorfile>qgeomapcircleobject.html</anchorfile>
            <anchor>radius</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoRoute</name>
        <filename>qgeoroute.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRoute</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>QGeoRoute</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoRoute</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>QGeoRoute-2</anchor>
            <arglist>(const QGeoRoute &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoRoute</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>dtor.QGeoRoute</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRoute &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QGeoRoute &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRouteId</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>setRouteId</anchor>
            <arglist>(const QString &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>routeId</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>routeId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRequest</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>setRequest</anchor>
            <arglist>(const QGeoRouteRequest &amp; request)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest</type>
            <name>request</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>request</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBounds</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>setBounds</anchor>
            <arglist>(const QGeoBoundingBox &amp; bounds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoBoundingBox</type>
            <name>bounds</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>bounds</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRouteSegments</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>setRouteSegments</anchor>
            <arglist>(const QList&lt;QGeoRouteSegment&gt; &amp; routeSegments)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGeoRouteSegment&gt;</type>
            <name>routeSegments</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>routeSegments</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTravelTime</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>setTravelTime</anchor>
            <arglist>(int secs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>travelTime</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>travelTime</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDistance</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>setDistance</anchor>
            <arglist>(qreal distance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>distance</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>distance</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTravelMode</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>setTravelMode</anchor>
            <arglist>(QGeoRouteRequest::TravelMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::TravelMode</type>
            <name>travelMode</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>travelMode</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPath</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>setPath</anchor>
            <arglist>(const QList&lt;QGeoCoordinate&gt; &amp; path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGeoCoordinate&gt;</type>
            <name>path</name>
            <anchorfile>qgeoroute.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkProximityFilter</name>
        <filename>qlandmarkproximityfilter.html</filename>
        <base>QLandmarkFilter</base>
        <member kind="enum">
            <name>Selection</name>
            <anchor>Selection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectNearestOnly">
            <anchor>Selection-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SelectAll">
            <anchor>Selection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkProximityFilter</name>
            <anchorfile>qlandmarkproximityfilter.html</anchorfile>
            <anchor>QLandmarkProximityFilter</anchor>
            <arglist>(const QGeoCoordinate &amp; coordinate, double radius)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkProximityFilter</name>
            <anchorfile>qlandmarkproximityfilter.html</anchorfile>
            <anchor>QLandmarkProximityFilter-2</anchor>
            <arglist>(const QLandmarkFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QLandmarkProximityFilter</name>
            <anchorfile>qlandmarkproximityfilter.html</anchorfile>
            <anchor>dtor.QLandmarkProximityFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>coordinate</name>
            <anchorfile>qlandmarkproximityfilter.html</anchorfile>
            <anchor>coordinate</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCoordinate</name>
            <anchorfile>qlandmarkproximityfilter.html</anchorfile>
            <anchor>setCoordinate</anchor>
            <arglist>(const QGeoCoordinate &amp; coordinate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSelection</name>
            <anchorfile>qlandmarkproximityfilter.html</anchorfile>
            <anchor>setSelection</anchor>
            <arglist>(Selection selection)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Selection</type>
            <name>selection</name>
            <anchorfile>qlandmarkproximityfilter.html</anchorfile>
            <anchor>selection</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>radius</name>
            <anchorfile>qlandmarkproximityfilter.html</anchorfile>
            <anchor>radius</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRadius</name>
            <anchorfile>qlandmarkproximityfilter.html</anchorfile>
            <anchor>setRadius</anchor>
            <arglist>(double radius)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageService</name>
        <filename>qmessageservice.html</filename>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InactiveState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActiveState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CanceledState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FinishedState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageService</name>
            <anchorfile>qmessageservice.html</anchorfile>
            <anchor>QMessageService</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMessageService</name>
            <anchorfile>qmessageservice.html</anchorfile>
            <anchor>dtor.QMessageService</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>queryMessages</name>
            <anchorfile>qmessageservice.html</anchorfile>
            <anchor>queryMessages</anchor>
            <arglist>(const QMessageFilter &amp; filter, const QMessageSortOrder &amp; sortOrder, uint limit, uint offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>queryMessages</name>
            <anchorfile>qmessageservice.html</anchorfile>
            <anchor>queryMessages-2</anchor>
            <arglist>(const QMessageFilter &amp; filter, const QString &amp; body, QMessageDataComparator::MatchFlags matchFlags, const QMessageSortOrder &amp; sortOrder, uint limit, uint offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>countMessages</name>
            <anchorfile>qmessageservice.html</anchorfile>
            <anchor>countMessages</anchor>
            <arglist>(const QMessageFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>send</name>
            <anchorfile>qmessageservice.html</anchorfile>
            <anchor>send</anchor>
            <arglist>(QMessage &amp; message)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>compose</name>
            <anchorfile>qmessageservice.html</anchorfile>
            <anchor>compose</anchor>
            <arglist>(const QMessage &amp; message)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>retrieveHeader</name>
            <anchorfile>qmessageservice.html</anchorfile>
            <anchor>retrieveHeader</anchor>
            <arglist>(const QMessageId &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>retrieveBody</name>
            <anchorfile>qmessageservice.html</anchorfile>
            <anchor>retrieveBody</anchor>
            <arglist>(const QMessageId &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>retrieve</name>
            <anchorfile>qmessageservice.html</anchorfile>
            <anchor>retrieve</anchor>
            <arglist>(const QMessageId &amp; messageId, const QMessageContentContainerId &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>show</name>
            <anchorfile>qmessageservice.html</anchorfile>
            <anchor>show</anchor>
            <arglist>(const QMessageId &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exportUpdates</name>
            <anchorfile>qmessageservice.html</anchorfile>
            <anchor>exportUpdates</anchor>
            <arglist>(const QMessageAccountId &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>State</type>
            <name>state</name>
            <anchorfile>qmessageservice.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageManager::Error</type>
            <name>error</name>
            <anchorfile>qmessageservice.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancel</name>
            <anchorfile>qmessageservice.html</anchorfile>
            <anchor>cancel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qmessageservice.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QMessageService::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>messagesFound</name>
            <anchorfile>qmessageservice.html</anchorfile>
            <anchor>messagesFound</anchor>
            <arglist>(const QMessageIdList &amp; ids)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>messagesCounted</name>
            <anchorfile>qmessageservice.html</anchorfile>
            <anchor>messagesCounted</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>progressChanged</name>
            <anchorfile>qmessageservice.html</anchorfile>
            <anchor>progressChanged</anchor>
            <arglist>(uint value, uint total)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractValueSpaceLayer</name>
        <filename>qabstractvaluespacelayer.html</filename>
        <member kind="typedef" type="">
            <name>Handle</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>Handle-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>name</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Server">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Client">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>startup</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>startup</anchor>
            <arglist>(Type type) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QUuid</type>
            <name>id</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual unsigned int</type>
            <name>order</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>order</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="enum">
            <name>Properties</name>
            <anchor>Properties-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Publish">
            <anchor>Properties-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual Handle</type>
            <name>item</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>item</anchor>
            <arglist>(Handle parent, const QString &amp; subPath) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>removeHandle</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>removeHandle</anchor>
            <arglist>(Handle handle) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setProperty</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>setProperty</anchor>
            <arglist>(Handle handle, Properties property) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>value</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(Handle handle, QVariant * data) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>value</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>value-2</anchor>
            <arglist>(Handle handle, const QString &amp; subPath, QVariant * data) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QSet&lt;QString&gt;</type>
            <name>children</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>children</anchor>
            <arglist>(Handle handle) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QValueSpace::LayerOptions</type>
            <name>layerOptions</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>layerOptions</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>supportsInterestNotification</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>supportsInterestNotification</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>notifyInterest</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>notifyInterest</anchor>
            <arglist>(Handle handle, bool interested) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>setValue</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(QValueSpacePublisher * creator, Handle handle, const QString &amp; subPath, const QVariant &amp; value) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>removeValue</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>removeValue</anchor>
            <arglist>(QValueSpacePublisher * creator, Handle handle, const QString &amp; subPath) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>removeSubTree</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>removeSubTree</anchor>
            <arglist>(QValueSpacePublisher * creator, Handle handle) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>addWatch</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>addWatch</anchor>
            <arglist>(QValueSpacePublisher * creator, Handle handle) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>removeWatches</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>removeWatches</anchor>
            <arglist>(QValueSpacePublisher * creator, Handle parent) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>sync</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>sync</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>emitInterestChanged</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>emitInterestChanged</anchor>
            <arglist>(QValueSpacePublisher * publisher, const QString &amp; path, bool interested)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>handleChanged</name>
            <anchorfile>qabstractvaluespacelayer.html</anchorfile>
            <anchor>handleChanged</anchor>
            <arglist>(quintptr handle)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>QValueSpace</name>
        <filename>qvaluespace.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>installLayer</name>
            <anchorfile>qvaluespace.html</anchorfile>
            <anchor>installLayer</anchor>
            <arglist>(QAbstractValueSpaceLayer * layer)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVersitContactImporterPropertyHandler</name>
        <filename>qversitcontactimporterpropertyhandler.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QVersitContactImporterPropertyHandler</name>
            <anchorfile>qversitcontactimporterpropertyhandler.html</anchorfile>
            <anchor>dtor.QVersitContactImporterPropertyHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>preProcessProperty</name>
            <anchorfile>qversitcontactimporterpropertyhandler.html</anchorfile>
            <anchor>preProcessProperty</anchor>
            <arglist>(const QVersitDocument &amp; document, const QVersitProperty &amp; property, int contactIndex, QContact * contact) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>postProcessProperty</name>
            <anchorfile>qversitcontactimporterpropertyhandler.html</anchorfile>
            <anchor>postProcessProperty</anchor>
            <arglist>(const QVersitDocument &amp; document, const QVersitProperty &amp; property, bool alreadyProcessed, int contactIndex, QContact * contact) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVersitContactImporterPropertyHandlerV2</name>
        <filename>qversitcontactimporterpropertyhandlerv2.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVersitContactImporterPropertyHandlerV2 *</type>
            <name>createBackupHandler</name>
            <anchorfile>qversitcontactimporterpropertyhandlerv2.html</anchorfile>
            <anchor>createBackupHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QVersitContactImporterPropertyHandlerV2</name>
            <anchorfile>qversitcontactimporterpropertyhandlerv2.html</anchorfile>
            <anchor>dtor.QVersitContactImporterPropertyHandlerV2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>propertyProcessed</name>
            <anchorfile>qversitcontactimporterpropertyhandlerv2.html</anchorfile>
            <anchor>propertyProcessed</anchor>
            <arglist>(const QVersitDocument &amp; document, const QVersitProperty &amp; property, bool alreadyProcessed, const QContact &amp; contact, QList&lt;QContactDetail&gt; * updatedDetails) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>documentProcessed</name>
            <anchorfile>qversitcontactimporterpropertyhandlerv2.html</anchorfile>
            <anchor>documentProcessed</anchor>
            <arglist>(const QVersitDocument &amp; document, QContact * contact) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>version</name>
            <anchorfile>qversitcontactimporterpropertyhandlerv2.html</anchorfile>
            <anchor>version</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVersitContactImporter</name>
        <filename>qversitcontactimporter.html</filename>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidDocumentError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EmptyDocumentError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersitContactImporter</name>
            <anchorfile>qversitcontactimporter.html</anchorfile>
            <anchor>QVersitContactImporter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QVersitContactImporter</name>
            <anchorfile>qversitcontactimporter.html</anchorfile>
            <anchor>dtor.QVersitContactImporter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>importDocuments</name>
            <anchorfile>qversitcontactimporter.html</anchorfile>
            <anchor>importDocuments</anchor>
            <arglist>(const QList&lt;QVersitDocument&gt; &amp; documents)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContact&gt;</type>
            <name>contacts</name>
            <anchorfile>qversitcontactimporter.html</anchorfile>
            <anchor>contacts</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;int, Error&gt;</type>
            <name>errors</name>
            <anchorfile>qversitcontactimporter.html</anchorfile>
            <anchor>errors</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPropertyHandler</name>
            <anchorfile>qversitcontactimporter.html</anchorfile>
            <anchor>setPropertyHandler</anchor>
            <arglist>(QVersitContactImporterPropertyHandlerV2 * handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResourceHandler</name>
            <anchorfile>qversitcontactimporter.html</anchorfile>
            <anchor>setResourceHandler</anchor>
            <arglist>(QVersitResourceHandler * handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVersitResourceHandler *</type>
            <name>resourceHandler</name>
            <anchorfile>qversitcontactimporter.html</anchorfile>
            <anchor>resourceHandler</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactDetailRangeFilter</name>
        <filename>qcontactdetailrangefilter.html</filename>
        <base>QContactFilter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactDetailRangeFilter</name>
            <anchorfile>qcontactdetailrangefilter.html</anchorfile>
            <anchor>QContactDetailRangeFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactDetailRangeFilter</name>
            <anchorfile>qcontactdetailrangefilter.html</anchorfile>
            <anchor>QContactDetailRangeFilter-2</anchor>
            <arglist>(const QContactFilter &amp; other)</arglist>
        </member>
        <member kind="enum">
            <name>RangeFlag</name>
            <anchor>RangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IncludeLower">
            <anchor>RangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IncludeUpper">
            <anchor>RangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExcludeLower">
            <anchor>RangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExcludeUpper">
            <anchor>RangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QContactDetailRangeFilter::RangeFlag">
            <name>RangeFlags</name>
            <anchorfile>qcontactdetailrangefilter.html</anchorfile>
            <anchor>RangeFlags-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDetailDefinitionName</name>
            <anchorfile>qcontactdetailrangefilter.html</anchorfile>
            <anchor>setDetailDefinitionName</anchor>
            <arglist>(const QString &amp; definitionName, const QString &amp; fieldName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatchFlags</name>
            <anchorfile>qcontactdetailrangefilter.html</anchorfile>
            <anchor>setMatchFlags</anchor>
            <arglist>(QFlags&lt;QContactFilter::MatchFlag&gt; flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRange</name>
            <anchorfile>qcontactdetailrangefilter.html</anchorfile>
            <anchor>setRange</anchor>
            <arglist>(const QVariant &amp; min, const QVariant &amp; max, QFlags&lt;QContactDetailRangeFilter::RangeFlag&gt; flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>detailDefinitionName</name>
            <anchorfile>qcontactdetailrangefilter.html</anchorfile>
            <anchor>detailDefinitionName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>detailFieldName</name>
            <anchorfile>qcontactdetailrangefilter.html</anchorfile>
            <anchor>detailFieldName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactFilter::MatchFlags</type>
            <name>matchFlags</name>
            <anchorfile>qcontactdetailrangefilter.html</anchorfile>
            <anchor>matchFlags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>minValue</name>
            <anchorfile>qcontactdetailrangefilter.html</anchorfile>
            <anchor>minValue</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>maxValue</name>
            <anchorfile>qcontactdetailrangefilter.html</anchorfile>
            <anchor>maxValue</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RangeFlags</type>
            <name>rangeFlags</name>
            <anchorfile>qcontactdetailrangefilter.html</anchorfile>
            <anchor>rangeFlags</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemMemoryEngine</name>
        <filename>qorganizeritemmemoryengine.html</filename>
        <base>QOrganizerItemManagerEngine</base>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QOrganizerItemMemoryEngine *</type>
            <name>createMemoryEngine</name>
            <anchorfile>qorganizeritemmemoryengine.html</anchorfile>
            <anchor>createMemoryEngine</anchor>
            <arglist>(const QMap&lt;QString, QString&gt; &amp; parameters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QOrganizerItemMemoryEngine</name>
            <anchorfile>qorganizeritemmemoryengine.html</anchorfile>
            <anchor>dtor.QOrganizerItemMemoryEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>managerName</name>
            <anchorfile>qorganizeritemmemoryengine.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMap&lt;QString, QString&gt;</type>
            <name>managerParameters</name>
            <anchorfile>qorganizeritemmemoryengine.html</anchorfile>
            <anchor>managerParameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QOrganizerItem&gt;</type>
            <name>itemInstances</name>
            <anchorfile>qorganizeritemmemoryengine.html</anchorfile>
            <anchor>itemInstances</anchor>
            <arglist>(const QOrganizerItem &amp; generator, const QDateTime &amp; periodStart, const QDateTime &amp; periodEnd, int maxCount, QOrganizerItemManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QOrganizerItemLocalId&gt;</type>
            <name>itemIds</name>
            <anchorfile>qorganizeritemmemoryengine.html</anchorfile>
            <anchor>itemIds</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter, const QList&lt;QOrganizerItemSortOrder&gt; &amp; sortOrders, QOrganizerItemManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QOrganizerItem&gt;</type>
            <name>items</name>
            <anchorfile>qorganizeritemmemoryengine.html</anchorfile>
            <anchor>items</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter, const QList&lt;QOrganizerItemSortOrder&gt; &amp; sortOrders, const QOrganizerItemFetchHint &amp; fetchHint, QOrganizerItemManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QOrganizerItem</type>
            <name>item</name>
            <anchorfile>qorganizeritemmemoryengine.html</anchorfile>
            <anchor>item</anchor>
            <arglist>(const QOrganizerItemLocalId &amp; organizeritemId, const QOrganizerItemFetchHint &amp; fetchHint, QOrganizerItemManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>saveItems</name>
            <anchorfile>qorganizeritemmemoryengine.html</anchorfile>
            <anchor>saveItems</anchor>
            <arglist>(QList&lt;QOrganizerItem&gt; * organizeritems, QMap&lt;int, QOrganizerItemManager::Error&gt; * errorMap, QOrganizerItemManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeItems</name>
            <anchorfile>qorganizeritemmemoryengine.html</anchorfile>
            <anchor>removeItems</anchor>
            <arglist>(const QList&lt;QOrganizerItemLocalId&gt; &amp; organizeritemIds, QMap&lt;int, QOrganizerItemManager::Error&gt; * errorMap, QOrganizerItemManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeDetailDefinition</name>
            <anchorfile>qorganizeritemmemoryengine.html</anchorfile>
            <anchor>removeDetailDefinition</anchor>
            <arglist>(const QString &amp; definitionId, const QString &amp; organizeritemType, QOrganizerItemManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>requestDestroyed</name>
            <anchorfile>qorganizeritemmemoryengine.html</anchorfile>
            <anchor>requestDestroyed</anchor>
            <arglist>(QOrganizerItemAbstractRequest * req)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>startRequest</name>
            <anchorfile>qorganizeritemmemoryengine.html</anchorfile>
            <anchor>startRequest</anchor>
            <arglist>(QOrganizerItemAbstractRequest * req)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>cancelRequest</name>
            <anchorfile>qorganizeritemmemoryengine.html</anchorfile>
            <anchor>cancelRequest</anchor>
            <arglist>(QOrganizerItemAbstractRequest * req)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForRequestFinished</name>
            <anchorfile>qorganizeritemmemoryengine.html</anchorfile>
            <anchor>waitForRequestFinished</anchor>
            <arglist>(QOrganizerItemAbstractRequest * req, int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasFeature</name>
            <anchorfile>qorganizeritemmemoryengine.html</anchorfile>
            <anchor>hasFeature</anchor>
            <arglist>(QOrganizerItemManager::ManagerFeature feature, const QString &amp; organizeritemType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isFilterSupported</name>
            <anchorfile>qorganizeritemmemoryengine.html</anchorfile>
            <anchor>isFilterSupported</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QVariant::Type&gt;</type>
            <name>supportedDataTypes</name>
            <anchorfile>qorganizeritemmemoryengine.html</anchorfile>
            <anchor>supportedDataTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemMemoryEngine</name>
            <anchorfile>qorganizeritemmemoryengine.html</anchorfile>
            <anchor>QOrganizerItemMemoryEngine</anchor>
            <arglist>(QOrganizerItemMemoryEngineData * data)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactDetail</name>
        <filename>qcontactdetail.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactDetail</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>QContactDetail</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactDetail</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>QContactDetail-2</anchor>
            <arglist>(const char * thisDefinitionId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactDetail</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>QContactDetail-3</anchor>
            <arglist>(const QString &amp; thisDefinitionId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactDetail</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>dtor.QContactDetail</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactDetail</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>QContactDetail-4</anchor>
            <arglist>(const QContactDetail &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactDetail &amp;</type>
            <name>operator=</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QContactDetail &amp; other)</arglist>
        </member>
        <member kind="enum">
            <name>AccessConstraint</name>
            <anchor>AccessConstraint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoConstraint">
            <anchor>AccessConstraint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadOnly">
            <anchor>AccessConstraint-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Irremovable">
            <anchor>AccessConstraint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QContactDetail::AccessConstraint">
            <name>AccessConstraints</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>AccessConstraints-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>AccessConstraints</type>
            <name>accessConstraints</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>accessConstraints</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QContactDetail &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QContactDetail &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>definitionName</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>definitionName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>key</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetKey</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>resetKey</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>value</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>value-3</anchor>
            <arglist>(const QString &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setValue</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const QString &amp; key, const QVariant &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeValue</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>removeValue</anchor>
            <arglist>(const QString &amp; key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasValue</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>hasValue</anchor>
            <arglist>(const QString &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantMap</type>
            <name>variantValues</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>variantValues</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>variantValue</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>variantValue</anchor>
            <arglist>(const QString &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const QString &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>value</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>value-6</anchor>
            <arglist>(const QLatin1Constant &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setValue</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>setValue-3</anchor>
            <arglist>(const QLatin1Constant &amp; key, const QVariant &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeValue</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>removeValue-3</anchor>
            <arglist>(const QLatin1Constant &amp; key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasValue</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>hasValue-3</anchor>
            <arglist>(const QLatin1Constant &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>variantValue</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>variantValue-3</anchor>
            <arglist>(const QLatin1Constant &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>value-2</anchor>
            <arglist>(const QLatin1Constant &amp; key) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContexts</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>setContexts</anchor>
            <arglist>(const QStringList &amp; contexts)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContexts</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>setContexts-2</anchor>
            <arglist>(const QString &amp; context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>contexts</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>contexts</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDetailUri</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>setDetailUri</anchor>
            <arglist>(const QString &amp; detailUri)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>detailUri</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>detailUri</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLinkedDetailUris</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>setLinkedDetailUris</anchor>
            <arglist>(const QStringList &amp; linkedDetailUris)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLinkedDetailUris</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>setLinkedDetailUris-2</anchor>
            <arglist>(const QString &amp; linkedDetailUri)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>linkedDetailUris</name>
            <anchorfile>qcontactdetail.html</anchorfile>
            <anchor>linkedDetailUris</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoSatelliteInfo</name>
        <filename>qgeosatelliteinfo.html</filename>
        <member kind="enum">
            <name>Attribute</name>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Elevation">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Azimuth">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoSatelliteInfo</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>QGeoSatelliteInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoSatelliteInfo</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>QGeoSatelliteInfo-2</anchor>
            <arglist>(const QGeoSatelliteInfo &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoSatelliteInfo</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>dtor.QGeoSatelliteInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoSatelliteInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QGeoSatelliteInfo &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QGeoSatelliteInfo &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QGeoSatelliteInfo &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPrnNumber</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>setPrnNumber</anchor>
            <arglist>(int prn)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>prnNumber</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>prnNumber</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSignalStrength</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>setSignalStrength</anchor>
            <arglist>(int signalStrength)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>signalStrength</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>signalStrength</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttribute</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>setAttribute</anchor>
            <arglist>(Attribute attribute, qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>attribute</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>attribute</anchor>
            <arglist>(Attribute attribute) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAttribute</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>removeAttribute</anchor>
            <arglist>(Attribute attribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasAttribute</name>
            <anchorfile>qgeosatelliteinfo.html</anchorfile>
            <anchor>hasAttribute</anchor>
            <arglist>(Attribute attribute) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAudioCaptureSource</name>
        <filename>qaudiocapturesource.html</filename>
        <base>QMediaObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAudioCaptureSource</name>
            <anchorfile>qaudiocapturesource.html</anchorfile>
            <anchor>QAudioCaptureSource</anchor>
            <arglist>(QObject * parent, QMediaServiceProvider * provider)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAudioCaptureSource</name>
            <anchorfile>qaudiocapturesource.html</anchorfile>
            <anchor>dtor.QAudioCaptureSource</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isAvailable</name>
            <anchorfile>qaudiocapturesource.html</anchorfile>
            <anchor>isAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QtMultimediaKit::AvailabilityError</type>
            <name>availabilityError</name>
            <anchorfile>qaudiocapturesource.html</anchorfile>
            <anchor>availabilityError</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QString&gt;</type>
            <name>audioInputs</name>
            <anchorfile>qaudiocapturesource.html</anchorfile>
            <anchor>audioInputs</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>audioDescription</name>
            <anchorfile>qaudiocapturesource.html</anchorfile>
            <anchor>audioDescription</anchor>
            <arglist>(const QString &amp; name) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>defaultAudioInput</name>
            <anchorfile>qaudiocapturesource.html</anchorfile>
            <anchor>defaultAudioInput</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>activeAudioInput</name>
            <anchorfile>qaudiocapturesource.html</anchorfile>
            <anchor>activeAudioInput</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAudioInput</name>
            <anchorfile>qaudiocapturesource.html</anchorfile>
            <anchor>setAudioInput</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeAudioInputChanged</name>
            <anchorfile>qaudiocapturesource.html</anchorfile>
            <anchor>activeAudioInputChanged</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>availableAudioInputsChanged</name>
            <anchorfile>qaudiocapturesource.html</anchorfile>
            <anchor>availableAudioInputsChanged</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactDetailDefinitionRemoveRequest</name>
        <filename>qcontactdetaildefinitionremoverequest.html</filename>
        <base>QContactAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactDetailDefinitionRemoveRequest</name>
            <anchorfile>qcontactdetaildefinitionremoverequest.html</anchorfile>
            <anchor>QContactDetailDefinitionRemoveRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactDetailDefinitionRemoveRequest</name>
            <anchorfile>qcontactdetaildefinitionremoverequest.html</anchorfile>
            <anchor>dtor.QContactDetailDefinitionRemoveRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefinitionName</name>
            <anchorfile>qcontactdetaildefinitionremoverequest.html</anchorfile>
            <anchor>setDefinitionName</anchor>
            <arglist>(const QString &amp; definitionName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefinitionNames</name>
            <anchorfile>qcontactdetaildefinitionremoverequest.html</anchorfile>
            <anchor>setDefinitionNames</anchor>
            <arglist>(const QStringList &amp; names)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>definitionNames</name>
            <anchorfile>qcontactdetaildefinitionremoverequest.html</anchorfile>
            <anchor>definitionNames</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContactType</name>
            <anchorfile>qcontactdetaildefinitionremoverequest.html</anchorfile>
            <anchor>setContactType</anchor>
            <arglist>(const QString &amp; contactType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>contactType</name>
            <anchorfile>qcontactdetaildefinitionremoverequest.html</anchorfile>
            <anchor>contactType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;int, QContactManager::Error&gt;</type>
            <name>errorMap</name>
            <anchorfile>qcontactdetaildefinitionremoverequest.html</anchorfile>
            <anchor>errorMap</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactDetailDefinitionSaveRequest</name>
        <filename>qcontactdetaildefinitionsaverequest.html</filename>
        <base>QContactAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactDetailDefinitionSaveRequest</name>
            <anchorfile>qcontactdetaildefinitionsaverequest.html</anchorfile>
            <anchor>QContactDetailDefinitionSaveRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactDetailDefinitionSaveRequest</name>
            <anchorfile>qcontactdetaildefinitionsaverequest.html</anchorfile>
            <anchor>dtor.QContactDetailDefinitionSaveRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefinition</name>
            <anchorfile>qcontactdetaildefinitionsaverequest.html</anchorfile>
            <anchor>setDefinition</anchor>
            <arglist>(const QContactDetailDefinition &amp; definition)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefinitions</name>
            <anchorfile>qcontactdetaildefinitionsaverequest.html</anchorfile>
            <anchor>setDefinitions</anchor>
            <arglist>(const QList&lt;QContactDetailDefinition&gt; &amp; definitions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setContactType</name>
            <anchorfile>qcontactdetaildefinitionsaverequest.html</anchorfile>
            <anchor>setContactType</anchor>
            <arglist>(const QString &amp; contactType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>contactType</name>
            <anchorfile>qcontactdetaildefinitionsaverequest.html</anchorfile>
            <anchor>contactType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QContactDetailDefinition&gt;</type>
            <name>definitions</name>
            <anchorfile>qcontactdetaildefinitionsaverequest.html</anchorfile>
            <anchor>definitions</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;int, QContactManager::Error&gt;</type>
            <name>errorMap</name>
            <anchorfile>qcontactdetaildefinitionsaverequest.html</anchorfile>
            <anchor>errorMap</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVideoEncoderControl</name>
        <filename>qvideoencodercontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QVideoEncoderControl</name>
            <anchorfile>qvideoencodercontrol.html</anchorfile>
            <anchor>dtor.QVideoEncoderControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;QSize&gt;</type>
            <name>supportedResolutions</name>
            <anchorfile>qvideoencodercontrol.html</anchorfile>
            <anchor>supportedResolutions</anchor>
            <arglist>(const QVideoEncoderSettings &amp; settings, bool * continuous) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;qreal&gt;</type>
            <name>supportedFrameRates</name>
            <anchorfile>qvideoencodercontrol.html</anchorfile>
            <anchor>supportedFrameRates</anchor>
            <arglist>(const QVideoEncoderSettings &amp; settings, bool * continuous) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QStringList</type>
            <name>supportedVideoCodecs</name>
            <anchorfile>qvideoencodercontrol.html</anchorfile>
            <anchor>supportedVideoCodecs</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>videoCodecDescription</name>
            <anchorfile>qvideoencodercontrol.html</anchorfile>
            <anchor>videoCodecDescription</anchor>
            <arglist>(const QString &amp; codec) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVideoEncoderSettings</type>
            <name>videoSettings</name>
            <anchorfile>qvideoencodercontrol.html</anchorfile>
            <anchor>videoSettings</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setVideoSettings</name>
            <anchorfile>qvideoencodercontrol.html</anchorfile>
            <anchor>setVideoSettings</anchor>
            <arglist>(const QVideoEncoderSettings &amp; settings) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QStringList</type>
            <name>supportedEncodingOptions</name>
            <anchorfile>qvideoencodercontrol.html</anchorfile>
            <anchor>supportedEncodingOptions</anchor>
            <arglist>(const QString &amp; codec) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVariant</type>
            <name>encodingOption</name>
            <anchorfile>qvideoencodercontrol.html</anchorfile>
            <anchor>encodingOption</anchor>
            <arglist>(const QString &amp; codec, const QString &amp; option) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setEncodingOption</name>
            <anchorfile>qvideoencodercontrol.html</anchorfile>
            <anchor>setEncodingOption</anchor>
            <arglist>(const QString &amp; codec, const QString &amp; option, const QVariant &amp; value) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QVideoEncoderControl</name>
            <anchorfile>qvideoencodercontrol.html</anchorfile>
            <anchor>QVideoEncoderControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCameraFocusControl</name>
        <filename>qcamerafocuscontrol.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCameraFocusControl</name>
            <anchorfile>qcamerafocuscontrol.html</anchorfile>
            <anchor>dtor.QCameraFocusControl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QCameraFocus::FocusMode</type>
            <name>focusMode</name>
            <anchorfile>qcamerafocuscontrol.html</anchorfile>
            <anchor>focusMode</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setFocusMode</name>
            <anchorfile>qcamerafocuscontrol.html</anchorfile>
            <anchor>setFocusMode</anchor>
            <arglist>(QCameraFocus::FocusMode mode) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isFocusModeSupported</name>
            <anchorfile>qcamerafocuscontrol.html</anchorfile>
            <anchor>isFocusModeSupported</anchor>
            <arglist>(QCameraFocus::FocusMode mode) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual qreal</type>
            <name>maximumOpticalZoom</name>
            <anchorfile>qcamerafocuscontrol.html</anchorfile>
            <anchor>maximumOpticalZoom</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual qreal</type>
            <name>maximumDigitalZoom</name>
            <anchorfile>qcamerafocuscontrol.html</anchorfile>
            <anchor>maximumDigitalZoom</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual qreal</type>
            <name>opticalZoom</name>
            <anchorfile>qcamerafocuscontrol.html</anchorfile>
            <anchor>opticalZoom</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual qreal</type>
            <name>digitalZoom</name>
            <anchorfile>qcamerafocuscontrol.html</anchorfile>
            <anchor>digitalZoom</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>zoomTo</name>
            <anchorfile>qcamerafocuscontrol.html</anchorfile>
            <anchor>zoomTo</anchor>
            <arglist>(qreal optical, qreal digital) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QCameraFocus::FocusPointMode</type>
            <name>focusPointMode</name>
            <anchorfile>qcamerafocuscontrol.html</anchorfile>
            <anchor>focusPointMode</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setFocusPointMode</name>
            <anchorfile>qcamerafocuscontrol.html</anchorfile>
            <anchor>setFocusPointMode</anchor>
            <arglist>(QCameraFocus::FocusPointMode mode) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isFocusPointModeSupported</name>
            <anchorfile>qcamerafocuscontrol.html</anchorfile>
            <anchor>isFocusPointModeSupported</anchor>
            <arglist>(QCameraFocus::FocusPointMode mode) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QPointF</type>
            <name>customFocusPoint</name>
            <anchorfile>qcamerafocuscontrol.html</anchorfile>
            <anchor>customFocusPoint</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setCustomFocusPoint</name>
            <anchorfile>qcamerafocuscontrol.html</anchorfile>
            <anchor>setCustomFocusPoint</anchor>
            <arglist>(const QPointF &amp; point) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QCameraFocusZoneList</type>
            <name>focusZones</name>
            <anchorfile>qcamerafocuscontrol.html</anchorfile>
            <anchor>focusZones</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>opticalZoomChanged</name>
            <anchorfile>qcamerafocuscontrol.html</anchorfile>
            <anchor>opticalZoomChanged</anchor>
            <arglist>(qreal zoom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>digitalZoomChanged</name>
            <anchorfile>qcamerafocuscontrol.html</anchorfile>
            <anchor>digitalZoomChanged</anchor>
            <arglist>(qreal zoom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>focusZonesChanged</name>
            <anchorfile>qcamerafocuscontrol.html</anchorfile>
            <anchor>focusZonesChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QCameraFocusControl</name>
            <anchorfile>qcamerafocuscontrol.html</anchorfile>
            <anchor>QCameraFocusControl</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageFilter</name>
        <filename>qmessagefilter.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageFilter</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>QMessageFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageFilter</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>QMessageFilter-2</anchor>
            <arglist>(const QMessageFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMessageFilter</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>dtor.QMessageFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatchFlags</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>setMatchFlags</anchor>
            <arglist>(QMessageDataComparator::MatchFlags matchFlags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageDataComparator::MatchFlags</type>
            <name>matchFlags</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>matchFlags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSupported</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>isSupported</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageFilter</type>
            <name>operator~</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>operator~</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageFilter</type>
            <name>operator&amp;</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>operator&amp;</anchor>
            <arglist>(const QMessageFilter &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageFilter</type>
            <name>operator|</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>operator|</anchor>
            <arglist>(const QMessageFilter &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMessageFilter &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>operator&amp;=</anchor>
            <arglist>(const QMessageFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMessageFilter &amp;</type>
            <name>operator|=</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>operator|=</anchor>
            <arglist>(const QMessageFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>byId</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>byId</anchor>
            <arglist>(const QMessageId &amp; id, QMessageDataComparator::EqualityComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>byId</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>byId-2</anchor>
            <arglist>(const QMessageIdList &amp; ids, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>byId</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>byId-3</anchor>
            <arglist>(const QMessageFilter &amp; filter, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>byType</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>byType</anchor>
            <arglist>(QMessage::Type type, QMessageDataComparator::EqualityComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>byType</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>byType-2</anchor>
            <arglist>(QFlags&lt;QMessage::Type&gt; type, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>bySender</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>bySender</anchor>
            <arglist>(const QString &amp; value, QMessageDataComparator::EqualityComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>bySender</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>bySender-2</anchor>
            <arglist>(const QString &amp; value, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>byRecipients</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>byRecipients</anchor>
            <arglist>(const QString &amp; value, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>bySubject</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>bySubject</anchor>
            <arglist>(const QString &amp; value, QMessageDataComparator::EqualityComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>bySubject</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>bySubject-2</anchor>
            <arglist>(const QString &amp; value, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>byTimeStamp</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>byTimeStamp</anchor>
            <arglist>(const QDateTime &amp; value, QMessageDataComparator::EqualityComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>byTimeStamp</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>byTimeStamp-2</anchor>
            <arglist>(const QDateTime &amp; value, QMessageDataComparator::RelationComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>byReceptionTimeStamp</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>byReceptionTimeStamp</anchor>
            <arglist>(const QDateTime &amp; value, QMessageDataComparator::EqualityComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>byReceptionTimeStamp</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>byReceptionTimeStamp-2</anchor>
            <arglist>(const QDateTime &amp; value, QMessageDataComparator::RelationComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>byStatus</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>byStatus</anchor>
            <arglist>(QMessage::Status value, QMessageDataComparator::EqualityComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>byStatus</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>byStatus-2</anchor>
            <arglist>(QFlags&lt;QMessage::Status&gt; mask, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>byPriority</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>byPriority</anchor>
            <arglist>(QMessage::Priority value, QMessageDataComparator::EqualityComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>bySize</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>bySize</anchor>
            <arglist>(int value, QMessageDataComparator::EqualityComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>bySize</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>bySize-2</anchor>
            <arglist>(int value, QMessageDataComparator::RelationComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>byParentAccountId</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>byParentAccountId</anchor>
            <arglist>(const QMessageAccountId &amp; id, QMessageDataComparator::EqualityComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>byParentAccountId</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>byParentAccountId-2</anchor>
            <arglist>(const QMessageAccountFilter &amp; filter, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>byStandardFolder</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>byStandardFolder</anchor>
            <arglist>(QMessage::StandardFolder folder, QMessageDataComparator::EqualityComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>byParentFolderId</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>byParentFolderId</anchor>
            <arglist>(const QMessageFolderId &amp; id, QMessageDataComparator::EqualityComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>byParentFolderId</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>byParentFolderId-2</anchor>
            <arglist>(const QMessageFolderFilter &amp; filter, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>byAncestorFolderIds</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>byAncestorFolderIds</anchor>
            <arglist>(const QMessageFolderId &amp; id, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMessageFilter</type>
            <name>byAncestorFolderIds</name>
            <anchorfile>qmessagefilter.html</anchorfile>
            <anchor>byAncestorFolderIds-2</anchor>
            <arglist>(const QMessageFolderFilter &amp; filter, QMessageDataComparator::InclusionComparator cmp)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactMemoryEngine</name>
        <filename>qcontactmemoryengine.html</filename>
        <base>QContactManagerEngine</base>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QContactMemoryEngine *</type>
            <name>createMemoryEngine</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>createMemoryEngine</anchor>
            <arglist>(const QMap&lt;QString, QString&gt; &amp; parameters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactMemoryEngine</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>dtor.QContactMemoryEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>managerName</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMap&lt;QString, QString&gt;</type>
            <name>managerParameters</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>managerParameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QContact&gt;</type>
            <name>contacts</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>contacts</anchor>
            <arglist>(const QContactFilter &amp; filter, const QList&lt;QContactSortOrder&gt; &amp; sortOrders, const QContactFetchHint &amp; fetchHint, QContactManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QContact</type>
            <name>contact</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>contact</anchor>
            <arglist>(const QContactLocalId &amp; contactId, const QContactFetchHint &amp; fetchHint, QContactManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>saveContacts</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>saveContacts</anchor>
            <arglist>(QList&lt;QContact&gt; * contacts, QMap&lt;int, QContactManager::Error&gt; * errorMap, QContactManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeContacts</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>removeContacts</anchor>
            <arglist>(const QList&lt;QContactLocalId&gt; &amp; contactIds, QMap&lt;int, QContactManager::Error&gt; * errorMap, QContactManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QContactLocalId</type>
            <name>selfContactId</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>selfContactId</anchor>
            <arglist>(QContactManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QContactRelationship&gt;</type>
            <name>relationships</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>relationships</anchor>
            <arglist>(const QString &amp; relationshipType, const QContactId &amp; participantId, QContactRelationship::Role role, QContactManager::Error * error) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>saveRelationships</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>saveRelationships</anchor>
            <arglist>(QList&lt;QContactRelationship&gt; * relationships, QMap&lt;int, QContactManager::Error&gt; * errorMap, QContactManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeRelationships</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>removeRelationships</anchor>
            <arglist>(const QList&lt;QContactRelationship&gt; &amp; relationships, QMap&lt;int, QContactManager::Error&gt; * errorMap, QContactManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeDetailDefinition</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>removeDetailDefinition</anchor>
            <arglist>(const QString &amp; definitionId, const QString &amp; contactType, QContactManager::Error * error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>requestDestroyed</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>requestDestroyed</anchor>
            <arglist>(QContactAbstractRequest * req)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>startRequest</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>startRequest</anchor>
            <arglist>(QContactAbstractRequest * req)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>cancelRequest</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>cancelRequest</anchor>
            <arglist>(QContactAbstractRequest * req)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForRequestFinished</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>waitForRequestFinished</anchor>
            <arglist>(QContactAbstractRequest * req, int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasFeature</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>hasFeature</anchor>
            <arglist>(QContactManager::ManagerFeature feature, const QString &amp; contactType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isRelationshipTypeSupported</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>isRelationshipTypeSupported</anchor>
            <arglist>(const QString &amp; relationshipType, const QString &amp; contactType) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isFilterSupported</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>isFilterSupported</anchor>
            <arglist>(const QContactFilter &amp; filter) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QList&lt;QVariant::Type&gt;</type>
            <name>supportedDataTypes</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>supportedDataTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QContactMemoryEngine</name>
            <anchorfile>qcontactmemoryengine.html</anchorfile>
            <anchor>QContactMemoryEngine</anchor>
            <arglist>(QContactMemoryEngineData * data)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemLocalIdFilter</name>
        <filename>qorganizeritemlocalidfilter.html</filename>
        <base>QOrganizerItemFilter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemLocalIdFilter</name>
            <anchorfile>qorganizeritemlocalidfilter.html</anchorfile>
            <anchor>QOrganizerItemLocalIdFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemLocalIdFilter</name>
            <anchorfile>qorganizeritemlocalidfilter.html</anchorfile>
            <anchor>QOrganizerItemLocalIdFilter-2</anchor>
            <arglist>(const QOrganizerItemFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIds</name>
            <anchorfile>qorganizeritemlocalidfilter.html</anchorfile>
            <anchor>setIds</anchor>
            <arglist>(const QList&lt;QOrganizerItemLocalId&gt; &amp; ids)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItemLocalId&gt;</type>
            <name>ids</name>
            <anchorfile>qorganizeritemlocalidfilter.html</anchorfile>
            <anchor>ids</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSystemStorageInfo</name>
        <filename>qsystemstorageinfo.html</filename>
        <member kind="property" type="QStringList">
            <name>logicalDrives</name>
            <anchorfile>qsystemstorageinfo.html</anchorfile>
            <anchor>logicalDrives-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSystemStorageInfo</name>
            <anchorfile>qsystemstorageinfo.html</anchorfile>
            <anchor>QSystemStorageInfo</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSystemStorageInfo</name>
            <anchorfile>qsystemstorageinfo.html</anchorfile>
            <anchor>dtor.QSystemStorageInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>DriveType</name>
            <anchor>DriveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoDrive">
            <anchor>DriveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InternalDrive">
            <anchor>DriveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RemovableDrive">
            <anchor>DriveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RemoteDrive">
            <anchor>DriveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CdromDrive">
            <anchor>DriveType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>logicalDrives</name>
            <anchorfile>qsystemstorageinfo.html</anchorfile>
            <anchor>logicalDrives-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>logicalDriveChanged</name>
            <anchorfile>qsystemstorageinfo.html</anchorfile>
            <anchor>logicalDriveChanged</anchor>
            <arglist>(bool added, const QString &amp; vol)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QServiceManager</name>
        <filename>qservicemanager.html</filename>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StorageAccessError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidServiceLocation">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidServiceXml">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidServiceInterfaceDescriptor">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ServiceAlreadyExists">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImplementationAlreadyExists">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PluginLoadingFailed">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ComponentNotFound">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ServiceCapabilityDenied">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QServiceManager</name>
            <anchorfile>qservicemanager.html</anchorfile>
            <anchor>QServiceManager</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QServiceManager</name>
            <anchorfile>qservicemanager.html</anchorfile>
            <anchor>QServiceManager-2</anchor>
            <arglist>(QService::Scope scope, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QServiceManager</name>
            <anchorfile>qservicemanager.html</anchorfile>
            <anchor>dtor.QServiceManager</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QService::Scope</type>
            <name>scope</name>
            <anchorfile>qservicemanager.html</anchorfile>
            <anchor>scope</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>findServices</name>
            <anchorfile>qservicemanager.html</anchorfile>
            <anchor>findServices</anchor>
            <arglist>(const QString &amp; interfaceName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QServiceInterfaceDescriptor&gt;</type>
            <name>findInterfaces</name>
            <anchorfile>qservicemanager.html</anchorfile>
            <anchor>findInterfaces</anchor>
            <arglist>(const QServiceFilter &amp; filter) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QServiceInterfaceDescriptor&gt;</type>
            <name>findInterfaces</name>
            <anchorfile>qservicemanager.html</anchorfile>
            <anchor>findInterfaces-2</anchor>
            <arglist>(const QString &amp; serviceName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>loadInterface</name>
            <anchorfile>qservicemanager.html</anchorfile>
            <anchor>loadInterface</anchor>
            <arglist>(const QString &amp; interfaceName, QServiceContext * context, QAbstractSecuritySession * session)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>loadInterface</name>
            <anchorfile>qservicemanager.html</anchorfile>
            <anchor>loadInterface-2</anchor>
            <arglist>(const QServiceInterfaceDescriptor &amp; descriptor, QServiceContext * context, QAbstractSecuritySession * session)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>loadLocalTypedInterface</name>
            <anchorfile>qservicemanager.html</anchorfile>
            <anchor>loadLocalTypedInterface</anchor>
            <arglist>(const QString &amp; interfaceName, QServiceContext * context, QAbstractSecuritySession * session)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>loadLocalTypedInterface</name>
            <anchorfile>qservicemanager.html</anchorfile>
            <anchor>loadLocalTypedInterface-2</anchor>
            <arglist>(const QServiceInterfaceDescriptor &amp; serviceDescriptor, QServiceContext * context, QAbstractSecuritySession * session)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addService</name>
            <anchorfile>qservicemanager.html</anchorfile>
            <anchor>addService</anchor>
            <arglist>(const QString &amp; xmlFilePath)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addService</name>
            <anchorfile>qservicemanager.html</anchorfile>
            <anchor>addService-2</anchor>
            <arglist>(QIODevice * device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeService</name>
            <anchorfile>qservicemanager.html</anchorfile>
            <anchor>removeService</anchor>
            <arglist>(const QString &amp; serviceName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setInterfaceDefault</name>
            <anchorfile>qservicemanager.html</anchorfile>
            <anchor>setInterfaceDefault</anchor>
            <arglist>(const QString &amp; service, const QString &amp; interfaceName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setInterfaceDefault</name>
            <anchorfile>qservicemanager.html</anchorfile>
            <anchor>setInterfaceDefault-2</anchor>
            <arglist>(const QServiceInterfaceDescriptor &amp; descriptor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QServiceInterfaceDescriptor</type>
            <name>interfaceDefault</name>
            <anchorfile>qservicemanager.html</anchorfile>
            <anchor>interfaceDefault</anchor>
            <arglist>(const QString &amp; interfaceName) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Error</type>
            <name>error</name>
            <anchorfile>qservicemanager.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>serviceAdded</name>
            <anchorfile>qservicemanager.html</anchorfile>
            <anchor>serviceAdded</anchor>
            <arglist>(const QString &amp; serviceName, QService::Scope scope)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>serviceRemoved</name>
            <anchorfile>qservicemanager.html</anchorfile>
            <anchor>serviceRemoved</anchor>
            <arglist>(const QString &amp; serviceName, QService::Scope scope)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>QAudio</name>
        <filename>qaudio.html</filename>
        <member kind="enum">
            <name>Error</name>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OpenError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IOError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnderrunError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FatalError">
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActiveState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SuspendedState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StoppedState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IdleState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Mode</name>
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AudioInput">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AudioOutput">
            <anchor>Mode-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractVideoBuffer</name>
        <filename>qabstractvideobuffer.html</filename>
        <member kind="enum">
            <name>HandleType</name>
            <anchor>HandleType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoHandle">
            <anchor>HandleType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GLTextureHandle">
            <anchor>HandleType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="XvShmImageHandle">
            <anchor>HandleType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CoreImageHandle">
            <anchor>HandleType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserHandle">
            <anchor>HandleType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>MapMode</name>
            <anchor>MapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotMapped">
            <anchor>MapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadOnly">
            <anchor>MapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WriteOnly">
            <anchor>MapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadWrite">
            <anchor>MapMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractVideoBuffer</name>
            <anchorfile>qabstractvideobuffer.html</anchorfile>
            <anchor>QAbstractVideoBuffer</anchor>
            <arglist>(HandleType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractVideoBuffer</name>
            <anchorfile>qabstractvideobuffer.html</anchorfile>
            <anchor>dtor.QAbstractVideoBuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>HandleType</type>
            <name>handleType</name>
            <anchorfile>qabstractvideobuffer.html</anchorfile>
            <anchor>handleType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual MapMode</type>
            <name>mapMode</name>
            <anchorfile>qabstractvideobuffer.html</anchorfile>
            <anchor>mapMode</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual uchar *</type>
            <name>map</name>
            <anchorfile>qabstractvideobuffer.html</anchorfile>
            <anchor>map</anchor>
            <arglist>(MapMode mode, int * numBytes, int * bytesPerLine) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>unmap</name>
            <anchorfile>qabstractvideobuffer.html</anchorfile>
            <anchor>unmap</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>handle</name>
            <anchorfile>qabstractvideobuffer.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSystemScreenSaver</name>
        <filename>qsystemscreensaver.html</filename>
        <member kind="property" type="bool">
            <name>screenSaverInhibited</name>
            <anchorfile>qsystemscreensaver.html</anchorfile>
            <anchor>screenSaverInhibited-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSystemScreenSaver</name>
            <anchorfile>qsystemscreensaver.html</anchorfile>
            <anchor>QSystemScreenSaver</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSystemScreenSaver</name>
            <anchorfile>qsystemscreensaver.html</anchorfile>
            <anchor>dtor.QSystemScreenSaver</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>screenSaverInhibited</name>
            <anchorfile>qsystemscreensaver.html</anchorfile>
            <anchor>screenSaverInhibited-prop</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemFetchRequest</name>
        <filename>qorganizeritemfetchrequest.html</filename>
        <base>QOrganizerItemAbstractRequest</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemFetchRequest</name>
            <anchorfile>qorganizeritemfetchrequest.html</anchorfile>
            <anchor>QOrganizerItemFetchRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilter</name>
            <anchorfile>qorganizeritemfetchrequest.html</anchorfile>
            <anchor>setFilter</anchor>
            <arglist>(const QOrganizerItemFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSorting</name>
            <anchorfile>qorganizeritemfetchrequest.html</anchorfile>
            <anchor>setSorting</anchor>
            <arglist>(const QList&lt;QOrganizerItemSortOrder&gt; &amp; sorting)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFetchHint</name>
            <anchorfile>qorganizeritemfetchrequest.html</anchorfile>
            <anchor>setFetchHint</anchor>
            <arglist>(const QOrganizerItemFetchHint &amp; fetchHint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemFilter</type>
            <name>filter</name>
            <anchorfile>qorganizeritemfetchrequest.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItemSortOrder&gt;</type>
            <name>sorting</name>
            <anchorfile>qorganizeritemfetchrequest.html</anchorfile>
            <anchor>sorting</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemFetchHint</type>
            <name>fetchHint</name>
            <anchorfile>qorganizeritemfetchrequest.html</anchorfile>
            <anchor>fetchHint</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QOrganizerItem&gt;</type>
            <name>items</name>
            <anchorfile>qorganizeritemfetchrequest.html</anchorfile>
            <anchor>items</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaContent</name>
        <filename>qmediacontent.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaContent</name>
            <anchorfile>qmediacontent.html</anchorfile>
            <anchor>QMediaContent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaContent</name>
            <anchorfile>qmediacontent.html</anchorfile>
            <anchor>QMediaContent-2</anchor>
            <arglist>(const QUrl &amp; url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaContent</name>
            <anchorfile>qmediacontent.html</anchorfile>
            <anchor>QMediaContent-3</anchor>
            <arglist>(const QNetworkRequest &amp; request)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaContent</name>
            <anchorfile>qmediacontent.html</anchorfile>
            <anchor>QMediaContent-4</anchor>
            <arglist>(const QMediaResource &amp; resource)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaContent</name>
            <anchorfile>qmediacontent.html</anchorfile>
            <anchor>QMediaContent-5</anchor>
            <arglist>(const QMediaResourceList &amp; resources)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaContent</name>
            <anchorfile>qmediacontent.html</anchorfile>
            <anchor>QMediaContent-6</anchor>
            <arglist>(const QMediaContent &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMediaContent</name>
            <anchorfile>qmediacontent.html</anchorfile>
            <anchor>dtor.QMediaContent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaContent &amp;</type>
            <name>operator=</name>
            <anchorfile>qmediacontent.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QMediaContent &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmediacontent.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QMediaContent &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmediacontent.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QMediaContent &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qmediacontent.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>canonicalUrl</name>
            <anchorfile>qmediacontent.html</anchorfile>
            <anchor>canonicalUrl</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkRequest</type>
            <name>canonicalRequest</name>
            <anchorfile>qmediacontent.html</anchorfile>
            <anchor>canonicalRequest</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaResource</type>
            <name>canonicalResource</name>
            <anchorfile>qmediacontent.html</anchorfile>
            <anchor>canonicalResource</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaResourceList</type>
            <name>resources</name>
            <anchorfile>qmediacontent.html</anchorfile>
            <anchor>resources</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGalleryItemRequest</name>
        <filename>qgalleryitemrequest.html</filename>
        <base>QGalleryAbstractRequest</base>
        <member kind="property" type="QStringList">
            <name>propertyNames</name>
            <anchorfile>qgalleryitemrequest.html</anchorfile>
            <anchor>propertyNames-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>live</name>
            <anchorfile>qgalleryitemrequest.html</anchorfile>
            <anchor>live-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>itemId</name>
            <anchorfile>qgalleryitemrequest.html</anchorfile>
            <anchor>itemId-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QGalleryItemList *">
            <name>item</name>
            <anchorfile>qgalleryitemrequest.html</anchorfile>
            <anchor>item-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryItemRequest</name>
            <anchorfile>qgalleryitemrequest.html</anchorfile>
            <anchor>QGalleryItemRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryItemRequest</name>
            <anchorfile>qgalleryitemrequest.html</anchorfile>
            <anchor>QGalleryItemRequest-2</anchor>
            <arglist>(QAbstractGallery * gallery, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGalleryItemRequest</name>
            <anchorfile>qgalleryitemrequest.html</anchorfile>
            <anchor>dtor.QGalleryItemRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>propertyNames</name>
            <anchorfile>qgalleryitemrequest.html</anchorfile>
            <anchor>propertyNames-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPropertyNames</name>
            <anchorfile>qgalleryitemrequest.html</anchorfile>
            <anchor>propertyNames-prop</anchor>
            <arglist>(const QStringList &amp; names)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLive</name>
            <anchorfile>qgalleryitemrequest.html</anchorfile>
            <anchor>live-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLive</name>
            <anchorfile>qgalleryitemrequest.html</anchorfile>
            <anchor>live-prop</anchor>
            <arglist>(bool live)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>itemId</name>
            <anchorfile>qgalleryitemrequest.html</anchorfile>
            <anchor>itemId-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemId</name>
            <anchorfile>qgalleryitemrequest.html</anchorfile>
            <anchor>itemId-prop</anchor>
            <arglist>(const QVariant &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGalleryItemList *</type>
            <name>item</name>
            <anchorfile>qgalleryitemrequest.html</anchorfile>
            <anchor>item-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>itemChanged</name>
            <anchorfile>qgalleryitemrequest.html</anchorfile>
            <anchor>itemChanged</anchor>
            <arglist>(QGalleryItemList * item)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setResponse</name>
            <anchorfile>qgalleryitemrequest.html</anchorfile>
            <anchor>setResponse</anchor>
            <arglist>(QGalleryAbstractResponse * response)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactFilter</name>
        <filename>qcontactfilter.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactFilter</name>
            <anchorfile>qcontactfilter.html</anchorfile>
            <anchor>QContactFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactFilter</name>
            <anchorfile>qcontactfilter.html</anchorfile>
            <anchor>dtor.QContactFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContactFilter</name>
            <anchorfile>qcontactfilter.html</anchorfile>
            <anchor>QContactFilter-2</anchor>
            <arglist>(const QContactFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactFilter &amp;</type>
            <name>operator=</name>
            <anchorfile>qcontactfilter.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QContactFilter &amp; other)</arglist>
        </member>
        <member kind="enum">
            <name>FilterType</name>
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContactDetailFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContactDetailRangeFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ChangeLogFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActionFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RelationshipFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IntersectionFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnionFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LocalIdFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DefaultFilter">
            <anchor>FilterType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>FilterType</type>
            <name>type</name>
            <anchorfile>qcontactfilter.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>MatchFlag</name>
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchExactly">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchContains">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchStartsWith">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchEndsWith">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchFixedString">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchCaseSensitive">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchPhoneNumber">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchKeypadCollation">
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QContactFilter::MatchFlag">
            <name>MatchFlags</name>
            <anchorfile>qcontactfilter.html</anchorfile>
            <anchor>MatchFlags-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcontactfilter.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QContactFilter &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcontactfilter.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QContactFilter &amp; other) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactAbstractRequest</name>
        <filename>qcontactabstractrequest.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContactAbstractRequest</name>
            <anchorfile>qcontactabstractrequest.html</anchorfile>
            <anchor>dtor.QContactAbstractRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InactiveState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ActiveState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CanceledState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FinishedState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>State</type>
            <name>state</name>
            <anchorfile>qcontactabstractrequest.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInactive</name>
            <anchorfile>qcontactabstractrequest.html</anchorfile>
            <anchor>isInactive</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qcontactabstractrequest.html</anchorfile>
            <anchor>isActive</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qcontactabstractrequest.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCanceled</name>
            <anchorfile>qcontactabstractrequest.html</anchorfile>
            <anchor>isCanceled</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactManager::Error</type>
            <name>error</name>
            <anchorfile>qcontactabstractrequest.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="enum">
            <name>RequestType</name>
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContactFetchRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContactLocalIdFetchRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContactRemoveRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ContactSaveRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DetailDefinitionFetchRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DetailDefinitionRemoveRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DetailDefinitionSaveRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RelationshipFetchRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RelationshipRemoveRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RelationshipSaveRequest">
            <anchor>RequestType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RequestType</type>
            <name>type</name>
            <anchorfile>qcontactabstractrequest.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactManager *</type>
            <name>manager</name>
            <anchorfile>qcontactabstractrequest.html</anchorfile>
            <anchor>manager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setManager</name>
            <anchorfile>qcontactabstractrequest.html</anchorfile>
            <anchor>setManager</anchor>
            <arglist>(QContactManager * manager)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>start</name>
            <anchorfile>qcontactabstractrequest.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>cancel</name>
            <anchorfile>qcontactabstractrequest.html</anchorfile>
            <anchor>cancel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForFinished</name>
            <anchorfile>qcontactabstractrequest.html</anchorfile>
            <anchor>waitForFinished</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qcontactabstractrequest.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QContactAbstractRequest::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resultsAvailable</name>
            <anchorfile>qcontactabstractrequest.html</anchorfile>
            <anchor>resultsAvailable</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGalleryCountRequest</name>
        <filename>qgallerycountrequest.html</filename>
        <base>QGalleryAbstractRequest</base>
        <member kind="property" type="bool">
            <name>live</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>live-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>itemType</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>itemType-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QGalleryFilter">
            <name>filter</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>filter-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QGalleryAbstractRequest::Scope">
            <name>scope</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>scope-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>scopeItemId</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>scopeItemId-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>count</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryCountRequest</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>QGalleryCountRequest</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGalleryCountRequest</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>QGalleryCountRequest-2</anchor>
            <arglist>(QAbstractGallery * gallery, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGalleryCountRequest</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>dtor.QGalleryCountRequest</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLive</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>live-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLive</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>live-prop</anchor>
            <arglist>(bool live)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>itemType</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>itemType-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setItemType</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>itemType-prop</anchor>
            <arglist>(const QString &amp; type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGalleryFilter</type>
            <name>filter</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>filter-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilter</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>filter-prop</anchor>
            <arglist>(const QGalleryFilter &amp; filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGalleryAbstractRequest::Scope</type>
            <name>scope</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>scope-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScope</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>scope-prop</anchor>
            <arglist>(QGalleryAbstractRequest::Scope scope)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>scopeItemId</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>scopeItemId-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScopeItemId</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>scopeItemId-prop</anchor>
            <arglist>(const QVariant &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>count</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>count-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>countChanged</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>countChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setResponse</name>
            <anchorfile>qgallerycountrequest.html</anchorfile>
            <anchor>setResponse</anchor>
            <arglist>(QGalleryAbstractResponse * response)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkIdFilter</name>
        <filename>qlandmarkidfilter.html</filename>
        <base>QLandmarkFilter</base>
        <member kind="enum">
            <name>MatchingScheme</name>
            <anchor>MatchingScheme-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchAll">
            <anchor>MatchingScheme-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MatchSubset">
            <anchor>MatchingScheme-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkIdFilter</name>
            <anchorfile>qlandmarkidfilter.html</anchorfile>
            <anchor>QLandmarkIdFilter</anchor>
            <arglist>(const QList&lt;QLandmarkId&gt; &amp; ids, MatchingScheme matchingScheme)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkIdFilter</name>
            <anchorfile>qlandmarkidfilter.html</anchorfile>
            <anchor>QLandmarkIdFilter-2</anchor>
            <arglist>(const QLandmarkFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QLandmarkIdFilter</name>
            <anchorfile>qlandmarkidfilter.html</anchorfile>
            <anchor>dtor.QLandmarkIdFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkId&gt;</type>
            <name>landmarkIds</name>
            <anchorfile>qlandmarkidfilter.html</anchorfile>
            <anchor>landmarkIds</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLandmarkIds</name>
            <anchorfile>qlandmarkidfilter.html</anchorfile>
            <anchor>setLandmarkIds</anchor>
            <arglist>(const QList&lt;QLandmarkId&gt; &amp; ids)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qlandmarkidfilter.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const QLandmarkId &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qlandmarkidfilter.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QLandmarkId &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qlandmarkidfilter.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>MatchingScheme</type>
            <name>matchingScheme</name>
            <anchorfile>qlandmarkidfilter.html</anchorfile>
            <anchor>matchingScheme</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatchingScheme</name>
            <anchorfile>qlandmarkidfilter.html</anchorfile>
            <anchor>setMatchingScheme</anchor>
            <arglist>(MatchingScheme matchingScheme)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkIdFilter &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qlandmarkidfilter.html</anchorfile>
            <anchor>operator&lt;&lt;</anchor>
            <arglist>(const QLandmarkId &amp; id)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSystemInfo</name>
        <filename>qsysteminfo.html</filename>
        <member kind="property" type="QString">
            <name>currentLanguage</name>
            <anchorfile>qsysteminfo.html</anchorfile>
            <anchor>currentLanguage-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QStringList">
            <name>availableLanguages</name>
            <anchorfile>qsysteminfo.html</anchorfile>
            <anchor>availableLanguages-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>currentCountryCode</name>
            <anchorfile>qsysteminfo.html</anchorfile>
            <anchor>currentCountryCode-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSystemInfo</name>
            <anchorfile>qsysteminfo.html</anchorfile>
            <anchor>QSystemInfo</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSystemInfo</name>
            <anchorfile>qsysteminfo.html</anchorfile>
            <anchor>dtor.QSystemInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>currentLanguage</name>
            <anchorfile>qsysteminfo.html</anchorfile>
            <anchor>currentLanguage-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>availableLanguages</name>
            <anchorfile>qsysteminfo.html</anchorfile>
            <anchor>availableLanguages-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>currentCountryCode</name>
            <anchorfile>qsysteminfo.html</anchorfile>
            <anchor>currentCountryCode-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="enum">
            <name>Version</name>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Os">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="QtCore">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Firmware">
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>version</name>
            <anchorfile>qsysteminfo.html</anchorfile>
            <anchor>version</anchor>
            <arglist>(QSystemInfo::Version type, const QString &amp; parameter)</arglist>
        </member>
        <member kind="enum">
            <name>Feature</name>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BluetoothFeature">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CameraFeature">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FmradioFeature">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IrFeature">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LedFeature">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MemcardFeature">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UsbFeature">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VibFeature">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WlanFeature">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SimFeature">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LocationFeature">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VideoOutFeature">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HapticsFeature">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasFeatureSupported</name>
            <anchorfile>qsysteminfo.html</anchorfile>
            <anchor>hasFeatureSupported</anchor>
            <arglist>(QSystemInfo::Feature feature)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentLanguageChanged</name>
            <anchorfile>qsysteminfo.html</anchorfile>
            <anchor>currentLanguageChanged</anchor>
            <arglist>(const QString &amp; lang)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QProximityReading</name>
        <filename>qproximityreading.html</filename>
        <base>QSensorReading</base>
        <member kind="property" type="bool">
            <name>close</name>
            <anchorfile>qproximityreading.html</anchorfile>
            <anchor>close-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>close</name>
            <anchorfile>qproximityreading.html</anchorfile>
            <anchor>close-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClose</name>
            <anchorfile>qproximityreading.html</anchorfile>
            <anchor>setClose</anchor>
            <arglist>(bool close)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QProximityFilter</name>
        <filename>qproximityfilter.html</filename>
        <base>QSensorFilter</base>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>filter</name>
            <anchorfile>qproximityfilter.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>(QProximityReading * reading) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QProximitySensor</name>
        <filename>qproximitysensor.html</filename>
        <base>QSensor</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QProximitySensor</name>
            <anchorfile>qproximitysensor.html</anchorfile>
            <anchor>QProximitySensor</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QProximitySensor</name>
            <anchorfile>qproximitysensor.html</anchorfile>
            <anchor>dtor.QProximitySensor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QProximityReading *</type>
            <name>reading</name>
            <anchorfile>qproximitysensor.html</anchorfile>
            <anchor>reading</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoSearchManagerEngine</name>
        <filename>qgeosearchmanagerengine.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoSearchManagerEngine</name>
            <anchorfile>qgeosearchmanagerengine.html</anchorfile>
            <anchor>QGeoSearchManagerEngine</anchor>
            <arglist>(const QMap&lt;QString, QString&gt; &amp; parameters, QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeoSearchManagerEngine</name>
            <anchorfile>qgeosearchmanagerengine.html</anchorfile>
            <anchor>dtor.QGeoSearchManagerEngine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerName</name>
            <anchorfile>qgeosearchmanagerengine.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;QString, QString&gt;</type>
            <name>managerParameters</name>
            <anchorfile>qgeosearchmanagerengine.html</anchorfile>
            <anchor>managerParameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>managerVersion</name>
            <anchorfile>qgeosearchmanagerengine.html</anchorfile>
            <anchor>managerVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QGeoSearchReply *</type>
            <name>geocode</name>
            <anchorfile>qgeosearchmanagerengine.html</anchorfile>
            <anchor>geocode</anchor>
            <arglist>(const QGeoAddress &amp; address, const QGeoBoundingBox &amp; bounds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QGeoSearchReply *</type>
            <name>geocode</name>
            <anchorfile>qgeosearchmanagerengine.html</anchorfile>
            <anchor>geocode-2</anchor>
            <arglist>(const QGeoCoordinate &amp; coordinate, const QGeoBoundingBox &amp; bounds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QGeoSearchReply *</type>
            <name>placeSearch</name>
            <anchorfile>qgeosearchmanagerengine.html</anchorfile>
            <anchor>placeSearch</anchor>
            <arglist>(const QString &amp; searchString, QFlags&lt;QGeoSearchManager::SearchType&gt; searchTypes, const QGeoBoundingBox &amp; bounds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsGeocoding</name>
            <anchorfile>qgeosearchmanagerengine.html</anchorfile>
            <anchor>supportsGeocoding</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoSearchManager::SearchTypes</type>
            <name>supportedSearchTypes</name>
            <anchorfile>qgeosearchmanagerengine.html</anchorfile>
            <anchor>supportedSearchTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkManager *</type>
            <name>defaultLandmarkManager</name>
            <anchorfile>qgeosearchmanagerengine.html</anchorfile>
            <anchor>defaultLandmarkManager</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAdditionalLandmarkManagers</name>
            <anchorfile>qgeosearchmanagerengine.html</anchorfile>
            <anchor>setAdditionalLandmarkManagers</anchor>
            <arglist>(const QList&lt;QLandmarkManager *&gt; &amp; landmarkManagers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QLandmarkManager *&gt;</type>
            <name>additionalLandmarkManagers</name>
            <anchorfile>qgeosearchmanagerengine.html</anchorfile>
            <anchor>additionalLandmarkManagers</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAdditionalLandmarkManager</name>
            <anchorfile>qgeosearchmanagerengine.html</anchorfile>
            <anchor>addAdditionalLandmarkManager</anchor>
            <arglist>(QLandmarkManager * landmarkManager)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qgeosearchmanagerengine.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>(QGeoSearchReply * reply)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qgeosearchmanagerengine.html</anchorfile>
            <anchor>error</anchor>
            <arglist>(QGeoSearchReply * reply, QGeoSearchReply::Error error, QString errorString)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultLandmarkManager</name>
            <anchorfile>qgeosearchmanagerengine.html</anchorfile>
            <anchor>setDefaultLandmarkManager</anchor>
            <arglist>(QLandmarkManager * landmarkManager)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSupportsGeocoding</name>
            <anchorfile>qgeosearchmanagerengine.html</anchorfile>
            <anchor>setSupportsGeocoding</anchor>
            <arglist>(bool supported)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setSupportedSearchTypes</name>
            <anchorfile>qgeosearchmanagerengine.html</anchorfile>
            <anchor>setSupportedSearchTypes</anchor>
            <arglist>(QFlags&lt;QGeoSearchManager::SearchType&gt; searchTypes)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFeedbackHapticsInterface</name>
        <filename>qfeedbackhapticsinterface.html</filename>
        <member kind="enum">
            <name>EffectProperty</name>
            <anchor>EffectProperty-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Duration">
            <anchor>EffectProperty-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Intensity">
            <anchor>EffectProperty-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AttackTime">
            <anchor>EffectProperty-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="AttackIntensity">
            <anchor>EffectProperty-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FadeTime">
            <anchor>EffectProperty-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FadeIntensity">
            <anchor>EffectProperty-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Period">
            <anchor>EffectProperty-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ActuatorProperty</name>
            <anchor>ActuatorProperty-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Name">
            <anchor>ActuatorProperty-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="State">
            <anchor>ActuatorProperty-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Enabled">
            <anchor>ActuatorProperty-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;QFeedbackActuator&gt;</type>
            <name>actuators</name>
            <anchorfile>qfeedbackhapticsinterface.html</anchorfile>
            <anchor>actuators</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QFeedbackHapticsInterface</name>
            <anchorfile>qfeedbackhapticsinterface.html</anchorfile>
            <anchor>dtor.QFeedbackHapticsInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual PluginPriority</type>
            <name>pluginPriority</name>
            <anchorfile>qfeedbackhapticsinterface.html</anchorfile>
            <anchor>pluginPriority</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setActuatorProperty</name>
            <anchorfile>qfeedbackhapticsinterface.html</anchorfile>
            <anchor>setActuatorProperty</anchor>
            <arglist>(const QFeedbackActuator &amp; actuator, ActuatorProperty property, const QVariant &amp; priority) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QVariant</type>
            <name>actuatorProperty</name>
            <anchorfile>qfeedbackhapticsinterface.html</anchorfile>
            <anchor>actuatorProperty</anchor>
            <arglist>(const QFeedbackActuator &amp; actuator, ActuatorProperty property) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>isActuatorCapabilitySupported</name>
            <anchorfile>qfeedbackhapticsinterface.html</anchorfile>
            <anchor>isActuatorCapabilitySupported</anchor>
            <arglist>(const QFeedbackActuator &amp; actuator, QFeedbackActuator::Capability capability) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>updateEffectProperty</name>
            <anchorfile>qfeedbackhapticsinterface.html</anchorfile>
            <anchor>updateEffectProperty</anchor>
            <arglist>(const QFeedbackHapticsEffect * effect, EffectProperty property) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setEffectState</name>
            <anchorfile>qfeedbackhapticsinterface.html</anchorfile>
            <anchor>setEffectState</anchor>
            <arglist>(const QFeedbackHapticsEffect * effect, QFeedbackEffect::State state) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QFeedbackEffect::State</type>
            <name>effectState</name>
            <anchorfile>qfeedbackhapticsinterface.html</anchorfile>
            <anchor>effectState</anchor>
            <arglist>(const QFeedbackHapticsEffect * effect) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFeedbackHapticsInterface *</type>
            <name>instance</name>
            <anchorfile>qfeedbackhapticsinterface.html</anchorfile>
            <anchor>instance</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QFeedbackActuator</type>
            <name>createFeedbackActuator</name>
            <anchorfile>qfeedbackhapticsinterface.html</anchorfile>
            <anchor>createFeedbackActuator</anchor>
            <arglist>(int id)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFeedbackThemeInterface</name>
        <filename>qfeedbackthemeinterface.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QFeedbackThemeInterface</name>
            <anchorfile>qfeedbackthemeinterface.html</anchorfile>
            <anchor>dtor.QFeedbackThemeInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual PluginPriority</type>
            <name>pluginPriority</name>
            <anchorfile>qfeedbackthemeinterface.html</anchorfile>
            <anchor>pluginPriority</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual bool</type>
            <name>play</name>
            <anchorfile>qfeedbackthemeinterface.html</anchorfile>
            <anchor>play</anchor>
            <arglist>(QFeedbackEffect::ThemeEffect effect) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFeedbackThemeInterface *</type>
            <name>instance</name>
            <anchorfile>qfeedbackthemeinterface.html</anchorfile>
            <anchor>instance</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFeedbackFileInterface</name>
        <filename>qfeedbackfileinterface.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QFeedbackFileInterface</name>
            <anchorfile>qfeedbackfileinterface.html</anchorfile>
            <anchor>dtor.QFeedbackFileInterface</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setLoaded</name>
            <anchorfile>qfeedbackfileinterface.html</anchorfile>
            <anchor>setLoaded</anchor>
            <arglist>(QFeedbackFileEffect * effect, bool value) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setEffectState</name>
            <anchorfile>qfeedbackfileinterface.html</anchorfile>
            <anchor>setEffectState</anchor>
            <arglist>(QFeedbackFileEffect * effect, QFeedbackEffect::State state) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QFeedbackEffect::State</type>
            <name>effectState</name>
            <anchorfile>qfeedbackfileinterface.html</anchorfile>
            <anchor>effectState</anchor>
            <arglist>(const QFeedbackFileEffect * effect) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual int</type>
            <name>effectDuration</name>
            <anchorfile>qfeedbackfileinterface.html</anchorfile>
            <anchor>effectDuration</anchor>
            <arglist>(const QFeedbackFileEffect * effect) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QStringList</type>
            <name>supportedMimeTypes</name>
            <anchorfile>qfeedbackfileinterface.html</anchorfile>
            <anchor>supportedMimeTypes</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFeedbackFileInterface *</type>
            <name>instance</name>
            <anchorfile>qfeedbackfileinterface.html</anchorfile>
            <anchor>instance</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>void</type>
            <name>reportLoadFinished</name>
            <anchorfile>qfeedbackfileinterface.html</anchorfile>
            <anchor>reportLoadFinished</anchor>
            <arglist>(QFeedbackFileEffect * effect, bool success)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QServiceInterfaceDescriptor</name>
        <filename>qserviceinterfacedescriptor.html</filename>
        <member kind="enum">
            <name>Attribute</name>
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Capabilities">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Location">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ServiceDescription">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InterfaceDescription">
            <anchor>Attribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QServiceInterfaceDescriptor</name>
            <anchorfile>qserviceinterfacedescriptor.html</anchorfile>
            <anchor>QServiceInterfaceDescriptor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QServiceInterfaceDescriptor</name>
            <anchorfile>qserviceinterfacedescriptor.html</anchorfile>
            <anchor>QServiceInterfaceDescriptor-2</anchor>
            <arglist>(const QServiceInterfaceDescriptor &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QServiceInterfaceDescriptor</name>
            <anchorfile>qserviceinterfacedescriptor.html</anchorfile>
            <anchor>dtor.QServiceInterfaceDescriptor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QServiceInterfaceDescriptor &amp;</type>
            <name>operator=</name>
            <anchorfile>qserviceinterfacedescriptor.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QServiceInterfaceDescriptor &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qserviceinterfacedescriptor.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QServiceInterfaceDescriptor &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qserviceinterfacedescriptor.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QServiceInterfaceDescriptor &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>serviceName</name>
            <anchorfile>qserviceinterfacedescriptor.html</anchorfile>
            <anchor>serviceName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>interfaceName</name>
            <anchorfile>qserviceinterfacedescriptor.html</anchorfile>
            <anchor>interfaceName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>majorVersion</name>
            <anchorfile>qserviceinterfacedescriptor.html</anchorfile>
            <anchor>majorVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minorVersion</name>
            <anchorfile>qserviceinterfacedescriptor.html</anchorfile>
            <anchor>minorVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qserviceinterfacedescriptor.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QService::Scope</type>
            <name>scope</name>
            <anchorfile>qserviceinterfacedescriptor.html</anchorfile>
            <anchor>scope</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>attribute</name>
            <anchorfile>qserviceinterfacedescriptor.html</anchorfile>
            <anchor>attribute</anchor>
            <arglist>(QServiceInterfaceDescriptor::Attribute which) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>customAttribute</name>
            <anchorfile>qserviceinterfacedescriptor.html</anchorfile>
            <anchor>customAttribute</anchor>
            <arglist>(const QString &amp; which) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>customAttributes</name>
            <anchorfile>qserviceinterfacedescriptor.html</anchorfile>
            <anchor>customAttributes</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAudioEndpointSelector</name>
        <filename>qaudioendpointselector.html</filename>
        <base>QMediaControl</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAudioEndpointSelector</name>
            <anchorfile>qaudioendpointselector.html</anchorfile>
            <anchor>dtor.QAudioEndpointSelector</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QList&lt;QString&gt;</type>
            <name>availableEndpoints</name>
            <anchorfile>qaudioendpointselector.html</anchorfile>
            <anchor>availableEndpoints</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>endpointDescription</name>
            <anchorfile>qaudioendpointselector.html</anchorfile>
            <anchor>endpointDescription</anchor>
            <arglist>(const QString &amp; name) const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>defaultEndpoint</name>
            <anchorfile>qaudioendpointselector.html</anchorfile>
            <anchor>defaultEndpoint</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual QString</type>
            <name>activeEndpoint</name>
            <anchorfile>qaudioendpointselector.html</anchorfile>
            <anchor>activeEndpoint</anchor>
            <arglist>() const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtual="pure" static="no">
            <type>virtual void</type>
            <name>setActiveEndpoint</name>
            <anchorfile>qaudioendpointselector.html</anchorfile>
            <anchor>setActiveEndpoint</anchor>
            <arglist>(const QString &amp; name) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activeEndpointChanged</name>
            <anchorfile>qaudioendpointselector.html</anchorfile>
            <anchor>activeEndpointChanged</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>availableEndpointsChanged</name>
            <anchorfile>qaudioendpointselector.html</anchorfile>
            <anchor>availableEndpointsChanged</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QAudioEndpointSelector</name>
            <anchorfile>qaudioendpointselector.html</anchorfile>
            <anchor>QAudioEndpointSelector</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOrganizerItemDetailRangeFilter</name>
        <filename>qorganizeritemdetailrangefilter.html</filename>
        <base>QOrganizerItemFilter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemDetailRangeFilter</name>
            <anchorfile>qorganizeritemdetailrangefilter.html</anchorfile>
            <anchor>QOrganizerItemDetailRangeFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOrganizerItemDetailRangeFilter</name>
            <anchorfile>qorganizeritemdetailrangefilter.html</anchorfile>
            <anchor>QOrganizerItemDetailRangeFilter-2</anchor>
            <arglist>(const QOrganizerItemFilter &amp; other)</arglist>
        </member>
        <member kind="enum">
            <name>RangeFlag</name>
            <anchor>RangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IncludeLower">
            <anchor>RangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IncludeUpper">
            <anchor>RangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExcludeLower">
            <anchor>RangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ExcludeUpper">
            <anchor>RangeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QOrganizerItemDetailRangeFilter::RangeFlag">
            <name>RangeFlags</name>
            <anchorfile>qorganizeritemdetailrangefilter.html</anchorfile>
            <anchor>RangeFlags-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDetailDefinitionName</name>
            <anchorfile>qorganizeritemdetailrangefilter.html</anchorfile>
            <anchor>setDetailDefinitionName</anchor>
            <arglist>(const QString &amp; definitionName, const QString &amp; fieldName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMatchFlags</name>
            <anchorfile>qorganizeritemdetailrangefilter.html</anchorfile>
            <anchor>setMatchFlags</anchor>
            <arglist>(QFlags&lt;QOrganizerItemFilter::MatchFlag&gt; flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRange</name>
            <anchorfile>qorganizeritemdetailrangefilter.html</anchorfile>
            <anchor>setRange</anchor>
            <arglist>(const QVariant &amp; min, const QVariant &amp; max, QFlags&lt;QOrganizerItemDetailRangeFilter::RangeFlag&gt; flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>detailDefinitionName</name>
            <anchorfile>qorganizeritemdetailrangefilter.html</anchorfile>
            <anchor>detailDefinitionName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>detailFieldName</name>
            <anchorfile>qorganizeritemdetailrangefilter.html</anchorfile>
            <anchor>detailFieldName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOrganizerItemFilter::MatchFlags</type>
            <name>matchFlags</name>
            <anchorfile>qorganizeritemdetailrangefilter.html</anchorfile>
            <anchor>matchFlags</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>minValue</name>
            <anchorfile>qorganizeritemdetailrangefilter.html</anchorfile>
            <anchor>minValue</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>maxValue</name>
            <anchorfile>qorganizeritemdetailrangefilter.html</anchorfile>
            <anchor>maxValue</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RangeFlags</type>
            <name>rangeFlags</name>
            <anchorfile>qorganizeritemdetailrangefilter.html</anchorfile>
            <anchor>rangeFlags</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaImageViewer</name>
        <filename>qmediaimageviewer.html</filename>
        <base>QMediaObject</base>
        <member kind="property" type="State">
            <name>state</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="MediaStatus">
            <name>mediaStatus</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>mediaStatus-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QMediaContent">
            <name>media</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>media-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>timeout</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>elapsedTime</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>elapsedTime-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>State</name>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StoppedState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PlayingState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PausedState">
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>MediaStatus</name>
            <anchor>MediaStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoMedia">
            <anchor>MediaStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LoadingMedia">
            <anchor>MediaStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LoadedMedia">
            <anchor>MediaStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InvalidMedia">
            <anchor>MediaStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaImageViewer</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>QMediaImageViewer</anchor>
            <arglist>(QObject * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMediaImageViewer</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>dtor.QMediaImageViewer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>State</type>
            <name>state</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>MediaStatus</type>
            <name>mediaStatus</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>mediaStatus-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaContent</type>
            <name>media</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>media-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaPlaylist *</type>
            <name>playlist</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>playlist</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>timeout</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>elapsedTime</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>elapsedTime-prop</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMedia</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>media-prop</anchor>
            <arglist>(const QMediaContent &amp; media)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPlaylist</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>setPlaylist</anchor>
            <arglist>(QMediaPlaylist * playlist)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>play</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>play</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pause</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>pause</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimeout</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>timeout-prop</anchor>
            <arglist>(int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QMediaImageViewer::State state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mediaStatusChanged</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>mediaStatusChanged</anchor>
            <arglist>(QMediaImageViewer::MediaStatus status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mediaChanged</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>mediaChanged</anchor>
            <arglist>(const QMediaContent &amp; media)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>elapsedTimeChanged</name>
            <anchorfile>qmediaimageviewer.html</anchorfile>
            <anchor>elapsedTimeChanged</anchor>
            <arglist>(int time)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkCategory</name>
        <filename>qlandmarkcategory.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkCategory</name>
            <anchorfile>qlandmarkcategory.html</anchorfile>
            <anchor>QLandmarkCategory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkCategory</name>
            <anchorfile>qlandmarkcategory.html</anchorfile>
            <anchor>QLandmarkCategory-2</anchor>
            <arglist>(const QLandmarkCategory &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLandmarkCategory</name>
            <anchorfile>qlandmarkcategory.html</anchorfile>
            <anchor>dtor.QLandmarkCategory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkCategory &amp;</type>
            <name>operator=</name>
            <anchorfile>qlandmarkcategory.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QLandmarkCategory &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlandmarkcategory.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QLandmarkCategory &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlandmarkcategory.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QLandmarkCategory &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qlandmarkcategory.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qlandmarkcategory.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>iconUrl</name>
            <anchorfile>qlandmarkcategory.html</anchorfile>
            <anchor>iconUrl</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIconUrl</name>
            <anchorfile>qlandmarkcategory.html</anchorfile>
            <anchor>setIconUrl</anchor>
            <arglist>(const QUrl &amp; url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>description</name>
            <anchorfile>qlandmarkcategory.html</anchorfile>
            <anchor>description</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDescription</name>
            <anchorfile>qlandmarkcategory.html</anchorfile>
            <anchor>setDescription</anchor>
            <arglist>(const QString &amp; description)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLandmarkCategoryId</type>
            <name>categoryId</name>
            <anchorfile>qlandmarkcategory.html</anchorfile>
            <anchor>categoryId</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCategoryId</name>
            <anchorfile>qlandmarkcategory.html</anchorfile>
            <anchor>setCategoryId</anchor>
            <arglist>(const QLandmarkCategoryId &amp; id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>attribute</name>
            <anchorfile>qlandmarkcategory.html</anchorfile>
            <anchor>attribute</anchor>
            <arglist>(const QString &amp; key, const QVariant &amp; defaultValue) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttribute</name>
            <anchorfile>qlandmarkcategory.html</anchorfile>
            <anchor>setAttribute</anchor>
            <arglist>(const QString &amp; key, const QVariant &amp; value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>attributeKeys</name>
            <anchorfile>qlandmarkcategory.html</anchorfile>
            <anchor>attributeKeys</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qlandmarkcategory.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNetworkConfiguration</name>
        <filename>qnetworkconfiguration.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkConfiguration</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>QNetworkConfiguration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNetworkConfiguration</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>QNetworkConfiguration-2</anchor>
            <arglist>(const QNetworkConfiguration &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNetworkConfiguration &amp;</type>
            <name>operator=</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QNetworkConfiguration &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNetworkConfiguration</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>dtor.QNetworkConfiguration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>operator==</anchor>
            <arglist>(const QNetworkConfiguration &amp; other) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>operator!=</anchor>
            <arglist>(const QNetworkConfiguration &amp; other) const</arglist>
        </member>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="InternetAccessPoint">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ServiceNetwork">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UserChoice">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Invalid">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Purpose</name>
            <anchor>Purpose-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownPurpose">
            <anchor>Purpose-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PublicPurpose">
            <anchor>Purpose-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PrivatePurpose">
            <anchor>Purpose-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ServiceSpecificPurpose">
            <anchor>Purpose-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StateFlag</name>
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Undefined">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Defined">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Discovered">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Active">
            <anchor>StateFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QNetworkConfiguration::StateFlag">
            <name>StateFlags</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>StateFlags-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>StateFlags</type>
            <name>state</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Type</type>
            <name>type</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Purpose</type>
            <name>purpose</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>purpose</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>bearerName</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>bearerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>identifier</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>identifier</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRoamingAvailable</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>isRoamingAvailable</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QNetworkConfiguration&gt;</type>
            <name>children</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>children</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qnetworkconfiguration.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoRoutingManager</name>
        <filename>qgeoroutingmanager.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QGeoRoutingManager</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>dtor.QGeoRoutingManager</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>managerName</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>managerName</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;QString, QString&gt;</type>
            <name>managerParameters</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>managerParameters</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>managerVersion</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>managerVersion</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteReply *</type>
            <name>calculateRoute</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>calculateRoute</anchor>
            <arglist>(const QGeoRouteRequest &amp; request)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteReply *</type>
            <name>updateRoute</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>updateRoute</anchor>
            <arglist>(const QGeoRoute &amp; route, const QGeoCoordinate &amp; position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsRouteUpdates</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>supportsRouteUpdates</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsAlternativeRoutes</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>supportsAlternativeRoutes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>supportsExcludeAreas</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>supportsExcludeAreas</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::TravelModes</type>
            <name>supportedTravelModes</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>supportedTravelModes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::AvoidFeatureTypes</type>
            <name>supportedAvoidFeatureTypes</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>supportedAvoidFeatureTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::RouteOptimizations</type>
            <name>supportedRouteOptimizations</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>supportedRouteOptimizations</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::SegmentDetails</type>
            <name>supportedSegmentDetails</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>supportedSegmentDetails</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoRouteRequest::InstructionDetails</type>
            <name>supportedInstructionDetails</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>supportedInstructionDetails</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>(QGeoRouteReply * reply)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>error</name>
            <anchorfile>qgeoroutingmanager.html</anchorfile>
            <anchor>error</anchor>
            <arglist>(QGeoRouteReply * reply, QGeoRouteReply::Error error, QString errorString)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLandmarkNameFilter</name>
        <filename>qlandmarknamefilter.html</filename>
        <base>QLandmarkFilter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkNameFilter</name>
            <anchorfile>qlandmarknamefilter.html</anchorfile>
            <anchor>QLandmarkNameFilter</anchor>
            <arglist>(const QString &amp; name, Qt::CaseSensitivity sensitivity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLandmarkNameFilter</name>
            <anchorfile>qlandmarknamefilter.html</anchorfile>
            <anchor>QLandmarkNameFilter-2</anchor>
            <arglist>(const QLandmarkFilter &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QLandmarkNameFilter</name>
            <anchorfile>qlandmarknamefilter.html</anchorfile>
            <anchor>dtor.QLandmarkNameFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qlandmarknamefilter.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qlandmarknamefilter.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QString &amp; name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CaseSensitivity</type>
            <name>caseSensitivity</name>
            <anchorfile>qlandmarknamefilter.html</anchorfile>
            <anchor>caseSensitivity</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCaseSensitivity</name>
            <anchorfile>qlandmarknamefilter.html</anchorfile>
            <anchor>setCaseSensitivity</anchor>
            <arglist>(Qt::CaseSensitivity caseSensitivity)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGeoMapWidget</name>
        <filename>qgeomapwidget.html</filename>
        <member kind="enum">
            <name>MapType</name>
            <anchor>MapType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoMap">
            <anchor>MapType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StreetMap">
            <anchor>MapType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SatelliteMapDay">
            <anchor>MapType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SatelliteMapNight">
            <anchor>MapType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TerrainMap">
            <anchor>MapType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGeoMapWidget</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>QGeoMapWidget</anchor>
            <arglist>(QGeoMappingManager * manager, QGraphicsItem * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QGeoMapWidget</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>dtor.QGeoMapWidget</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPainterPath</type>
            <name>shape</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>shape</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>paint</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>paint</anchor>
            <arglist>(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>minimumZoomLevel</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>minimumZoomLevel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>maximumZoomLevel</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>maximumZoomLevel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setZoomLevel</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>setZoomLevel</anchor>
            <arglist>(qreal zoomLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>zoomLevel</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>zoomLevel</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pan</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>pan</anchor>
            <arglist>(int dx, int dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCenter</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>setCenter</anchor>
            <arglist>(const QGeoCoordinate &amp; center)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>center</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>center</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;MapType&gt;</type>
            <name>supportedMapTypes</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>supportedMapTypes</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMapType</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>setMapType</anchor>
            <arglist>(MapType mapType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>MapType</type>
            <name>mapType</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>mapType</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addMapObject</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>addMapObject</anchor>
            <arglist>(QGeoMapObject * mapObject)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeMapObject</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>removeMapObject</anchor>
            <arglist>(QGeoMapObject * mapObject)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGeoMapObject *&gt;</type>
            <name>mapObjects</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>mapObjects</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGeoMapObject *&gt;</type>
            <name>visibleMapObjects</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>visibleMapObjects</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGeoMapObject *&gt;</type>
            <name>mapObjectsAtScreenPosition</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>mapObjectsAtScreenPosition</anchor>
            <arglist>(const QPointF &amp; screenPosition)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QGeoMapObject *&gt;</type>
            <name>mapObjectsInScreenRect</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>mapObjectsInScreenRect</anchor>
            <arglist>(const QRectF &amp; screenRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>coordinateToScreenPosition</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>coordinateToScreenPosition</anchor>
            <arglist>(const QGeoCoordinate &amp; coordinate) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGeoCoordinate</type>
            <name>screenPositionToCoordinate</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>screenPositionToCoordinate</anchor>
            <arglist>(QPointF screenPosition) const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>resizeEvent</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>resizeEvent</anchor>
            <arglist>(QGraphicsSceneResizeEvent * event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>zoomLevelChanged</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>zoomLevelChanged</anchor>
            <arglist>(qreal zoomLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>centered</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>centered</anchor>
            <arglist>(const QGeoCoordinate &amp; coordinate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mapTypeChanged</name>
            <anchorfile>qgeomapwidget.html</anchorfile>
            <anchor>mapTypeChanged</anchor>
            <arglist>(MapType mapType)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaTimeInterval</name>
        <filename>qmediatimeinterval.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaTimeInterval</name>
            <anchorfile>qmediatimeinterval.html</anchorfile>
            <anchor>QMediaTimeInterval</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaTimeInterval</name>
            <anchorfile>qmediatimeinterval.html</anchorfile>
            <anchor>QMediaTimeInterval-2</anchor>
            <arglist>(qint64 start, qint64 end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaTimeInterval</name>
            <anchorfile>qmediatimeinterval.html</anchorfile>
            <anchor>QMediaTimeInterval-3</anchor>
            <arglist>(const QMediaTimeInterval &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>start</name>
            <anchorfile>qmediatimeinterval.html</anchorfile>
            <anchor>start</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>end</name>
            <anchorfile>qmediatimeinterval.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qmediatimeinterval.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(qint64 time) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNormal</name>
            <anchorfile>qmediatimeinterval.html</anchorfile>
            <anchor>isNormal</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaTimeInterval</type>
            <name>normalized</name>
            <anchorfile>qmediatimeinterval.html</anchorfile>
            <anchor>normalized</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaTimeInterval</type>
            <name>translated</name>
            <anchorfile>qmediatimeinterval.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(qint64 offset) const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMediaTimeRange</name>
        <filename>qmediatimerange.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaTimeRange</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>QMediaTimeRange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaTimeRange</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>QMediaTimeRange-2</anchor>
            <arglist>(qint64 start, qint64 end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaTimeRange</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>QMediaTimeRange-3</anchor>
            <arglist>(const QMediaTimeInterval &amp; interval)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMediaTimeRange</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>QMediaTimeRange-4</anchor>
            <arglist>(const QMediaTimeRange &amp; range)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMediaTimeRange</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>dtor.QMediaTimeRange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaTimeRange &amp;</type>
            <name>operator=</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>operator=</anchor>
            <arglist>(const QMediaTimeRange &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaTimeRange &amp;</type>
            <name>operator=</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>operator=-2</anchor>
            <arglist>(const QMediaTimeInterval &amp; interval)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>earliestTime</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>earliestTime</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>latestTime</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>latestTime</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QMediaTimeInterval&gt;</type>
            <name>intervals</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>intervals</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isContinuous</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>isContinuous</anchor>
            <arglist>() const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(qint64 time) const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addInterval</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>addInterval-2</anchor>
            <arglist>(qint64 start, qint64 end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addInterval</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>addInterval</anchor>
            <arglist>(const QMediaTimeInterval &amp; interval)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addTimeRange</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>addTimeRange</anchor>
            <arglist>(const QMediaTimeRange &amp; range)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeInterval</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>removeInterval-2</anchor>
            <arglist>(qint64 start, qint64 end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeInterval</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>removeInterval</anchor>
            <arglist>(const QMediaTimeInterval &amp; interval)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeTimeRange</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>removeTimeRange</anchor>
            <arglist>(const QMediaTimeRange &amp; range)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaTimeRange &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>operator+=</anchor>
            <arglist>(const QMediaTimeRange &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaTimeRange &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>operator+=-2</anchor>
            <arglist>(const QMediaTimeInterval &amp; interval)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaTimeRange &amp;</type>
            <name>operator-=</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>operator-=</anchor>
            <arglist>(const QMediaTimeRange &amp; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMediaTimeRange &amp;</type>
            <name>operator-=</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>operator-=-2</anchor>
            <arglist>(const QMediaTimeInterval &amp; interval)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qmediatimerange.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
</tagfile>
