#!/bin/sh

#############################################################################
##
## Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
## All rights reserved.
## Contact: Nokia Corporation (qt-info@nokia.com)
##
## This file is the build configuration utility of the Qt Toolkit.
##
## $QT_BEGIN_LICENSE:LGPL$
## No Commercial Usage
## This file contains pre-release code and may not be distributed.
## You may use this file in accordance with the terms and conditions
## contained in the Technology Preview License Agreement accompanying
## this package.
##
## GNU Lesser General Public License Usage
## Alternatively, this file may be used under the terms of the GNU Lesser
## General Public License version 2.1 as published by the Free Software
## Foundation and appearing in the file LICENSE.LGPL included in the
## packaging of this file.  Please review the following information to
## ensure the GNU Lesser General Public License version 2.1 requirements
## will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
##
## In addition, as a special exception, Nokia gives you certain additional
## rights.  These rights are described in the Nokia Qt LGPL Exception
## version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
##
## If you have questions regarding the use of this file, please contact
## Nokia at qt-info@nokia.com.
##
##
##
##
##
##
##
##
## $QT_END_LICENSE$
##
#############################################################################


set -e

#-------------------------------------------------------------------------------
#Design assumptions:
## The name of the test application binary is tst_<subdir_where_test_is_located>
## The name of the project file passed to the scrpt is <package name>.<ext>
##     The extension string is not relevant. Typical values: .pri, .pro, .conf
#-------------------------------------------------------------------------------


xmlInstallDir="usr/share"

testSuiteHeader="testsuite_header.txt"
testSuiteFooter="testsuite_footer.txt"
testSetTemplate="testset.txt"

#-------------------------------------------------------------------------------
#Parameters: $1 the project file where the tests are defined
#-------------------------------------------------------------------------------
install_tests()
{
    #derive the package name from the file name
    extension=".$(echo $1 | awk -F"." '{print $NF}')"
    packageName=$(basename "$1" "$extension")

    installFile="$packageDir/${packageName}.install"

    testDirList=

    while read line; do case "$line" in
	    SUBDIRS*)
		testDirList=$(echo $line | sed -n -e "s/SUBDIRS.*= *\(.*\)$/\1/p")
		;;
	esac; done < "$1"

    if [ -z "$testDirList" ]; then
	return 0
    fi
    mkdir -p $installDir/$xmlInstallDir/$packageName
    xmlFile="$installDir/$xmlInstallDir/$packageName/tests.xml"
    # the blacklist file is automaticly generated by maemo_tests.prf
    blacklistFile="$installDir/$xmlInstallDir/$packageName/blacklist.txt"

    rm -f "$installFile"

    begin_test_suite $xmlFile

    for testDir in $testDirList; do
	export QTM_TEST_INSTALL_FILE="$installFile"
	export QTM_TEST_BLACKLIST_FILE="$blacklistFile"
	INSTALL_ROOT="$installDir" make -C tests/auto/$testDir installtests
    done

	# only run applications, not test data or plugins (which will have a '.' in the name)
	grep -v -F . "$installFile" | while read testApp; do
	add_test_set "$testApp" "$xmlFile"
    done

    end_test_suite $xmlFile

    echo "$xmlInstallDir/$packageName/tests.xml" >> "$installFile"

    # remove the black list file to ensure that it is not packaged
    if [ -r "$blacklistFile" ] ; then rm "$blacklistFile"; fi
}

#-------------------------------------------------------------------------------
#Parameters: $1 the xml output file'
#-------------------------------------------------------------------------------
begin_test_suite()
{
    optstr="/<suite/s;name=\"[^\"]*\";name=\"$packageName\";g"
    template="$templateDir/$testSuiteHeader" 
    runsed $optstr $template > "$1"
}

#Parameters: $1 the xml output file
end_test_suite()
{
    cat "$templateDir/$testSuiteFooter" >> "$1"
}

#-------------------------------------------------------------------------------
#Parameters: $1 the name of the test application
#Parameters: $2 the xml output file
#-------------------------------------------------------------------------------
add_test_set()
{
    templateSetFile="$templateDir/$testSetTemplate"
    testSuiteName=$(basename $1)
    insignificantTest="false"
    if [ -r "$blacklistFile" ]; then
        # a test is insignificant if it is listed in the black list file(blacklisted)
        grep -q -e "^$1$" $blacklistFile > /dev/null 2>&1 && insignificantTest="true"
    fi
    add_set_name "$testSuiteName" "$templateSetFile" |add_description "$testSuiteName" |add_case_name "$testSuiteName" |add_insignificant_test "$insignificantTest" | add_step "$1"  >> "$2"
}

add_set_name()
{
    optstr="/<set/s;name=\"[^\"]*\";name=\"${packageName}_$1\";g"
    runsed "$optstr" "$2"
}

add_case_name()
{
    optstr="/<case/s;name=\"[^\"]*\";name=\"$1\";g"
    runsed "$optstr" "$2"
}

add_description()
{
    optstr="s;<description>.*</description>;<description>${packageName}:$1</description>;g"
    runsed "$optstr" "$2"
}

add_step()
{
    if [ -n "$testCliOptions" ]; then
	optstr="s;<step>.*</step>;<step>$1 $testCliOptions</step>;g"
    else
	optstr="s;<step>.*</step>;<step>$1</step>;g"
    fi
    runsed "$optstr" "$2"
}

add_insignificant_test()
{
    optstr="s;insignificant=\"[^\"]*\";insignificant=\"$1\";g"
    runsed "$optstr" "$2"
}

runsed()
{
    sedopt=$(echo $1)
    cmd='sed -e "$sedopt" $2'
    eval $cmd
}


#======= main =========

programName="$0"
usage="Usage: `basename $programName` -t <template_dir> -d <debian_dir> \
-i <dir_where_tests_will_be_installed> <project_files>"

if [ $# -le 0 ]; then
    echo "$usage" 1>&2
    exit 1
fi

while [ $# -gt 0 ]; do
    case "$1" in
	-t) templateDir=$(cd "$2"; pwd)
            shift
            ;;
	-d) packageDir=$(cd "$2"; pwd)
	    shift
	    ;;
        -i) installDir=$(cd "$2"; pwd)
            shift
            ;;
        -c) testCliOptions="$2"
            shift
            ;;
	*) projFileList="$projFileList $1";;
    esac
    shift
done

if [ -z "$templateDir" ]|| [ -z "$packageDir" ] ||  [ -z "$installDir" ]; then
    echo "$usage" 1>&2
    exit 1
fi

for projFile in $projFileList; do
    install_tests $projFile
done
