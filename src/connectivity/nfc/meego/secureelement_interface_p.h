/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -i meego/dbustypes_p.h -p secureelement_interface_p.h:secureelement_interface.cpp com.nokia.nfc.SecureElement.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SECUREELEMENT_INTERFACE_P_H_1294121544
#define SECUREELEMENT_INTERFACE_P_H_1294121544

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "meego/dbustypes_p.h"

/*
 * Proxy class for interface com.nokia.nfc.SecureElement
 */
class ComNokiaNfcSecureElementInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.nokia.nfc.SecureElement"; }

public:
    ComNokiaNfcSecureElementInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComNokiaNfcSecureElementInterface();

    Q_PROPERTY(QString ActivationLevel READ activationLevel)
    inline QString activationLevel() const
    { return qvariant_cast< QString >(property("ActivationLevel")); }

    Q_PROPERTY(QString State READ state)
    inline QString state() const
    { return qvariant_cast< QString >(property("State")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Activate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Activate"), argumentList);
    }

    inline QDBusPendingReply<> Deactivate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Deactivate"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> GetProperties()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetProperties"), argumentList);
    }

    inline QDBusPendingReply<QByteArray> RawRequest(const QByteArray &in0)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(in0);
        return asyncCallWithArgumentList(QLatin1String("RawRequest"), argumentList);
    }

    inline QDBusPendingReply<> ReleaseAccess()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ReleaseAccess"), argumentList);
    }

    inline QDBusPendingReply<> RequestAccess()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("RequestAccess"), argumentList);
    }

    inline QDBusPendingReply<> SetActivationLevel(const QDBusVariant &in0)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(in0);
        return asyncCallWithArgumentList(QLatin1String("SetActivationLevel"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void PropertyChanged(const QString &in0, const QDBusVariant &in1);
    void TransactionEnded(const QString &in0, const QString &in1);
    void TransactionStarted(const QString &in0);
};

namespace com {
  namespace nokia {
    namespace nfc {
      typedef ::ComNokiaNfcSecureElementInterface SecureElement;
    }
  }
}
#endif
