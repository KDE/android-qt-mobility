/****************************************************************************
**
** Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Mobility Components.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!

\page versit.html

\title Qt Versit Developer Resources

\tableofcontents

\section1 Introduction

QT Versit API provides a set of methods to parse VCard 2.1 ( As mentioned
in www.imc.org/pdi/vcard-21.rtf specification ) formatted content.
Also it provides utlitiy style of API to generate QContact from the
VCard 2.1 input stream and also in other way from QContact to VCard 2.1
output stream. The whole parser is platform independent from the perspective
of Qt-based, cross-platform development.

\section1 Overview 

Versit also familiarly knows as VCard is file format for electronic
representation of business cards which is often exchanged in Mail,Bluetooth,
Infrared etc.Most supported version of VCard format is VCard 2.1
(www.imc.org/pdi/vcard-21.rtf). QtVersit implementation follows
this specification and also it supports VCard 3.0 ( http://www.ietf.org/rfc/rfc2426.txt)
style of encoding.

QVersitReader class provides interface to read the VCard 2.1
formatted file content synchronously/asynchronously and produces QVersitDocument.
QVersitDocument is a place holder for meta data of versit content. This document has set
of QVersitProperty which is basically a name-value pair. Also QVersitProperty class provides
interface to add parameters and group names. Instance of one QveristProperty will hold
one and only Name and Value ( One to One association ).

QVersitWriter class provides interface to convert QVersitDocument into readable VCard
formatted file. QVersitWriter extended into different standard of VCard formats like
QVCard21Writer and QVCard30Writer but this class is not exported since needed functionalities
for API user will be in baseclass ie QVersitWriter.

As name specifies QVCard21Writer writes the QVersitDocument into VCard 2.1 formatted and
QVCard30Writer writes QVersitDocument into VCard 3.0 ( http://www.ietf.org/rfc/rfc2426.txt)
formatted.

VCard writers are strict in the sense that it will follow the specifications mentioned above
strictly but VCard readers are flexible in certain extend.
Also Versit Parser provides utility style classes to generate contact from VCard
( QVersitContactImporter ) and generate VCard from contact ( QVersitContactExporter ),
both will use QVersitDocument as input/output data which later can be converted into file
by using QVCardWriter. Image and Audio content embedded in VCard will be
stored in filesystem , path to filesystem can be set by using QVersitContactImporter::setAudioClipPath
and QVersitContactImporter::setImagePath.( See example section for more details ).
Filename is generated by using first and last name of contact or as described in VCard Name type field.

\section1 Using the API

This section provides some examples of common usage of the API.

\section2 Generating QContact from VCard file

    Purpose of this example snippet code is to generate QContact from VCard 2.1 formatted
    file which is passed as an QIODevice argument to snippet function name generateContact(QIODevice&)
    This function will return one or more QContact based on the input VCard file.It exposes the usage
    of QVersitReader,QVersitContactImporter and QVersitDocument.

\section2 Generating VCard file from QContact

    Purpose of this example snippet code is to encode QContact into VCard 2.1 format and write
    into file. Function named generateVCard(QContact&) takes QContact as a reference argument
    and converts QContactDetails into QVersitDocument. Later QVersitDocument is passed to
    QVersitWriter which writes this information into QIODevice which is here nothing but a file.
    This example snippet shows the usage of QVersitWriter,QVersitContactExporter and QVersitDocument.

\section2 Generating VCard file from QContact and save to contact database

    Purpose of this example snippet code is to generate QContact from VCard 2.1 formatted
    file which is passed as an QIODevice argument to snippet function name generateContact(QIODevice&)
    This function will generate one or more QContact based on the input VCard file and writes this contact
    details to contact database by using QContactManager.It exposes the usage
    of QVersitReader,QVersitContactImporter,QVersitDocument and QContactManager.
	

\section1 Building and compiling

This library requires Qt 4.5 to be installed.

To build the library, run \tt qmake and \tt make.

\section1 Reference documentation

\section2 Main classes

\list
    \o \l{QVersitProperty}
    \o \l{QVersitDocument}    
    \o \l{QVersitReader}
    \o \l{QVersitWriter}    
    \o \l{QVersitContactImporter}
    \o \l{QVersitContactExporter}
\endlist

\section2 Asynchronous Requests
    QVersitReader provides asynchronous functionality to read VCard formatted file. Reason is
    file reading could be slow and multiple vcards can present in one input stream. By calling startReading()
    API of QVersitReader triggers an asynchronous operation and upon completion readingDone() signal is emitted.
    Results of the parsing can be read from result() API.

    Also scaling the image is time consuming operation and does asynchrous operation. When scaling needed
    QVersitContactExporter emits a signal scale along with file name of the image and image content which needs
    to be scaled. For example by writing a below line of code the client can achieve its own scaling functionalities
*/
