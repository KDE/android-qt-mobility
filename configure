#!/bin/sh
#############################################################################
##
## Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
## All rights reserved.
## Contact: Nokia Corporation (qt-info@nokia.com)
##
## This file is part of the Qt Mobility Components.
##
## $QT_BEGIN_LICENSE:LGPL$
## No Commercial Usage
## This file contains pre-release code and may not be distributed.
## You may use this file in accordance with the terms and conditions
## contained in the Technology Preview License Agreement accompanying
## this package.
##
## GNU Lesser General Public License Usage
## Alternatively, this file may be used under the terms of the GNU Lesser
## General Public License version 2.1 as published by the Free Software
## Foundation and appearing in the file LICENSE.LGPL included in the
## packaging of this file.  Please review the following information to
## ensure the GNU Lesser General Public License version 2.1 requirements
## will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
##
## In addition, as a special exception, Nokia gives you certain additional
## rights.  These rights are described in the Nokia Qt LGPL Exception
## version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
##
## If you have questions regarding the use of this file, please contact
## Nokia at qt-info@nokia.com.
##
##
##
##
##
##
##
##
## $QT_END_LICENSE$
##
#############################################################################

# the current directory (shadow build dir)
shadowpath=`/bin/pwd`
# the name of this script
relconf=`basename $0`
# the directory of this script is the "source tree"
relpath=`dirname $0`
relpath=`(cd "$relpath"; /bin/pwd)`

CONFIG_IN="$shadowpath/config.in"
QT_MOBILITY_PREFIX=$shadowpath/install
QT_MOBILITY_INCLUDE=
QT_MOBILITY_LIB=
QT_MOBILITY_BIN=
BUILD_UNITTESTS=
BUILD_EXAMPLES=
RELEASEMODE=
CONTACTS_PLUGIN=
LINUX_TARGET=
QMAKE_CACHE="$shadowpath/.qmake.cache"

usage() 
{
    echo "Usage: configure [-prefix <dir>] [headerdir <dir>] [libdir <dir>]"
    echo "                 [-bindir <dir>] [-tests] [-examples] [debug]"
    echo "                 [-release]"
    echo
    echo "Options:"
    echo
    echo "-prefix <dir> ..... This will install everything relative to <dir>"
    echo "                    (default prefix: $shadowpath/install)"
    echo "-headerdir <dir> .. Header files will be installed to <dir>"
    echo "                    (default prefix: PREFIX/include)"
    echo "-libdir <dir> ..... Libraries will be installed to <dir>"
    echo "                    (default PREFIX/lib)"
    echo "-bindir <dir> ..... Executables will be installed to <dir>"
    echo "                    (default PREFIX/bin)"
    echo "-debug ............ Build with debugging symbols"
    echo "-release .......... Build without debugging symbols"
    echo "-tests ............ Build unit tests (not build by default)"
    echo "-examples ......... Build example applications"
    echo
    echo "-contact-src <backend> ..."
    echo "                    Compile the specified contacts API backend. Not selecting any backend"
    echo "                    will result in default selection for build platform"
    echo "                    options: symbian, wince, kabc, memory"
    echo "-maemo ............ Build Qt Mobility for Maemo."
    echo "                    (default: Desktop Linux)"
    
    rm "$CONFIG_IN"
    exit    
}

rm -rf "$QMAKE_CACHE"
CONFIG_LOG="$shadowpath/config.log"
rm -rf "$CONFIG_LOG"
#echo "CONFIG += silent"  > "$CONFIG_IN"

while [ "$#" -gt 0 ]; do
    case "$1" in 
        -h|-help|--help)
            usage
            ;;
        -headerdir)
            QT_MOBILITY_INCLUDE="$2"
            shift
            ;;
        -libdir)
            QT_MOBILITY_LIB="$2"
            shift
            ;;
        --prefix|-prefix)
            QT_MOBILITY_PREFIX="$2"
            shift
            ;;
        -bindir)
            QT_MOBILITY_BIN="$2"
            shift
            ;;
        -tests)
            BUILD_UNITTESTS="yes"
            ;;
        -examples)
            BUILD_EXAMPLES="yes"
            ;;
        -debug)
            RELEASEMODE=debug
            ;;
        -release)
            RELEASEMODE=release
            ;;
        -contact-src)
            CONTACTS_PLUGIN="$CONTACTS_PLUGIN $2"
            shift
            ;;
        -maemo)
            LINUX_TARGET=maemo 
            ;;
        *)
            echo "Unknown option: $1"
            usage
            ;;
    esac
    shift
done

if [ -z "$RELEASEMODE" ]; then
    RELEASEMODE="debug"
fi
echo "CONFIG += $RELEASEMODE" >> "$CONFIG_IN"
echo "CONTACTS_BACKENDS = $CONTACTS_PLUGIN" >> "$CONFIG_IN"

#do we build for Maemo?
if [ -n "$LINUX_TARGET" ]; then
    echo "CONFIG+=maemo" >> "$CONFIG_IN"
fi

#process PREFIX
if [ -d "$QT_MOBILITY_PREFIX" ]; then
    QT_MOBILITY_PREFIX=`(cd "$QT_MOBILITY_PREFIX"; /bin/pwd)`
else
    mkdir -p "$QT_MOBILITY_PREFIX"
    absPath=`(cd "$QT_MOBILITY_PREFIX"; /bin/pwd)`
    rm -rf "$QT_MOBILITY_PREFIX"
    QT_MOBILITY_PREFIX="$absPath"
fi
echo "QT_MOBILITY_PREFIX = $QT_MOBILITY_PREFIX" >> "$CONFIG_IN"

#process include path
if [ -z "$QT_MOBILITY_INCLUDE" ]; then
    QT_MOBILITY_INCLUDE="$QT_MOBILITY_PREFIX/include"
elif [ -d "$QT_MOBILITY_INCLUDE" ]; then
    QT_MOBILITY_INCLUDE=`(cd "$QT_MOBILITY_INCLUDE"; /bin/pwd)`
else
    mkdir -p "$QT_MOBILITY_INCLUDE"
    absPath=`(cd "$QT_MOBILITY_INCLUDE"; /bin/pwd)`
    rm -rf "$QT_MOBILITY_INCLUDE"
    QT_MOBILITY_INCLUDE="$absPath"
fi
echo "QT_MOBILITY_INCLUDE = $QT_MOBILITY_INCLUDE" >> "$CONFIG_IN"


#process library path
if [ -z "$QT_MOBILITY_LIB" ]; then
    QT_MOBILITY_LIB="$QT_MOBILITY_PREFIX/lib"
elif [ -d "$QT_MOBILITY_LIB" ]; then
    QT_MOBILITY_LIB=`(cd "$QT_MOBILITY_LIB"; /bin/pwd)`
else
    mkdir -p "$QT_MOBILITY_LIB"
    absPath=`(cd "$QT_MOBILITY_LIB"; /bin/pwd)`
    rm -rf "$QT_MOBILITY_LIB"
    QT_MOBILITY_LIB="$absPath"
fi
echo "QT_MOBILITY_LIB = $QT_MOBILITY_LIB" >> "$CONFIG_IN"

#process binary path
if [ -z "$QT_MOBILITY_BIN" ]; then
    QT_MOBILITY_BIN="$QT_MOBILITY_PREFIX/bin"
elif [ -d "$QT_MOBILITY_BIN" ]; then
    QT_MOBILITY_BIN=`(cd "$QT_MOBILITY_BIN"; /bin/pwd)`
else
    mkdir -p "$QT_MOBILITY_BIN"
    absPath=`(cd "$QT_MOBILITY_BIN"; /bin/pwd)`
    rm -rf "$QT_MOBILITY_BIN"
    QT_MOBILITY_BIN="$absPath"
fi
echo "QT_MOBILITY_BIN = $QT_MOBILITY_BIN" >> "$CONFIG_IN"

echo "QT_MOBILITY_SOURCE_TREE = $relpath" >> "$QMAKE_CACHE"
echo "QT_MOBILITY_BUILD_TREE = $shadowpath" >> "$QMAKE_CACHE"

if [ -z "$BUILD_UNITTESTS" ]; then
    echo "build_unit_tests = no" >> "$CONFIG_IN"
else
    echo "build_unit_tests = yes" >> "$CONFIG_IN"
fi

if [ -z "$BUILD_EXAMPLES" ]; then
    echo "build_examples = no" >> "$CONFIG_IN"
else
    echo "build_examples = yes" >> "$CONFIG_IN"
fi

echo "Configuring Qt Mobility"
echo 

WHICH="$relpath/config.tests/tools/which.test"

printf "Checking available Qt"
if ! "$WHICH" qmake 2>/dev/null 1>&2; then
    printf " ... Not found\n\n" >&2
    echo >&2 "Cannot find 'qmake' in your PATH.";
    echo >&2 "Aborting." 
else
    printf " ... "
    qmake -query QT_VERSION
fi

# find out which make we want to use
MAKE=
for m in make gmake; do
    if "$WHICH" $m >/dev/null 2>&1; then
        MAKE=`$WHICH $m`
        break
    fi
done
if [ -z "$MAKE" ]; then
    echo >&2 "Cannot find 'make' or 'gmake' in your PATH";
    echo >&2 "Aborting." 
fi

compileTest()
{
    printf "Checking $1"
    CURRENT_PWD=`pwd`
    cd "$relpath/config.tests/$2"
    rm -rf ./$2
    qmake >> "$CONFIG_LOG"
    printf  " ."
    "$MAKE" clean >> "$CONFIG_LOG"
    printf "."
    "$MAKE" >> "$CONFIG_LOG" 2>&1
    printf ". "
    if ./$2 >> "$CONFIG_LOG" 2>&1; then
        echo "OK"
        echo "$2_enabled = yes" >> "$CONFIG_IN"
    else
        echo "Not Found"
        echo "$2_enabled = no" >> "$CONFIG_IN"
    fi
    cd "$CURRENT_PWD"
}

#compile tests
compileTest QMF qmf
compileTest NetworkManager networkmanager
compileTest "CoreWLAN (MacOS 10.6)" corewlan

echo "Generating Mobility Headers..."
#remove old headers
rm -rf $shadowpath/include
mkdir $shadowpath/include
$relpath/bin/syncheaders $shadowpath/include $relpath/bearer
$relpath/bin/syncheaders $shadowpath/include $relpath/context
$relpath/bin/syncheaders $shadowpath/include $relpath/location
$relpath/bin/syncheaders $shadowpath/include $relpath/serviceframework
$relpath/bin/syncheaders $shadowpath/include $relpath/systeminfo
$relpath/bin/syncheaders $shadowpath/include $relpath/contacts
$relpath/bin/syncheaders $shadowpath/include $relpath/multimedia
$relpath/bin/syncheaders $shadowpath/include $relpath/messaging

mv "$CONFIG_IN" config.pri
mkdir -p "$shadowpath/features"

echo "Running qmake..."
if qmake -recursive "$relpath/qtmobility.pro"; then
    echo ""
    echo "configure has finished. You may run make or gmake to build the project now."
else
    echo ""
    echo "configure failed."
fi
